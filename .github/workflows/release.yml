on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:

  build-release-artifacts:
    name: Build Windows and macOS release artifacts
    strategy:
      matrix:
        run: [windows-x86_64, macos-x86_64]
        include:
          - run: windows-x86_64
            os: windows-latest
            toolchain-suffix: x86_64-pc-windows-msvc
            lib-file-name: realearn.dll
          - run: macos-x86_64
            os: macos-latest
            toolchain-suffix: x86_64-apple-darwin
            lib-file-name: realearn.dylib
    runs-on: ${{ matrix.os }}
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.7 # This is relevant for macOS builds only
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
#       - name: Install Rust
#         uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: nightly-2020-05-15-${{ matrix.toolchain-suffix }}
#           override: true
#       - name: Build release
#         uses: actions-rs/cargo@v1
#         with:
#           command: build
#           args: --release
#       - name: Upload artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: ${{ matrix.run}}
#           path: target/release/${{ matrix.lib-file-name }}

#   build-linux-release-artifacts:
#     name: Build Linux release artifacts
#     strategy:
#       matrix:
#         run:
#           - os: ubuntu-latest
#             toolchain-suffix: x86_64-unknown-linux-gnu
#             lib-file-name: realearn.so
#             artifact-name: linux-x86_64
#     runs-on: ${{ matrix.run.os }}
#     steps:
#       - name: Checkout
#       - uses: actions/checkout@v2
#         with:
#           submodules: recursive
#       # TODO Put this into build.rs, then we don't need an extra Linux job
#       - name: Set up dependencies
#         run: sudo apt-get install nasm xorg-dev libxcb-shape0-dev libxcb-render0-dev libxcb-xfixes0-dev
#       - name: Compile EEL assembler code
#         working-directory: lib/WDL/WDL/eel2
#         run: make asm-nseel-x64.o
#       - name: Install Rust
#         uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: nightly-2020-05-15-${{ matrix.run.toolchain-suffix }}
#           override: true
#       - name: Build release
#         uses: actions-rs/cargo@v1
#         with:
#           command: build
#           args: --release
#       - name: Upload artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: ${{ matrix.run.artifact-name}}
#           path: target/release/${{ matrix.run.lib-file-name }}

#   create-release:
#     name: Publish release
#     needs: build-release-artifacts
#     runs-on: ubuntu-latest
#     steps:
#       - name: Create release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: ${{ github.ref }}
#           draft: true
#           prerelease: ${{ contains(github.ref, 'pre') }}
#       - name: Download artifacts from build job
#         uses: actions/download-artifact@v1
#       - name: Upload release artifacts
#         id: upload-release-asset
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#           asset_path: ./windows-x86_64/realearn.dll
#           asset_name: realearn-${{ github.ref }}-windows-x86_64.dll
#           asset_content_type: application/octet-stream
