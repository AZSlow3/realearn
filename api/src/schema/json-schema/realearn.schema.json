{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ReaLearn",
  "description": "Only used for JSON schema generation.",
  "type": "object",
  "required": [
    "session"
  ],
  "properties": {
    "session": {
      "$ref": "#/definitions/Session"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AbsoluteMode": {
      "type": "string",
      "enum": [
        "Normal",
        "IncrementalButton",
        "ToggleButton",
        "MakeRelative",
        "PerformanceControl"
      ]
    },
    "ActionInvocationKind": {
      "type": "string",
      "enum": [
        "Trigger",
        "Absolute14Bit",
        "Absolute7Bit",
        "Relative"
      ]
    },
    "ActivationCondition": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Modifier"
              ]
            },
            "modifiers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModifierState"
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "bank_index",
            "kind",
            "parameter"
          ],
          "properties": {
            "bank_index": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "Bank"
              ]
            },
            "parameter": {
              "$ref": "#/definitions/ParamRef"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "condition",
            "kind"
          ],
          "properties": {
            "condition": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "enum": [
                "Eel"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "condition",
            "kind"
          ],
          "properties": {
            "condition": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "enum": [
                "Expression"
              ]
            }
          }
        }
      ]
    },
    "AnyOnParameter": {
      "type": "string",
      "enum": [
        "TrackSolo",
        "TrackMute",
        "TrackArm",
        "TrackSelection"
      ]
    },
    "AudioCacheBehavior": {
      "oneOf": [
        {
          "description": "Loads directly from the disk.\n\nMight still pre-buffer some blocks but definitely won't put the complete audio data into memory.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "DirectFromDisk"
              ]
            }
          }
        },
        {
          "description": "Loads the complete audio data into memory.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "CacheInMemory"
              ]
            }
          }
        }
      ]
    },
    "AudioTimeStretchMode": {
      "oneOf": [
        {
          "description": "Doesn't just stretch/squeeze the material but also changes the pitch.\n\nComparatively fast.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "VariSpeed"
              ]
            }
          }
        },
        {
          "description": "Applies a real time-stretch algorithm to the material which keeps the pitch.\n\nComparatively slow.",
          "type": "object",
          "required": [
            "kind",
            "mode"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "KeepingPitch"
              ]
            },
            "mode": {
              "$ref": "#/definitions/VirtualTimeStretchMode"
            }
          }
        }
      ]
    },
    "AutomationMode": {
      "type": "string",
      "enum": [
        "TrimRead",
        "Read",
        "Touch",
        "Write",
        "Latch",
        "LatchPreview"
      ]
    },
    "AutomationModeOverride": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Bypass"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "mode"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Mode"
              ]
            },
            "mode": {
              "$ref": "#/definitions/AutomationMode"
            }
          }
        }
      ]
    },
    "BookmarkDescriptor": {
      "oneOf": [
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            {
              "type": "object",
              "required": [
                "index"
              ],
              "properties": {
                "index": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            }
          ],
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Marker"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            {
              "type": "object",
              "required": [
                "index"
              ],
              "properties": {
                "index": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            }
          ],
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Region"
              ]
            }
          }
        }
      ]
    },
    "Bpm": {
      "type": "number",
      "format": "double"
    },
    "ButtonFilter": {
      "type": "string",
      "enum": [
        "PressOnly",
        "ReleaseOnly"
      ]
    },
    "Clip": {
      "type": "object",
      "required": [
        "audio_settings",
        "color",
        "looped",
        "midi_settings",
        "section",
        "source",
        "time_base",
        "volume"
      ],
      "properties": {
        "active_source": {
          "description": "Which of the sources is the active one.",
          "default": "Normal",
          "allOf": [
            {
              "$ref": "#/definitions/SourceOrigin"
            }
          ]
        },
        "audio_settings": {
          "$ref": "#/definitions/ClipAudioSettings"
        },
        "color": {
          "description": "Color of the clip.",
          "allOf": [
            {
              "$ref": "#/definitions/ClipColor"
            }
          ]
        },
        "frozen_source": {
          "description": "Source with effects \"rendered in\", usually audio.",
          "allOf": [
            {
              "$ref": "#/definitions/Source"
            }
          ]
        },
        "looped": {
          "description": "Whether the clip should be played repeatedly or as a single shot.",
          "type": "boolean"
        },
        "midi_settings": {
          "$ref": "#/definitions/ClipMidiSettings"
        },
        "name": {
          "type": "string"
        },
        "section": {
          "description": "Defines which portion of the original source should be played.",
          "allOf": [
            {
              "$ref": "#/definitions/Section"
            }
          ]
        },
        "source": {
          "description": "Source of the audio/MIDI material of this clip.",
          "allOf": [
            {
              "$ref": "#/definitions/Source"
            }
          ]
        },
        "start_timing": {
          "description": "Start timing override.\n\n`None` means it uses the column start timing.",
          "allOf": [
            {
              "$ref": "#/definitions/ClipPlayStartTiming"
            }
          ]
        },
        "stop_timing": {
          "description": "Stop timing override.\n\n`None` means it uses the column stop timing.",
          "allOf": [
            {
              "$ref": "#/definitions/ClipPlayStopTiming"
            }
          ]
        },
        "time_base": {
          "description": "Time base of the material provided by that source.",
          "allOf": [
            {
              "$ref": "#/definitions/ClipTimeBase"
            }
          ]
        },
        "volume": {
          "description": "Relative volume adjustment of clip.",
          "allOf": [
            {
              "$ref": "#/definitions/Db"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ClipAudioSettings": {
      "type": "object",
      "required": [
        "apply_source_fades"
      ],
      "properties": {
        "apply_source_fades": {
          "description": "Defines whether to apply automatic fades in order to fix potentially non-optimized source material.\n\n## `false`\n\nDoesn't apply automatic fades for fixing non-optimized source material.\n\nThis only prevents source-fix fades. Fades that are not about fixing the source will still be applied if necessary in order to ensure a smooth playback, such as:\n\n- Section fades (start fade-in, end fade-out) - Interaction fades (resume-after-pause fade-in, immediate stop fade-out)\n\nFades don't overlap. Here's the order of priority (for fade-in and fade-out separately):\n\n- Interaction fades - Section fades - Source-fix fades\n\n## `true`\n\nApplies automatic fades to fix non-optimized source material, if necessary.",
          "type": "boolean"
        },
        "cache_behavior": {
          "description": "Whether to cache audio in memory.\n\n`None` means it uses the column cache behavior.",
          "allOf": [
            {
              "$ref": "#/definitions/AudioCacheBehavior"
            }
          ]
        },
        "resample_mode": {
          "description": "Overrides the column resample mode for clips in this column.",
          "allOf": [
            {
              "$ref": "#/definitions/VirtualResampleMode"
            }
          ]
        },
        "time_stretch_mode": {
          "description": "Defines how to adjust audio material.\n\nThis is usually used with the beat time base to match the tempo of the clip to the global tempo.\n\n`None` means it uses the column time stretch mode.",
          "allOf": [
            {
              "$ref": "#/definitions/AudioTimeStretchMode"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ClipColor": {
      "oneOf": [
        {
          "description": "Inherits the color of the column's play track.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "PlayTrackColor"
              ]
            }
          }
        },
        {
          "description": "Assigns a very specific custom color.",
          "type": "object",
          "required": [
            "kind",
            "value"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "CustomColor"
              ]
            },
            "value": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        {
          "description": "Uses a certain color from a palette.",
          "type": "object",
          "required": [
            "index",
            "kind"
          ],
          "properties": {
            "index": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "PaletteColor"
              ]
            }
          }
        }
      ]
    },
    "ClipColumnAction": {
      "type": "string",
      "enum": [
        "Stop"
      ]
    },
    "ClipColumnDescriptor": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Selected"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "index"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ByIndex"
              ]
            },
            "index": {
              "type": "integer",
              "format": "uint",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "expression"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Dynamic"
              ]
            },
            "expression": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ClipColumnTrackContext": {
      "type": "string",
      "enum": [
        "Playback",
        "Recording"
      ]
    },
    "ClipManagementAction": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ClearSlot"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "FillSlotWithSelectedItem"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "EditClip"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "CopyOrPasteClip"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "factor",
            "kind"
          ],
          "properties": {
            "factor": {
              "type": "number",
              "format": "double"
            },
            "kind": {
              "type": "string",
              "enum": [
                "AdjustClipSectionLength"
              ]
            }
          }
        }
      ]
    },
    "ClipMatrixAction": {
      "type": "string",
      "enum": [
        "Stop",
        "Undo",
        "Redo",
        "BuildScene"
      ]
    },
    "ClipMidiSettings": {
      "type": "object",
      "required": [
        "interaction_reset_settings",
        "loop_reset_settings",
        "section_reset_settings",
        "source_reset_settings"
      ],
      "properties": {
        "interaction_reset_settings": {
          "description": "For fine-tuning instant start/stop of a MIDI clip when in the middle of a source or section.",
          "allOf": [
            {
              "$ref": "#/definitions/MidiResetMessageRange"
            }
          ]
        },
        "loop_reset_settings": {
          "description": "For fine-tuning the complete loop.",
          "allOf": [
            {
              "$ref": "#/definitions/MidiResetMessageRange"
            }
          ]
        },
        "section_reset_settings": {
          "description": "For fine-tuning the section.",
          "allOf": [
            {
              "$ref": "#/definitions/MidiResetMessageRange"
            }
          ]
        },
        "source_reset_settings": {
          "description": "For fixing the source itself.",
          "allOf": [
            {
              "$ref": "#/definitions/MidiResetMessageRange"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ClipPlayStartTiming": {
      "oneOf": [
        {
          "description": "Starts playing immediately.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Immediately"
              ]
            }
          }
        },
        {
          "description": "Starts playing according to the given quantization.",
          "type": "object",
          "required": [
            "denominator",
            "kind",
            "numerator"
          ],
          "properties": {
            "denominator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "Quantized"
              ]
            },
            "numerator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      ]
    },
    "ClipPlayStopTiming": {
      "oneOf": [
        {
          "description": "Uses the play start timing.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "LikeClipStartTiming"
              ]
            }
          }
        },
        {
          "description": "Stops playing immediately.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Immediately"
              ]
            }
          }
        },
        {
          "description": "Stops playing according to the given quantization.",
          "type": "object",
          "required": [
            "denominator",
            "kind",
            "numerator"
          ],
          "properties": {
            "denominator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "Quantized"
              ]
            },
            "numerator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        {
          "description": "Keeps playing until the end of the clip.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "UntilEndOfClip"
              ]
            }
          }
        }
      ]
    },
    "ClipRecordStartTiming": {
      "oneOf": [
        {
          "description": "Uses the inherited clip play start timing (from column or matrix).",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "LikeClipPlayStartTiming"
              ]
            }
          }
        },
        {
          "description": "Starts recording immediately.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Immediately"
              ]
            }
          }
        },
        {
          "description": "Starts recording according to the given quantization.",
          "type": "object",
          "required": [
            "denominator",
            "kind",
            "numerator"
          ],
          "properties": {
            "denominator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "Quantized"
              ]
            },
            "numerator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      ]
    },
    "ClipRecordStopTiming": {
      "oneOf": [
        {
          "description": "Uses the record start timing.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "LikeClipRecordStartTiming"
              ]
            }
          }
        },
        {
          "description": "Stops recording immediately.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Immediately"
              ]
            }
          }
        },
        {
          "description": "Stops recording according to the given quantization.",
          "type": "object",
          "required": [
            "denominator",
            "kind",
            "numerator"
          ],
          "properties": {
            "denominator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "Quantized"
              ]
            },
            "numerator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      ]
    },
    "ClipRecordTimeBase": {
      "oneOf": [
        {
          "description": "Derives the time base of the resulting clip from the clip start timing.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "DeriveFromRecordTiming"
              ]
            }
          }
        },
        {
          "description": "Sets the time base of the recorded clip to [`ClipTimeBase::Time`].",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Time"
              ]
            }
          }
        },
        {
          "description": "Sets the time base of the recorded clip to [`ClipTimeBase::Beat`].",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Beat"
              ]
            }
          }
        }
      ]
    },
    "ClipRowAction": {
      "type": "string",
      "enum": [
        "PlayScene",
        "BuildScene",
        "ClearScene",
        "CopyOrPasteScene"
      ]
    },
    "ClipRowDescriptor": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Selected"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "index"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ByIndex"
              ]
            },
            "index": {
              "type": "integer",
              "format": "uint",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "expression"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Dynamic"
              ]
            },
            "expression": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ClipSettingOverrideAfterRecording_for_ClipPlayStartTiming": {
      "oneOf": [
        {
          "description": "Doesn't apply any override.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Inherit"
              ]
            }
          }
        },
        {
          "description": "Overrides the setting with the given value.",
          "type": "object",
          "required": [
            "kind",
            "value"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Override"
              ]
            },
            "value": {
              "$ref": "#/definitions/ClipPlayStartTiming"
            }
          }
        },
        {
          "description": "Derives the setting from the record timing.\n\nIf the record timing is set to the global clip timing, that means it will not apply any override. If it's set to something specific, it will apply the appropriate override.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "DeriveFromRecordTiming"
              ]
            }
          }
        }
      ]
    },
    "ClipSettingOverrideAfterRecording_for_ClipPlayStopTiming": {
      "oneOf": [
        {
          "description": "Doesn't apply any override.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Inherit"
              ]
            }
          }
        },
        {
          "description": "Overrides the setting with the given value.",
          "type": "object",
          "required": [
            "kind",
            "value"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Override"
              ]
            },
            "value": {
              "$ref": "#/definitions/ClipPlayStopTiming"
            }
          }
        },
        {
          "description": "Derives the setting from the record timing.\n\nIf the record timing is set to the global clip timing, that means it will not apply any override. If it's set to something specific, it will apply the appropriate override.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "DeriveFromRecordTiming"
              ]
            }
          }
        }
      ]
    },
    "ClipSlotDescriptor": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Selected"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "column_index",
            "row_index"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ByIndex"
              ]
            },
            "column_index": {
              "type": "integer",
              "format": "uint",
              "minimum": 0.0
            },
            "row_index": {
              "type": "integer",
              "format": "uint",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "column_expression",
            "row_expression"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Dynamic"
              ]
            },
            "column_expression": {
              "type": "string"
            },
            "row_expression": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ClipTimeBase": {
      "description": "Decides if the clip will be adjusted to the current tempo.",
      "oneOf": [
        {
          "description": "Material which doesn't need to be adjusted to the current tempo.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Time"
              ]
            }
          }
        },
        {
          "description": "Material which needs to be adjusted to the current tempo.",
          "type": "object",
          "required": [
            "downbeat",
            "kind",
            "time_signature"
          ],
          "properties": {
            "audio_tempo": {
              "description": "The clip's native tempo.\n\nMust be set for audio. Is ignored for MIDI.\n\nThis information is used by the clip engine to determine how much to speed up or slow down the material depending on the current project tempo.",
              "allOf": [
                {
                  "$ref": "#/definitions/Bpm"
                }
              ]
            },
            "downbeat": {
              "description": "Defines which position (in beats) is the downbeat.",
              "allOf": [
                {
                  "$ref": "#/definitions/PositiveBeat"
                }
              ]
            },
            "kind": {
              "type": "string",
              "enum": [
                "Beat"
              ]
            },
            "time_signature": {
              "description": "The time signature of this clip.\n\nIf provided, This information is used for certain aspects of the user interface.",
              "allOf": [
                {
                  "$ref": "#/definitions/TimeSignature"
                }
              ]
            }
          }
        }
      ]
    },
    "ClipTransportAction": {
      "type": "string",
      "enum": [
        "PlayStop",
        "PlayPause",
        "Stop",
        "Pause",
        "RecordStop",
        "RecordPlayStop",
        "Looped"
      ]
    },
    "Column": {
      "type": "object",
      "required": [
        "clip_play_settings",
        "clip_record_settings"
      ],
      "properties": {
        "clip_play_settings": {
          "$ref": "#/definitions/ColumnClipPlaySettings"
        },
        "clip_record_settings": {
          "$ref": "#/definitions/ColumnClipRecordSettings"
        },
        "slots": {
          "description": "Slots in this column.\n\nOnly filled slots need to be mentioned here.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Slot"
          }
        }
      },
      "additionalProperties": false
    },
    "ColumnClipPlayAudioSettings": {
      "type": "object",
      "properties": {
        "cache_behavior": {
          "description": "Overrides the matrix-global audio cache behavior for clips in this column.",
          "allOf": [
            {
              "$ref": "#/definitions/AudioCacheBehavior"
            }
          ]
        },
        "resample_mode": {
          "description": "Overrides the matrix-global resample mode for clips in this column.",
          "allOf": [
            {
              "$ref": "#/definitions/VirtualResampleMode"
            }
          ]
        },
        "time_stretch_mode": {
          "description": "Overrides the matrix-global audio time stretch mode for clips in this column.",
          "allOf": [
            {
              "$ref": "#/definitions/AudioTimeStretchMode"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ColumnClipPlaySettings": {
      "type": "object",
      "required": [
        "audio_settings"
      ],
      "properties": {
        "audio_settings": {
          "$ref": "#/definitions/ColumnClipPlayAudioSettings"
        },
        "mode": {
          "$ref": "#/definitions/ColumnPlayMode"
        },
        "start_timing": {
          "description": "Start timing override.\n\n`None` means it uses the matrix-global start timing.",
          "allOf": [
            {
              "$ref": "#/definitions/ClipPlayStartTiming"
            }
          ]
        },
        "stop_timing": {
          "description": "Stop timing override.\n\n`None` means it uses the matrix-global stop timing.",
          "allOf": [
            {
              "$ref": "#/definitions/ClipPlayStopTiming"
            }
          ]
        },
        "track": {
          "description": "REAPER track used for playing back clips in this column.\n\nUsually, each column should have a play track. But events might occur that leave a column in a \"track-less\" state, e.g. the deletion of a track. This column will be unusable until the user sets a play track again. We still want to be able to save the matrix in such a state, otherwise it could be really annoying. So we allow `None`.",
          "allOf": [
            {
              "$ref": "#/definitions/TrackId"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ColumnClipRecordSettings": {
      "type": "object",
      "required": [
        "origin"
      ],
      "properties": {
        "origin": {
          "$ref": "#/definitions/RecordOrigin"
        },
        "track": {
          "description": "By default, Playtime records from the play track but this settings allows to override that.",
          "allOf": [
            {
              "$ref": "#/definitions/TrackId"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ColumnPlayMode": {
      "oneOf": [
        {
          "description": "- Only one clip in the column can play at a certain point in time. - Clips are started/stopped if the corresponding scene is started/stopped.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ExclusiveFollowingScene"
              ]
            }
          }
        },
        {
          "description": "- Only one clip in the column can play at a certain point in time. - Clips are not started/stopped if the corresponding scene is started/stopped.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ExclusiveIgnoringScene"
              ]
            }
          }
        },
        {
          "description": "- Multiple clips can play simultaneously. - Clips are started/stopped if the corresponding scene is started/stopped (in an exclusive manner).",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "NonExclusiveFollowingScene"
              ]
            }
          }
        },
        {
          "description": "- Multiple clips can play simultaneously. - Clips are not started/stopped if the corresponding scene is started/stopped.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Free"
              ]
            }
          }
        }
      ]
    },
    "Compartment": {
      "type": "object",
      "properties": {
        "custom_data": {
          "description": "At the moment, custom data is only used in the controller compartment.\n\nAttention: Custom data in the main compartment is not fully supported, i.e. it's not saved together with the session.",
          "type": "object",
          "additionalProperties": true
        },
        "default_group": {
          "$ref": "#/definitions/Group"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "mappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mapping"
          }
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        }
      },
      "additionalProperties": false
    },
    "Db": {
      "type": "number",
      "format": "double"
    },
    "EncoderFilter": {
      "type": "string",
      "enum": [
        "IncrementOnly",
        "DecrementOnly"
      ]
    },
    "Feedback": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "background_color": {
              "$ref": "#/definitions/VirtualColor"
            },
            "color": {
              "$ref": "#/definitions/VirtualColor"
            },
            "kind": {
              "type": "string",
              "enum": [
                "Numeric"
              ]
            },
            "transformation": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "background_color": {
              "$ref": "#/definitions/VirtualColor"
            },
            "color": {
              "$ref": "#/definitions/VirtualColor"
            },
            "kind": {
              "type": "string",
              "enum": [
                "Text"
              ]
            },
            "text_expression": {
              "type": "string"
            }
          }
        }
      ]
    },
    "FeedbackBehavior": {
      "type": "string",
      "enum": [
        "Normal",
        "SendFeedbackAfterControl",
        "PreventEchoFeedback"
      ]
    },
    "FeedbackResolution": {
      "type": "string",
      "enum": [
        "Beat",
        "High"
      ]
    },
    "FeedbackValueTable": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "kind",
            "value"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "FromTextToDiscrete"
              ]
            },
            "value": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "value"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "FromTextToContinuous"
              ]
            },
            "value": {
              "type": "object",
              "additionalProperties": {
                "type": "number",
                "format": "double"
              }
            }
          }
        }
      ]
    },
    "FireMode": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Normal"
              ]
            },
            "press_duration_interval": {
              "$ref": "#/definitions/Interval_for_uint32"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "AfterTimeout"
              ]
            },
            "timeout": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "AfterTimeoutKeepFiring"
              ]
            },
            "rate": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "timeout": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "OnSinglePress"
              ]
            },
            "max_duration": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "OnDoublePress"
              ]
            }
          }
        }
      ]
    },
    "FxChainDescriptor": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Track"
              ]
            },
            "chain": {
              "$ref": "#/definitions/TrackFxChain"
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            }
          }
        }
      ]
    },
    "FxDescriptor": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "This"
              ]
            },
            "fx_must_have_focus": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Focused"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "chain",
            "expression"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Dynamic"
              ]
            },
            "chain": {
              "$ref": "#/definitions/FxChainDescriptor"
            },
            "expression": {
              "type": "string"
            },
            "fx_must_have_focus": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "chain"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ById"
              ]
            },
            "chain": {
              "$ref": "#/definitions/FxChainDescriptor"
            },
            "fx_must_have_focus": {
              "type": "boolean"
            },
            "id": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "chain",
            "index"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ByIndex"
              ]
            },
            "chain": {
              "$ref": "#/definitions/FxChainDescriptor"
            },
            "fx_must_have_focus": {
              "type": "boolean"
            },
            "index": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "chain",
            "name"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ByName"
              ]
            },
            "allow_multiple": {
              "type": "boolean"
            },
            "chain": {
              "$ref": "#/definitions/FxChainDescriptor"
            },
            "fx_must_have_focus": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "FxDisplayKind": {
      "type": "string",
      "enum": [
        "FloatingWindow",
        "Chain"
      ]
    },
    "FxParameterDescriptor": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "address",
            "expression"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Dynamic"
              ]
            },
            "expression": {
              "type": "string"
            },
            "fx": {
              "$ref": "#/definitions/FxDescriptor"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "index"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ById"
              ]
            },
            "fx": {
              "$ref": "#/definitions/FxDescriptor"
            },
            "index": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "index"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ByIndex"
              ]
            },
            "fx": {
              "$ref": "#/definitions/FxDescriptor"
            },
            "index": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "name"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ByName"
              ]
            },
            "fx": {
              "$ref": "#/definitions/FxDescriptor"
            },
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "FxSnapshot": {
      "type": "object",
      "required": [
        "content"
      ],
      "properties": {
        "content": {
          "$ref": "#/definitions/FxSnapshotContent"
        },
        "fx_kind": {
          "type": "string"
        },
        "fx_name": {
          "type": "string"
        },
        "preset_name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "FxSnapshotContent": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "chunk",
            "kind"
          ],
          "properties": {
            "chunk": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "enum": [
                "Chunk"
              ]
            }
          }
        }
      ]
    },
    "Glue": {
      "type": "object",
      "properties": {
        "absolute_mode": {
          "$ref": "#/definitions/AbsoluteMode"
        },
        "button_filter": {
          "$ref": "#/definitions/ButtonFilter"
        },
        "control_transformation": {
          "type": "string"
        },
        "encoder_filter": {
          "$ref": "#/definitions/EncoderFilter"
        },
        "feedback": {
          "$ref": "#/definitions/Feedback"
        },
        "feedback_value_table": {
          "$ref": "#/definitions/FeedbackValueTable"
        },
        "fire_mode": {
          "$ref": "#/definitions/FireMode"
        },
        "interaction": {
          "$ref": "#/definitions/Interaction"
        },
        "jump_interval": {
          "$ref": "#/definitions/Interval_for_double"
        },
        "out_of_range_behavior": {
          "$ref": "#/definitions/OutOfRangeBehavior"
        },
        "relative_mode": {
          "$ref": "#/definitions/RelativeMode"
        },
        "reverse": {
          "type": "boolean"
        },
        "round_target_value": {
          "type": "boolean"
        },
        "source_interval": {
          "$ref": "#/definitions/Interval_for_double"
        },
        "step_factor_interval": {
          "$ref": "#/definitions/Interval_for_int32"
        },
        "step_size_interval": {
          "$ref": "#/definitions/Interval_for_double"
        },
        "takeover_mode": {
          "$ref": "#/definitions/TakeoverMode"
        },
        "target_interval": {
          "$ref": "#/definitions/Interval_for_double"
        },
        "target_value_sequence": {
          "type": "string"
        },
        "wrap": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "Group": {
      "type": "object",
      "properties": {
        "activation_condition": {
          "$ref": "#/definitions/ActivationCondition"
        },
        "control_enabled": {
          "type": "boolean"
        },
        "feedback_enabled": {
          "type": "boolean"
        },
        "id": {
          "description": "An optional ID that you can assign to this group in order to refer to it from somewhere else.\n\nThis ID should be unique within all groups in the same compartment.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "GroupMappingExclusivity": {
      "type": "string",
      "enum": [
        "Exclusive"
      ]
    },
    "InstanceExclusivity": {
      "type": "string",
      "enum": [
        "Exclusive",
        "ExclusiveOnOnly"
      ]
    },
    "Interaction": {
      "type": "string",
      "enum": [
        "SameControl",
        "SameTargetValue",
        "InverseControl",
        "InverseTargetValue",
        "InverseTargetValueOnOnly"
      ]
    },
    "Interval_for_double": {
      "type": "array",
      "items": [
        {
          "type": "number",
          "format": "double"
        },
        {
          "type": "number",
          "format": "double"
        }
      ],
      "maxItems": 2,
      "minItems": 2
    },
    "Interval_for_int32": {
      "type": "array",
      "items": [
        {
          "type": "integer",
          "format": "int32"
        },
        {
          "type": "integer",
          "format": "int32"
        }
      ],
      "maxItems": 2,
      "minItems": 2
    },
    "Interval_for_uint32": {
      "type": "array",
      "items": [
        {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      ],
      "maxItems": 2,
      "minItems": 2
    },
    "Keystroke": {
      "type": "object",
      "required": [
        "key",
        "modifiers"
      ],
      "properties": {
        "key": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "modifiers": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "LifecycleHook": {
      "type": "object",
      "properties": {
        "send_midi_feedback": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SendMidiFeedbackAction"
          }
        }
      }
    },
    "MackieSevenSegmentDisplayScope": {
      "type": "string",
      "enum": [
        "All",
        "Assignment",
        "Tc",
        "TcHoursBars",
        "TcMinutesBeats",
        "TcSecondsSub",
        "TcFramesTicks"
      ]
    },
    "Mapping": {
      "type": "object",
      "properties": {
        "activation_condition": {
          "$ref": "#/definitions/ActivationCondition"
        },
        "control_enabled": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "feedback_enabled": {
          "type": "boolean"
        },
        "glue": {
          "$ref": "#/definitions/Glue"
        },
        "group": {
          "type": "string"
        },
        "id": {
          "description": "An optional ID that you can assign to this mapping in order to refer to it from somewhere else.\n\nThis ID should be unique within all mappings in the compartment.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "on_activate": {
          "$ref": "#/definitions/LifecycleHook"
        },
        "on_deactivate": {
          "$ref": "#/definitions/LifecycleHook"
        },
        "source": {
          "$ref": "#/definitions/Source"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "target": {
          "$ref": "#/definitions/Target"
        },
        "unprocessed": {
          "type": "object",
          "additionalProperties": true
        },
        "visible_in_projection": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "MappingExclusivity": {
      "type": "string",
      "enum": [
        "Exclusive",
        "ExclusiveOnOnly"
      ]
    },
    "Matrix": {
      "type": "object",
      "required": [
        "clip_play_settings",
        "clip_record_settings",
        "common_tempo_range"
      ],
      "properties": {
        "clip_play_settings": {
          "$ref": "#/definitions/MatrixClipPlaySettings"
        },
        "clip_record_settings": {
          "$ref": "#/definitions/MatrixClipRecordSettings"
        },
        "columns": {
          "description": "All columns from left to right.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Column"
          }
        },
        "common_tempo_range": {
          "$ref": "#/definitions/TempoRange"
        },
        "rows": {
          "description": "All rows from top to bottom.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Row"
          }
        }
      },
      "additionalProperties": false
    },
    "MatrixClipPlayAudioSettings": {
      "type": "object",
      "required": [
        "cache_behavior",
        "resample_mode",
        "time_stretch_mode"
      ],
      "properties": {
        "cache_behavior": {
          "$ref": "#/definitions/AudioCacheBehavior"
        },
        "resample_mode": {
          "$ref": "#/definitions/VirtualResampleMode"
        },
        "time_stretch_mode": {
          "$ref": "#/definitions/AudioTimeStretchMode"
        }
      },
      "additionalProperties": false
    },
    "MatrixClipPlaySettings": {
      "description": "Matrix-global settings related to playing clips.",
      "type": "object",
      "required": [
        "audio_settings",
        "start_timing",
        "stop_timing"
      ],
      "properties": {
        "audio_settings": {
          "$ref": "#/definitions/MatrixClipPlayAudioSettings"
        },
        "start_timing": {
          "$ref": "#/definitions/ClipPlayStartTiming"
        },
        "stop_timing": {
          "$ref": "#/definitions/ClipPlayStopTiming"
        }
      },
      "additionalProperties": false
    },
    "MatrixClipRecordAudioSettings": {
      "type": "object",
      "required": [
        "detect_downbeat",
        "detect_input"
      ],
      "properties": {
        "detect_downbeat": {
          "description": "If `true`, attempts to detect the actual start of the recorded audio material and derives the downbeat position from that.",
          "type": "boolean"
        },
        "detect_input": {
          "description": "Makes the global record button work for audio by allowing global input detection.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "MatrixClipRecordMidiSettings": {
      "type": "object",
      "required": [
        "auto_quantize",
        "detect_downbeat",
        "detect_input",
        "record_mode"
      ],
      "properties": {
        "auto_quantize": {
          "description": "Applies quantization while recording using the current quantization settings.",
          "type": "boolean"
        },
        "clip_settings": {
          "description": "These are the MIDI settings each recorded clip will get.",
          "default": {
            "interaction_reset_settings": {
              "left": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              },
              "right": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              }
            },
            "loop_reset_settings": {
              "left": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              },
              "right": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              }
            },
            "section_reset_settings": {
              "left": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              },
              "right": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              }
            },
            "source_reset_settings": {
              "left": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              },
              "right": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              }
            }
          },
          "allOf": [
            {
              "$ref": "#/definitions/ClipMidiSettings"
            }
          ]
        },
        "detect_downbeat": {
          "description": "If `true`, attempts to detect the actual start of the recorded MIDI material and derives the downbeat position from that.",
          "type": "boolean"
        },
        "detect_input": {
          "description": "Makes the global record button work for MIDI by allowing global input detection.",
          "type": "boolean"
        },
        "record_mode": {
          "$ref": "#/definitions/MidiClipRecordMode"
        }
      },
      "additionalProperties": false
    },
    "MatrixClipRecordSettings": {
      "description": "Matrix-global settings related to recording clips.",
      "type": "object",
      "required": [
        "audio_settings",
        "duration",
        "lead_tempo",
        "looped",
        "midi_settings",
        "play_start_timing",
        "play_stop_timing",
        "start_timing",
        "stop_timing",
        "time_base"
      ],
      "properties": {
        "audio_settings": {
          "$ref": "#/definitions/MatrixClipRecordAudioSettings"
        },
        "duration": {
          "$ref": "#/definitions/RecordLength"
        },
        "lead_tempo": {
          "description": "If `true`, sets the global tempo to the tempo of this clip right after recording.",
          "type": "boolean"
        },
        "looped": {
          "description": "If `true`, starts playing the clip right after recording.",
          "type": "boolean"
        },
        "midi_settings": {
          "$ref": "#/definitions/MatrixClipRecordMidiSettings"
        },
        "play_start_timing": {
          "$ref": "#/definitions/ClipSettingOverrideAfterRecording_for_ClipPlayStartTiming"
        },
        "play_stop_timing": {
          "$ref": "#/definitions/ClipSettingOverrideAfterRecording_for_ClipPlayStopTiming"
        },
        "start_timing": {
          "$ref": "#/definitions/ClipRecordStartTiming"
        },
        "stop_timing": {
          "$ref": "#/definitions/ClipRecordStopTiming"
        },
        "time_base": {
          "$ref": "#/definitions/ClipRecordTimeBase"
        }
      },
      "additionalProperties": false
    },
    "MidiClipRecordMode": {
      "oneOf": [
        {
          "description": "Creates an empty clip and records MIDI material in it.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Normal"
              ]
            }
          }
        },
        {
          "description": "Records more material onto an existing clip, leaving existing material in place.\n\nFalls back to Normal when used on an empty slot.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Overdub"
              ]
            }
          }
        },
        {
          "description": "Records more material onto an existing clip, overwriting existing material.\n\nFalls back to Normal when used on an empty slot.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Replace"
              ]
            }
          }
        }
      ]
    },
    "MidiClockTransportMessage": {
      "type": "string",
      "enum": [
        "Start",
        "Continue",
        "Stop"
      ]
    },
    "MidiDestination": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "FxOutput"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "FeedbackOutput"
              ]
            }
          }
        }
      ]
    },
    "MidiResetMessageRange": {
      "type": "object",
      "required": [
        "left",
        "right"
      ],
      "properties": {
        "left": {
          "description": "Which MIDI reset messages to apply at the beginning.",
          "allOf": [
            {
              "$ref": "#/definitions/MidiResetMessages"
            }
          ]
        },
        "right": {
          "description": "Which MIDI reset messages to apply at the end.",
          "allOf": [
            {
              "$ref": "#/definitions/MidiResetMessages"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "MidiResetMessages": {
      "type": "object",
      "required": [
        "all_notes_off",
        "all_sound_off",
        "damper_pedal_off",
        "reset_all_controllers"
      ],
      "properties": {
        "all_notes_off": {
          "type": "boolean"
        },
        "all_sound_off": {
          "type": "boolean"
        },
        "damper_pedal_off": {
          "type": "boolean"
        },
        "on_notes_off": {
          "description": "Only supported at \"right\" position at the moment.",
          "default": false,
          "type": "boolean"
        },
        "reset_all_controllers": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "MidiScriptKind": {
      "description": "Kind of a MIDI script",
      "type": "string",
      "enum": [
        "eel",
        "lua"
      ]
    },
    "ModifierState": {
      "type": "object",
      "required": [
        "on",
        "parameter"
      ],
      "properties": {
        "on": {
          "type": "boolean"
        },
        "parameter": {
          "$ref": "#/definitions/ParamRef"
        }
      },
      "additionalProperties": false
    },
    "MonitoringMode": {
      "type": "string",
      "enum": [
        "Off",
        "Normal",
        "TapeStyle"
      ]
    },
    "OscArgKind": {
      "type": "string",
      "enum": [
        "Float",
        "Double",
        "Bool",
        "Nil",
        "Inf",
        "Int",
        "String",
        "Blob",
        "Time",
        "Long",
        "Char",
        "Color",
        "Midi",
        "Array"
      ]
    },
    "OscArgument": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "kind": {
          "$ref": "#/definitions/OscArgKind"
        },
        "value_range": {
          "$ref": "#/definitions/Interval_for_double"
        }
      },
      "additionalProperties": false
    },
    "OscDestination": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "FeedbackOutput"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "id",
            "kind"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "enum": [
                "Device"
              ]
            }
          }
        }
      ]
    },
    "OutOfRangeBehavior": {
      "type": "string",
      "enum": [
        "MinOrMax",
        "Min",
        "Ignore"
      ]
    },
    "ParamRef": {
      "anyOf": [
        {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        {
          "type": "string"
        }
      ]
    },
    "Parameter": {
      "type": "object",
      "required": [
        "index"
      ],
      "properties": {
        "id": {
          "description": "An optional ID that you can assign to this parameter in order to refer to it from somewhere else.\n\nThis ID should be unique within all parameters in the same compartment.",
          "type": "string"
        },
        "index": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "name": {
          "type": "string"
        },
        "value_count": {
          "type": "integer",
          "format": "uint32",
          "minimum": 1.0
        },
        "value_labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "PositiveBeat": {
      "type": "number",
      "format": "double"
    },
    "PositiveSecond": {
      "type": "number",
      "format": "double"
    },
    "PropColor": {
      "type": "object",
      "required": [
        "prop"
      ],
      "properties": {
        "prop": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RawMidiMessage": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      ]
    },
    "ReaperCommand": {
      "anyOf": [
        {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        {
          "type": "string"
        }
      ]
    },
    "RecordLength": {
      "oneOf": [
        {
          "description": "Records open-ended until the user decides to stop.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "OpenEnd"
              ]
            }
          }
        },
        {
          "description": "Records exactly as much material as defined by the given quantization.",
          "type": "object",
          "required": [
            "denominator",
            "kind",
            "numerator"
          ],
          "properties": {
            "denominator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "Quantized"
              ]
            },
            "numerator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      ]
    },
    "RecordOrigin": {
      "oneOf": [
        {
          "description": "Records using the hardware input set for the track (MIDI or stereo).",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "TrackInput"
              ]
            }
          }
        },
        {
          "description": "Captures audio from the output of the track.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "TrackAudioOutput"
              ]
            }
          }
        },
        {
          "description": "Records audio flowing into the FX input.",
          "type": "object",
          "required": [
            "channel_count",
            "first_channel_index",
            "kind"
          ],
          "properties": {
            "channel_count": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "first_channel_index": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "FxAudioInput"
              ]
            }
          }
        }
      ]
    },
    "RelativeMode": {
      "type": "string",
      "enum": [
        "Normal",
        "MakeAbsolute"
      ]
    },
    "RgbColor": {
      "type": "array",
      "items": [
        {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      ],
      "maxItems": 3,
      "minItems": 3
    },
    "RouteDescriptor": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "address",
            "expression"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Dynamic"
              ]
            },
            "expression": {
              "type": "string"
            },
            "kind": {
              "$ref": "#/definitions/TrackRouteKind"
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ById"
              ]
            },
            "id": {
              "type": "string"
            },
            "kind": {
              "$ref": "#/definitions/TrackRouteKind"
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "index"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ByIndex"
              ]
            },
            "index": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "$ref": "#/definitions/TrackRouteKind"
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "name"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ByName"
              ]
            },
            "kind": {
              "$ref": "#/definitions/TrackRouteKind"
            },
            "name": {
              "type": "string"
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            }
          }
        }
      ]
    },
    "Row": {
      "description": "A row represents a complete row in a matrix.\n\nA scene is a very related concept and sometimes used interchangeably with row because there's a one-to-one relationship between a row and a scene.\n\nThe difference between row and scene is of conceptual nature: A scene represents a part of a song that's played exclusively whereas a row is just a row in the clip matrix. This distinction results in some practical differences:\n\n- A column can be configured to not follow scenes. The clips in that column are of course still structured in rows, but they are not part of the scenes anymore. - In practice, this means that whenever you launch the scene, the clips in that independent column are not launched. Or when you clear the scene, the slots in that column are not cleared. - Whenever you read \"Scene\", it will only affect the columns that are configured to follow scenes. Whenever you read \"Row\", it will affect the complete matrix row, no matter the column type.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tempo": {
          "description": "An optional tempo associated with this row.",
          "allOf": [
            {
              "$ref": "#/definitions/Bpm"
            }
          ]
        },
        "time_signature": {
          "description": "An optional time signature associated with this row.",
          "allOf": [
            {
              "$ref": "#/definitions/TimeSignature"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Section": {
      "type": "object",
      "required": [
        "start_pos"
      ],
      "properties": {
        "length": {
          "description": "Length of the material to be played, starting from `start_pos`.\n\n- `None` means until original source end. - May exceed the end of the source. - If this makes the section end be located before the original source end, a fade-out will be used to avoid clicks.",
          "allOf": [
            {
              "$ref": "#/definitions/PositiveSecond"
            }
          ]
        },
        "start_pos": {
          "description": "Position in the source from which to start.\n\nIf this is greater than zero, a fade-in will be used to avoid clicks.",
          "allOf": [
            {
              "$ref": "#/definitions/PositiveSecond"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "SendMidiFeedbackAction": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "kind",
            "message"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Raw"
              ]
            },
            "message": {
              "$ref": "#/definitions/RawMidiMessage"
            }
          }
        }
      ]
    },
    "Session": {
      "type": "object",
      "properties": {
        "clip_matrix": {
          "$ref": "#/definitions/Matrix"
        },
        "main_compartment": {
          "$ref": "#/definitions/Compartment"
        }
      },
      "additionalProperties": false
    },
    "Slot": {
      "type": "object",
      "required": [
        "row"
      ],
      "properties": {
        "clip": {
          "description": "Clip which currently lives in this slot.",
          "allOf": [
            {
              "$ref": "#/definitions/Clip"
            }
          ]
        },
        "row": {
          "description": "Slot index within the column (= row), starting at zero.",
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "SoloBehavior": {
      "type": "string",
      "enum": [
        "InPlace",
        "IgnoreRouting",
        "ReaperPreference"
      ]
    },
    "Source": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "None"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "MidiDeviceChanges"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "RealearnInstanceStart"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "duration",
            "kind"
          ],
          "properties": {
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "Timer"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "channel": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "feedback_behavior": {
              "$ref": "#/definitions/FeedbackBehavior"
            },
            "key_number": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "MidiNoteVelocity"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "channel": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "feedback_behavior": {
              "$ref": "#/definitions/FeedbackBehavior"
            },
            "kind": {
              "type": "string",
              "enum": [
                "MidiNoteKeyNumber"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "channel": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "feedback_behavior": {
              "$ref": "#/definitions/FeedbackBehavior"
            },
            "key_number": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "MidiPolyphonicKeyPressureAmount"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "channel": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "character": {
              "$ref": "#/definitions/SourceCharacter"
            },
            "controller_number": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "feedback_behavior": {
              "$ref": "#/definitions/FeedbackBehavior"
            },
            "fourteen_bit": {
              "type": "boolean"
            },
            "kind": {
              "type": "string",
              "enum": [
                "MidiControlChangeValue"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "channel": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "feedback_behavior": {
              "$ref": "#/definitions/FeedbackBehavior"
            },
            "kind": {
              "type": "string",
              "enum": [
                "MidiProgramChangeNumber"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "channel": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "feedback_behavior": {
              "$ref": "#/definitions/FeedbackBehavior"
            },
            "kind": {
              "type": "string",
              "enum": [
                "MidiChannelPressureAmount"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "channel": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "feedback_behavior": {
              "$ref": "#/definitions/FeedbackBehavior"
            },
            "kind": {
              "type": "string",
              "enum": [
                "MidiPitchBendChangeValue"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "channel": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "character": {
              "$ref": "#/definitions/SourceCharacter"
            },
            "feedback_behavior": {
              "$ref": "#/definitions/FeedbackBehavior"
            },
            "fourteen_bit": {
              "type": "boolean"
            },
            "kind": {
              "type": "string",
              "enum": [
                "MidiParameterNumberValue"
              ]
            },
            "number": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "registered": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "MidiClockTempo"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "MidiClockTransport"
              ]
            },
            "message": {
              "$ref": "#/definitions/MidiClockTransportMessage"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "character": {
              "$ref": "#/definitions/SourceCharacter"
            },
            "feedback_behavior": {
              "$ref": "#/definitions/FeedbackBehavior"
            },
            "kind": {
              "type": "string",
              "enum": [
                "MidiRaw"
              ]
            },
            "pattern": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "$ref": "#/definitions/MidiScriptKind"
            },
            "script": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "channel": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "MackieLcd"
              ]
            },
            "line": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "MackieSevenSegmentDisplay"
              ]
            },
            "scope": {
              "$ref": "#/definitions/MackieSevenSegmentDisplayScope"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "cell_index": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "item_index": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "SiniConE24Display"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "LaunchpadProScrollingTextDisplay"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "argument": {
              "$ref": "#/definitions/OscArgument"
            },
            "feedback_arguments": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "feedback_behavior": {
              "$ref": "#/definitions/FeedbackBehavior"
            },
            "kind": {
              "type": "string",
              "enum": [
                "Osc"
              ]
            },
            "relative": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "keystroke": {
              "$ref": "#/definitions/Keystroke"
            },
            "kind": {
              "type": "string",
              "enum": [
                "Key"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "id",
            "kind"
          ],
          "properties": {
            "character": {
              "$ref": "#/definitions/VirtualControlElementCharacter"
            },
            "id": {
              "$ref": "#/definitions/VirtualControlElementId"
            },
            "kind": {
              "type": "string",
              "enum": [
                "Virtual"
              ]
            }
          }
        }
      ]
    },
    "SourceCharacter": {
      "type": "string",
      "enum": [
        "Range",
        "Button",
        "Relative1",
        "Relative2",
        "Relative3",
        "StatefulButton"
      ]
    },
    "SourceOrigin": {
      "type": "string",
      "enum": [
        "Normal",
        "Frozen"
      ]
    },
    "TakeoverMode": {
      "type": "string",
      "enum": [
        "PickUp",
        "LongTimeNoSee",
        "Parallel",
        "CatchUp"
      ]
    },
    "Target": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "LastTouched"
              ]
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "AutomationModeOverride"
              ]
            },
            "override": {
              "$ref": "#/definitions/AutomationModeOverride"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "command": {
              "$ref": "#/definitions/ReaperCommand"
            },
            "invocation": {
              "$ref": "#/definitions/ActionInvocationKind"
            },
            "kind": {
              "type": "string",
              "enum": [
                "ReaperAction"
              ]
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "action",
            "kind"
          ],
          "properties": {
            "action": {
              "$ref": "#/definitions/TransportAction"
            },
            "kind": {
              "type": "string",
              "enum": [
                "TransportAction"
              ]
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "parameter"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "AnyOn"
              ]
            },
            "parameter": {
              "$ref": "#/definitions/AnyOnParameter"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "CycleThroughTracks"
              ]
            },
            "scroll_arrange_view": {
              "type": "boolean"
            },
            "scroll_mixer": {
              "type": "boolean"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "feedback_resolution": {
              "$ref": "#/definitions/FeedbackResolution"
            },
            "kind": {
              "type": "string",
              "enum": [
                "Seek"
              ]
            },
            "move_view": {
              "type": "boolean"
            },
            "seek_play": {
              "type": "boolean"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            },
            "use_loop_points": {
              "type": "boolean"
            },
            "use_project": {
              "type": "boolean"
            },
            "use_regions": {
              "type": "boolean"
            },
            "use_time_selection": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "PlayRate"
              ]
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Tempo"
              ]
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "bookmark",
            "kind"
          ],
          "properties": {
            "bookmark": {
              "$ref": "#/definitions/BookmarkDescriptor"
            },
            "kind": {
              "type": "string",
              "enum": [
                "GoToBookmark"
              ]
            },
            "set_loop_points": {
              "type": "boolean"
            },
            "set_time_selection": {
              "type": "boolean"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "exclusivity": {
              "$ref": "#/definitions/TrackExclusivity"
            },
            "kind": {
              "type": "string",
              "enum": [
                "TrackArmState"
              ]
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "exclusivity": {
              "$ref": "#/definitions/TrackExclusivity"
            },
            "kind": {
              "type": "string",
              "enum": [
                "AllTrackFxOnOffState"
              ]
            },
            "poll_for_feedback": {
              "type": "boolean"
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "exclusivity": {
              "$ref": "#/definitions/TrackExclusivity"
            },
            "kind": {
              "type": "string",
              "enum": [
                "TrackMuteState"
              ]
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "TrackPeak"
              ]
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "exclusivity": {
              "$ref": "#/definitions/TrackExclusivity"
            },
            "kind": {
              "type": "string",
              "enum": [
                "TrackPhase"
              ]
            },
            "poll_for_feedback": {
              "type": "boolean"
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "exclusivity": {
              "$ref": "#/definitions/TrackExclusivity"
            },
            "kind": {
              "type": "string",
              "enum": [
                "TrackSelectionState"
              ]
            },
            "scroll_arrange_view": {
              "type": "boolean"
            },
            "scroll_mixer": {
              "type": "boolean"
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "mode"
          ],
          "properties": {
            "exclusivity": {
              "$ref": "#/definitions/TrackExclusivity"
            },
            "kind": {
              "type": "string",
              "enum": [
                "TrackAutomationMode"
              ]
            },
            "mode": {
              "$ref": "#/definitions/AutomationMode"
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "mode"
          ],
          "properties": {
            "exclusivity": {
              "$ref": "#/definitions/TrackExclusivity"
            },
            "kind": {
              "type": "string",
              "enum": [
                "TrackMonitoringMode"
              ]
            },
            "mode": {
              "$ref": "#/definitions/MonitoringMode"
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "touched_parameter"
          ],
          "properties": {
            "exclusivity": {
              "$ref": "#/definitions/TrackExclusivity"
            },
            "kind": {
              "type": "string",
              "enum": [
                "TrackAutomationTouchState"
              ]
            },
            "touched_parameter": {
              "$ref": "#/definitions/TouchedTrackParameter"
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "TrackPan"
              ]
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "TrackWidth"
              ]
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "TrackVolume"
              ]
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Track"
              ]
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "area",
            "kind"
          ],
          "properties": {
            "area": {
              "$ref": "#/definitions/TrackArea"
            },
            "exclusivity": {
              "$ref": "#/definitions/TrackExclusivity"
            },
            "kind": {
              "type": "string",
              "enum": [
                "TrackVisibility"
              ]
            },
            "poll_for_feedback": {
              "type": "boolean"
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "behavior": {
              "$ref": "#/definitions/SoloBehavior"
            },
            "exclusivity": {
              "$ref": "#/definitions/TrackExclusivity"
            },
            "kind": {
              "type": "string",
              "enum": [
                "TrackSoloState"
              ]
            },
            "track": {
              "$ref": "#/definitions/TrackDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "chain",
            "kind"
          ],
          "properties": {
            "chain": {
              "$ref": "#/definitions/FxChainDescriptor"
            },
            "display_kind": {
              "$ref": "#/definitions/FxDisplayKind"
            },
            "kind": {
              "type": "string",
              "enum": [
                "CycleThroughFx"
              ]
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "fx": {
              "$ref": "#/definitions/FxDescriptor"
            },
            "kind": {
              "type": "string",
              "enum": [
                "FxOnOffState"
              ]
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "fx": {
              "$ref": "#/definitions/FxDescriptor"
            },
            "kind": {
              "type": "string",
              "enum": [
                "FxOnlineOfflineState"
              ]
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "fx": {
              "$ref": "#/definitions/FxDescriptor"
            },
            "kind": {
              "type": "string",
              "enum": [
                "LoadFxSnapshot"
              ]
            },
            "snapshot": {
              "$ref": "#/definitions/FxSnapshot"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "fx": {
              "$ref": "#/definitions/FxDescriptor"
            },
            "kind": {
              "type": "string",
              "enum": [
                "CycleThroughFxPresets"
              ]
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "display_kind": {
              "$ref": "#/definitions/FxDisplayKind"
            },
            "fx": {
              "$ref": "#/definitions/FxDescriptor"
            },
            "kind": {
              "type": "string",
              "enum": [
                "FxVisibility"
              ]
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "parameter"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "FxParameterValue"
              ]
            },
            "parameter": {
              "$ref": "#/definitions/FxParameterDescriptor"
            },
            "poll_for_feedback": {
              "type": "boolean"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "parameter"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "FxParameterAutomationTouchState"
              ]
            },
            "parameter": {
              "$ref": "#/definitions/FxParameterDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "mode",
            "route"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "RouteAutomationMode"
              ]
            },
            "mode": {
              "$ref": "#/definitions/AutomationMode"
            },
            "poll_for_feedback": {
              "type": "boolean"
            },
            "route": {
              "$ref": "#/definitions/RouteDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "route"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "RouteMonoState"
              ]
            },
            "poll_for_feedback": {
              "type": "boolean"
            },
            "route": {
              "$ref": "#/definitions/RouteDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "route"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "RouteMuteState"
              ]
            },
            "poll_for_feedback": {
              "type": "boolean"
            },
            "route": {
              "$ref": "#/definitions/RouteDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "route"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "RoutePhase"
              ]
            },
            "poll_for_feedback": {
              "type": "boolean"
            },
            "route": {
              "$ref": "#/definitions/RouteDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "route"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "RoutePan"
              ]
            },
            "route": {
              "$ref": "#/definitions/RouteDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "route"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "RouteVolume"
              ]
            },
            "route": {
              "$ref": "#/definitions/RouteDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "route",
            "touched_parameter"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "RouteTouchState"
              ]
            },
            "route": {
              "$ref": "#/definitions/RouteDescriptor"
            },
            "touched_parameter": {
              "$ref": "#/definitions/TouchedRouteParameter"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "action",
            "kind",
            "slot"
          ],
          "properties": {
            "action": {
              "$ref": "#/definitions/ClipTransportAction"
            },
            "kind": {
              "type": "string",
              "enum": [
                "ClipTransportAction"
              ]
            },
            "play_start_timing": {
              "$ref": "#/definitions/ClipPlayStartTiming"
            },
            "play_stop_timing": {
              "$ref": "#/definitions/ClipPlayStopTiming"
            },
            "record_only_if_track_armed": {
              "type": "boolean"
            },
            "slot": {
              "$ref": "#/definitions/ClipSlotDescriptor"
            },
            "stop_column_if_slot_empty": {
              "type": "boolean"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "action",
            "column",
            "kind"
          ],
          "properties": {
            "action": {
              "$ref": "#/definitions/ClipColumnAction"
            },
            "column": {
              "$ref": "#/definitions/ClipColumnDescriptor"
            },
            "kind": {
              "type": "string",
              "enum": [
                "ClipColumnAction"
              ]
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "action",
            "kind",
            "row"
          ],
          "properties": {
            "action": {
              "$ref": "#/definitions/ClipRowAction"
            },
            "kind": {
              "type": "string",
              "enum": [
                "ClipRowAction"
              ]
            },
            "row": {
              "$ref": "#/definitions/ClipRowDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "action",
            "kind"
          ],
          "properties": {
            "action": {
              "$ref": "#/definitions/ClipMatrixAction"
            },
            "kind": {
              "type": "string",
              "enum": [
                "ClipMatrixAction"
              ]
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "slot"
          ],
          "properties": {
            "feedback_resolution": {
              "$ref": "#/definitions/FeedbackResolution"
            },
            "kind": {
              "type": "string",
              "enum": [
                "ClipSeek"
              ]
            },
            "slot": {
              "$ref": "#/definitions/ClipSlotDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "slot"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ClipVolume"
              ]
            },
            "slot": {
              "$ref": "#/definitions/ClipSlotDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "action",
            "kind",
            "slot"
          ],
          "properties": {
            "action": {
              "$ref": "#/definitions/ClipManagementAction"
            },
            "kind": {
              "type": "string",
              "enum": [
                "ClipManagement"
              ]
            },
            "slot": {
              "$ref": "#/definitions/ClipSlotDescriptor"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "destination": {
              "$ref": "#/definitions/MidiDestination"
            },
            "kind": {
              "type": "string",
              "enum": [
                "SendMidi"
              ]
            },
            "message": {
              "type": "string"
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "argument": {
              "$ref": "#/definitions/OscArgument"
            },
            "destination": {
              "$ref": "#/definitions/OscDestination"
            },
            "kind": {
              "type": "string",
              "enum": [
                "SendOsc"
              ]
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "exclusivity": {
              "$ref": "#/definitions/InstanceExclusivity"
            },
            "kind": {
              "type": "string",
              "enum": [
                "EnableInstances"
              ]
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "exclusivity": {
              "$ref": "#/definitions/MappingExclusivity"
            },
            "kind": {
              "type": "string",
              "enum": [
                "EnableMappings"
              ]
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "active_mappings_only": {
              "type": "boolean"
            },
            "kind": {
              "type": "string",
              "enum": [
                "LoadMappingSnapshots"
              ]
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "exclusivity": {
              "$ref": "#/definitions/GroupMappingExclusivity"
            },
            "group": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "enum": [
                "CycleThroughGroupMappings"
              ]
            },
            "unit": {
              "$ref": "#/definitions/TargetUnit"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "id",
            "kind"
          ],
          "properties": {
            "character": {
              "$ref": "#/definitions/VirtualControlElementCharacter"
            },
            "id": {
              "$ref": "#/definitions/VirtualControlElementId"
            },
            "kind": {
              "type": "string",
              "enum": [
                "Virtual"
              ]
            }
          }
        }
      ]
    },
    "TargetUnit": {
      "type": "string",
      "enum": [
        "Native",
        "Percent"
      ]
    },
    "TempoRange": {
      "type": "object",
      "required": [
        "max",
        "min"
      ],
      "properties": {
        "max": {
          "$ref": "#/definitions/Bpm"
        },
        "min": {
          "$ref": "#/definitions/Bpm"
        }
      },
      "additionalProperties": false
    },
    "TimeSignature": {
      "type": "object",
      "required": [
        "denominator",
        "numerator"
      ],
      "properties": {
        "denominator": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "numerator": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "TouchedRouteParameter": {
      "type": "string",
      "enum": [
        "Volume",
        "Pan"
      ]
    },
    "TouchedTrackParameter": {
      "type": "string",
      "enum": [
        "Volume",
        "Pan",
        "Width"
      ]
    },
    "TrackArea": {
      "type": "string",
      "enum": [
        "Tcp",
        "Mcp"
      ]
    },
    "TrackDescriptor": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "This"
              ]
            },
            "track_must_be_selected": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Master"
              ]
            },
            "track_must_be_selected": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Selected"
              ]
            },
            "allow_multiple": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "expression"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "Dynamic"
              ]
            },
            "expression": {
              "type": "string"
            },
            "track_must_be_selected": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ById"
              ]
            },
            "id": {
              "type": "string"
            },
            "track_must_be_selected": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "index"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ByIndex"
              ]
            },
            "index": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "track_must_be_selected": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "name"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "ByName"
              ]
            },
            "allow_multiple": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "track_must_be_selected": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "address",
            "column",
            "context"
          ],
          "properties": {
            "address": {
              "type": "string",
              "enum": [
                "FromClipColumn"
              ]
            },
            "column": {
              "$ref": "#/definitions/ClipColumnDescriptor"
            },
            "context": {
              "$ref": "#/definitions/ClipColumnTrackContext"
            },
            "track_must_be_selected": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "TrackExclusivity": {
      "type": "string",
      "enum": [
        "WithinProject",
        "WithinFolder",
        "WithinProjectOnOnly",
        "WithinFolderOnOnly"
      ]
    },
    "TrackFxChain": {
      "type": "string",
      "enum": [
        "Normal",
        "Input"
      ]
    },
    "TrackId": {
      "type": "string"
    },
    "TrackRouteKind": {
      "type": "string",
      "enum": [
        "Send",
        "Receive",
        "HardwareOutput"
      ]
    },
    "TransportAction": {
      "type": "string",
      "enum": [
        "PlayStop",
        "PlayPause",
        "Stop",
        "Pause",
        "Record",
        "Repeat"
      ]
    },
    "VirtualColor": {
      "anyOf": [
        {
          "$ref": "#/definitions/RgbColor"
        },
        {
          "$ref": "#/definitions/PropColor"
        }
      ]
    },
    "VirtualControlElementCharacter": {
      "type": "string",
      "enum": [
        "Multi",
        "Button"
      ]
    },
    "VirtualControlElementId": {
      "anyOf": [
        {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        {
          "type": "string"
        }
      ]
    },
    "VirtualResampleMode": {
      "oneOf": [
        {
          "description": "Uses the resample mode set as default for this REAPER project.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ProjectDefault"
              ]
            }
          }
        },
        {
          "description": "Uses a specific resample mode.",
          "type": "object",
          "required": [
            "kind",
            "mode"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ReaperMode"
              ]
            },
            "mode": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      ]
    },
    "VirtualTimeStretchMode": {
      "oneOf": [
        {
          "description": "Uses the pitch shift mode set as default for this REAPER project.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ProjectDefault"
              ]
            }
          }
        },
        {
          "description": "Uses a specific REAPER pitch shift mode.",
          "type": "object",
          "required": [
            "kind",
            "mode",
            "sub_mode"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ReaperMode"
              ]
            },
            "mode": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "sub_mode": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      ]
    }
  }
}