{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Matrix",
  "type": "object",
  "required": [
    "clip_play_settings",
    "clip_record_settings",
    "common_tempo_range"
  ],
  "properties": {
    "clip_play_settings": {
      "$ref": "#/definitions/MatrixClipPlaySettings"
    },
    "clip_record_settings": {
      "$ref": "#/definitions/MatrixClipRecordSettings"
    },
    "columns": {
      "description": "All columns from left to right.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Column"
      }
    },
    "common_tempo_range": {
      "$ref": "#/definitions/TempoRange"
    },
    "rows": {
      "description": "All rows from top to bottom.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Row"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AudioCacheBehavior": {
      "oneOf": [
        {
          "description": "Loads directly from the disk.\n\nMight still pre-buffer some blocks but definitely won't put the complete audio data into memory.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "DirectFromDisk"
              ]
            }
          }
        },
        {
          "description": "Loads the complete audio data into memory.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "CacheInMemory"
              ]
            }
          }
        }
      ]
    },
    "AudioTimeStretchMode": {
      "oneOf": [
        {
          "description": "Doesn't just stretch/squeeze the material but also changes the pitch.\n\nComparatively fast.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "VariSpeed"
              ]
            }
          }
        },
        {
          "description": "Applies a real time-stretch algorithm to the material which keeps the pitch.\n\nComparatively slow.",
          "type": "object",
          "required": [
            "kind",
            "mode"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "KeepingPitch"
              ]
            },
            "mode": {
              "$ref": "#/definitions/VirtualTimeStretchMode"
            }
          }
        }
      ]
    },
    "Bpm": {
      "type": "number",
      "format": "double"
    },
    "Clip": {
      "type": "object",
      "required": [
        "audio_settings",
        "color",
        "looped",
        "midi_settings",
        "section",
        "source",
        "time_base",
        "volume"
      ],
      "properties": {
        "active_source": {
          "description": "Which of the sources is the active one.",
          "default": "Normal",
          "allOf": [
            {
              "$ref": "#/definitions/SourceOrigin"
            }
          ]
        },
        "audio_settings": {
          "$ref": "#/definitions/ClipAudioSettings"
        },
        "color": {
          "description": "Color of the clip.",
          "allOf": [
            {
              "$ref": "#/definitions/ClipColor"
            }
          ]
        },
        "frozen_source": {
          "description": "Source with effects \"rendered in\", usually audio.",
          "allOf": [
            {
              "$ref": "#/definitions/Source"
            }
          ]
        },
        "looped": {
          "description": "Whether the clip should be played repeatedly or as a single shot.",
          "type": "boolean"
        },
        "midi_settings": {
          "$ref": "#/definitions/ClipMidiSettings"
        },
        "name": {
          "type": "string"
        },
        "section": {
          "description": "Defines which portion of the original source should be played.",
          "allOf": [
            {
              "$ref": "#/definitions/Section"
            }
          ]
        },
        "source": {
          "description": "Source of the audio/MIDI material of this clip.",
          "allOf": [
            {
              "$ref": "#/definitions/Source"
            }
          ]
        },
        "start_timing": {
          "description": "Start timing override.\n\n`None` means it uses the column start timing.",
          "allOf": [
            {
              "$ref": "#/definitions/ClipPlayStartTiming"
            }
          ]
        },
        "stop_timing": {
          "description": "Stop timing override.\n\n`None` means it uses the column stop timing.",
          "allOf": [
            {
              "$ref": "#/definitions/ClipPlayStopTiming"
            }
          ]
        },
        "time_base": {
          "description": "Time base of the material provided by that source.",
          "allOf": [
            {
              "$ref": "#/definitions/ClipTimeBase"
            }
          ]
        },
        "volume": {
          "description": "Relative volume adjustment of clip.",
          "allOf": [
            {
              "$ref": "#/definitions/Db"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ClipAudioSettings": {
      "type": "object",
      "required": [
        "apply_source_fades"
      ],
      "properties": {
        "apply_source_fades": {
          "description": "Defines whether to apply automatic fades in order to fix potentially non-optimized source material.\n\n## `false`\n\nDoesn't apply automatic fades for fixing non-optimized source material.\n\nThis only prevents source-fix fades. Fades that are not about fixing the source will still be applied if necessary in order to ensure a smooth playback, such as:\n\n- Section fades (start fade-in, end fade-out) - Interaction fades (resume-after-pause fade-in, immediate stop fade-out)\n\nFades don't overlap. Here's the order of priority (for fade-in and fade-out separately):\n\n- Interaction fades - Section fades - Source-fix fades\n\n## `true`\n\nApplies automatic fades to fix non-optimized source material, if necessary.",
          "type": "boolean"
        },
        "cache_behavior": {
          "description": "Whether to cache audio in memory.\n\n`None` means it uses the column cache behavior.",
          "allOf": [
            {
              "$ref": "#/definitions/AudioCacheBehavior"
            }
          ]
        },
        "resample_mode": {
          "description": "Overrides the column resample mode for clips in this column.",
          "allOf": [
            {
              "$ref": "#/definitions/VirtualResampleMode"
            }
          ]
        },
        "time_stretch_mode": {
          "description": "Defines how to adjust audio material.\n\nThis is usually used with the beat time base to match the tempo of the clip to the global tempo.\n\n`None` means it uses the column time stretch mode.",
          "allOf": [
            {
              "$ref": "#/definitions/AudioTimeStretchMode"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ClipColor": {
      "oneOf": [
        {
          "description": "Inherits the color of the column's play track.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "PlayTrackColor"
              ]
            }
          }
        },
        {
          "description": "Assigns a very specific custom color.",
          "type": "object",
          "required": [
            "kind",
            "value"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "CustomColor"
              ]
            },
            "value": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        {
          "description": "Uses a certain color from a palette.",
          "type": "object",
          "required": [
            "index",
            "kind"
          ],
          "properties": {
            "index": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "PaletteColor"
              ]
            }
          }
        }
      ]
    },
    "ClipMidiSettings": {
      "type": "object",
      "required": [
        "interaction_reset_settings",
        "loop_reset_settings",
        "section_reset_settings",
        "source_reset_settings"
      ],
      "properties": {
        "interaction_reset_settings": {
          "description": "For fine-tuning instant start/stop of a MIDI clip when in the middle of a source or section.",
          "allOf": [
            {
              "$ref": "#/definitions/MidiResetMessageRange"
            }
          ]
        },
        "loop_reset_settings": {
          "description": "For fine-tuning the complete loop.",
          "allOf": [
            {
              "$ref": "#/definitions/MidiResetMessageRange"
            }
          ]
        },
        "section_reset_settings": {
          "description": "For fine-tuning the section.",
          "allOf": [
            {
              "$ref": "#/definitions/MidiResetMessageRange"
            }
          ]
        },
        "source_reset_settings": {
          "description": "For fixing the source itself.",
          "allOf": [
            {
              "$ref": "#/definitions/MidiResetMessageRange"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ClipPlayStartTiming": {
      "oneOf": [
        {
          "description": "Starts playing immediately.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Immediately"
              ]
            }
          }
        },
        {
          "description": "Starts playing according to the given quantization.",
          "type": "object",
          "required": [
            "denominator",
            "kind",
            "numerator"
          ],
          "properties": {
            "denominator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "Quantized"
              ]
            },
            "numerator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      ]
    },
    "ClipPlayStopTiming": {
      "oneOf": [
        {
          "description": "Uses the play start timing.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "LikeClipStartTiming"
              ]
            }
          }
        },
        {
          "description": "Stops playing immediately.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Immediately"
              ]
            }
          }
        },
        {
          "description": "Stops playing according to the given quantization.",
          "type": "object",
          "required": [
            "denominator",
            "kind",
            "numerator"
          ],
          "properties": {
            "denominator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "Quantized"
              ]
            },
            "numerator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        {
          "description": "Keeps playing until the end of the clip.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "UntilEndOfClip"
              ]
            }
          }
        }
      ]
    },
    "ClipRecordStartTiming": {
      "oneOf": [
        {
          "description": "Uses the inherited clip play start timing (from column or matrix).",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "LikeClipPlayStartTiming"
              ]
            }
          }
        },
        {
          "description": "Starts recording immediately.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Immediately"
              ]
            }
          }
        },
        {
          "description": "Starts recording according to the given quantization.",
          "type": "object",
          "required": [
            "denominator",
            "kind",
            "numerator"
          ],
          "properties": {
            "denominator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "Quantized"
              ]
            },
            "numerator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      ]
    },
    "ClipRecordStopTiming": {
      "oneOf": [
        {
          "description": "Uses the record start timing.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "LikeClipRecordStartTiming"
              ]
            }
          }
        },
        {
          "description": "Stops recording immediately.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Immediately"
              ]
            }
          }
        },
        {
          "description": "Stops recording according to the given quantization.",
          "type": "object",
          "required": [
            "denominator",
            "kind",
            "numerator"
          ],
          "properties": {
            "denominator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "Quantized"
              ]
            },
            "numerator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      ]
    },
    "ClipRecordTimeBase": {
      "oneOf": [
        {
          "description": "Derives the time base of the resulting clip from the clip start timing.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "DeriveFromRecordTiming"
              ]
            }
          }
        },
        {
          "description": "Sets the time base of the recorded clip to [`ClipTimeBase::Time`].",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Time"
              ]
            }
          }
        },
        {
          "description": "Sets the time base of the recorded clip to [`ClipTimeBase::Beat`].",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Beat"
              ]
            }
          }
        }
      ]
    },
    "ClipSettingOverrideAfterRecording_for_ClipPlayStartTiming": {
      "oneOf": [
        {
          "description": "Doesn't apply any override.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Inherit"
              ]
            }
          }
        },
        {
          "description": "Overrides the setting with the given value.",
          "type": "object",
          "required": [
            "kind",
            "value"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Override"
              ]
            },
            "value": {
              "$ref": "#/definitions/ClipPlayStartTiming"
            }
          }
        },
        {
          "description": "Derives the setting from the record timing.\n\nIf the record timing is set to the global clip timing, that means it will not apply any override. If it's set to something specific, it will apply the appropriate override.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "DeriveFromRecordTiming"
              ]
            }
          }
        }
      ]
    },
    "ClipSettingOverrideAfterRecording_for_ClipPlayStopTiming": {
      "oneOf": [
        {
          "description": "Doesn't apply any override.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Inherit"
              ]
            }
          }
        },
        {
          "description": "Overrides the setting with the given value.",
          "type": "object",
          "required": [
            "kind",
            "value"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Override"
              ]
            },
            "value": {
              "$ref": "#/definitions/ClipPlayStopTiming"
            }
          }
        },
        {
          "description": "Derives the setting from the record timing.\n\nIf the record timing is set to the global clip timing, that means it will not apply any override. If it's set to something specific, it will apply the appropriate override.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "DeriveFromRecordTiming"
              ]
            }
          }
        }
      ]
    },
    "ClipTimeBase": {
      "description": "Decides if the clip will be adjusted to the current tempo.",
      "oneOf": [
        {
          "description": "Material which doesn't need to be adjusted to the current tempo.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Time"
              ]
            }
          }
        },
        {
          "description": "Material which needs to be adjusted to the current tempo.",
          "type": "object",
          "required": [
            "downbeat",
            "kind",
            "time_signature"
          ],
          "properties": {
            "audio_tempo": {
              "description": "The clip's native tempo.\n\nMust be set for audio. Is ignored for MIDI.\n\nThis information is used by the clip engine to determine how much to speed up or slow down the material depending on the current project tempo.",
              "allOf": [
                {
                  "$ref": "#/definitions/Bpm"
                }
              ]
            },
            "downbeat": {
              "description": "Defines which position (in beats) is the downbeat.",
              "allOf": [
                {
                  "$ref": "#/definitions/PositiveBeat"
                }
              ]
            },
            "kind": {
              "type": "string",
              "enum": [
                "Beat"
              ]
            },
            "time_signature": {
              "description": "The time signature of this clip.\n\nIf provided, This information is used for certain aspects of the user interface.",
              "allOf": [
                {
                  "$ref": "#/definitions/TimeSignature"
                }
              ]
            }
          }
        }
      ]
    },
    "Column": {
      "type": "object",
      "required": [
        "clip_play_settings",
        "clip_record_settings"
      ],
      "properties": {
        "clip_play_settings": {
          "$ref": "#/definitions/ColumnClipPlaySettings"
        },
        "clip_record_settings": {
          "$ref": "#/definitions/ColumnClipRecordSettings"
        },
        "slots": {
          "description": "Slots in this column.\n\nOnly filled slots need to be mentioned here.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Slot"
          }
        }
      },
      "additionalProperties": false
    },
    "ColumnClipPlayAudioSettings": {
      "type": "object",
      "properties": {
        "cache_behavior": {
          "description": "Overrides the matrix-global audio cache behavior for clips in this column.",
          "allOf": [
            {
              "$ref": "#/definitions/AudioCacheBehavior"
            }
          ]
        },
        "resample_mode": {
          "description": "Overrides the matrix-global resample mode for clips in this column.",
          "allOf": [
            {
              "$ref": "#/definitions/VirtualResampleMode"
            }
          ]
        },
        "time_stretch_mode": {
          "description": "Overrides the matrix-global audio time stretch mode for clips in this column.",
          "allOf": [
            {
              "$ref": "#/definitions/AudioTimeStretchMode"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ColumnClipPlaySettings": {
      "type": "object",
      "required": [
        "audio_settings"
      ],
      "properties": {
        "audio_settings": {
          "$ref": "#/definitions/ColumnClipPlayAudioSettings"
        },
        "mode": {
          "$ref": "#/definitions/ColumnPlayMode"
        },
        "start_timing": {
          "description": "Start timing override.\n\n`None` means it uses the matrix-global start timing.",
          "allOf": [
            {
              "$ref": "#/definitions/ClipPlayStartTiming"
            }
          ]
        },
        "stop_timing": {
          "description": "Stop timing override.\n\n`None` means it uses the matrix-global stop timing.",
          "allOf": [
            {
              "$ref": "#/definitions/ClipPlayStopTiming"
            }
          ]
        },
        "track": {
          "description": "REAPER track used for playing back clips in this column.\n\nUsually, each column should have a play track. But events might occur that leave a column in a \"track-less\" state, e.g. the deletion of a track. This column will be unusable until the user sets a play track again. We still want to be able to save the matrix in such a state, otherwise it could be really annoying. So we allow `None`.",
          "allOf": [
            {
              "$ref": "#/definitions/TrackId"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ColumnClipRecordSettings": {
      "type": "object",
      "required": [
        "origin"
      ],
      "properties": {
        "origin": {
          "$ref": "#/definitions/RecordOrigin"
        },
        "track": {
          "description": "By default, Playtime records from the play track but this settings allows to override that.",
          "allOf": [
            {
              "$ref": "#/definitions/TrackId"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ColumnPlayMode": {
      "oneOf": [
        {
          "description": "- Only one clip in the column can play at a certain point in time. - Clips are started/stopped if the corresponding scene is started/stopped.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ExclusiveFollowingScene"
              ]
            }
          }
        },
        {
          "description": "- Only one clip in the column can play at a certain point in time. - Clips are not started/stopped if the corresponding scene is started/stopped.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ExclusiveIgnoringScene"
              ]
            }
          }
        },
        {
          "description": "- Multiple clips can play simultaneously. - Clips are started/stopped if the corresponding scene is started/stopped (in an exclusive manner).",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "NonExclusiveFollowingScene"
              ]
            }
          }
        },
        {
          "description": "- Multiple clips can play simultaneously. - Clips are not started/stopped if the corresponding scene is started/stopped.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Free"
              ]
            }
          }
        }
      ]
    },
    "Db": {
      "type": "number",
      "format": "double"
    },
    "MatrixClipPlayAudioSettings": {
      "type": "object",
      "required": [
        "cache_behavior",
        "resample_mode",
        "time_stretch_mode"
      ],
      "properties": {
        "cache_behavior": {
          "$ref": "#/definitions/AudioCacheBehavior"
        },
        "resample_mode": {
          "$ref": "#/definitions/VirtualResampleMode"
        },
        "time_stretch_mode": {
          "$ref": "#/definitions/AudioTimeStretchMode"
        }
      },
      "additionalProperties": false
    },
    "MatrixClipPlaySettings": {
      "description": "Matrix-global settings related to playing clips.",
      "type": "object",
      "required": [
        "audio_settings",
        "start_timing",
        "stop_timing"
      ],
      "properties": {
        "audio_settings": {
          "$ref": "#/definitions/MatrixClipPlayAudioSettings"
        },
        "start_timing": {
          "$ref": "#/definitions/ClipPlayStartTiming"
        },
        "stop_timing": {
          "$ref": "#/definitions/ClipPlayStopTiming"
        }
      },
      "additionalProperties": false
    },
    "MatrixClipRecordAudioSettings": {
      "type": "object",
      "required": [
        "detect_downbeat",
        "detect_input"
      ],
      "properties": {
        "detect_downbeat": {
          "description": "If `true`, attempts to detect the actual start of the recorded audio material and derives the downbeat position from that.",
          "type": "boolean"
        },
        "detect_input": {
          "description": "Makes the global record button work for audio by allowing global input detection.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "MatrixClipRecordMidiSettings": {
      "type": "object",
      "required": [
        "auto_quantize",
        "detect_downbeat",
        "detect_input",
        "record_mode"
      ],
      "properties": {
        "auto_quantize": {
          "description": "Applies quantization while recording using the current quantization settings.",
          "type": "boolean"
        },
        "clip_settings": {
          "description": "These are the MIDI settings each recorded clip will get.",
          "default": {
            "interaction_reset_settings": {
              "left": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              },
              "right": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              }
            },
            "loop_reset_settings": {
              "left": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              },
              "right": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              }
            },
            "section_reset_settings": {
              "left": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              },
              "right": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              }
            },
            "source_reset_settings": {
              "left": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              },
              "right": {
                "all_notes_off": false,
                "all_sound_off": false,
                "damper_pedal_off": false,
                "on_notes_off": false,
                "reset_all_controllers": false
              }
            }
          },
          "allOf": [
            {
              "$ref": "#/definitions/ClipMidiSettings"
            }
          ]
        },
        "detect_downbeat": {
          "description": "If `true`, attempts to detect the actual start of the recorded MIDI material and derives the downbeat position from that.",
          "type": "boolean"
        },
        "detect_input": {
          "description": "Makes the global record button work for MIDI by allowing global input detection.",
          "type": "boolean"
        },
        "record_mode": {
          "$ref": "#/definitions/MidiClipRecordMode"
        }
      },
      "additionalProperties": false
    },
    "MatrixClipRecordSettings": {
      "description": "Matrix-global settings related to recording clips.",
      "type": "object",
      "required": [
        "audio_settings",
        "duration",
        "lead_tempo",
        "looped",
        "midi_settings",
        "play_start_timing",
        "play_stop_timing",
        "start_timing",
        "stop_timing",
        "time_base"
      ],
      "properties": {
        "audio_settings": {
          "$ref": "#/definitions/MatrixClipRecordAudioSettings"
        },
        "duration": {
          "$ref": "#/definitions/RecordLength"
        },
        "lead_tempo": {
          "description": "If `true`, sets the global tempo to the tempo of this clip right after recording.",
          "type": "boolean"
        },
        "looped": {
          "description": "If `true`, starts playing the clip right after recording.",
          "type": "boolean"
        },
        "midi_settings": {
          "$ref": "#/definitions/MatrixClipRecordMidiSettings"
        },
        "play_start_timing": {
          "$ref": "#/definitions/ClipSettingOverrideAfterRecording_for_ClipPlayStartTiming"
        },
        "play_stop_timing": {
          "$ref": "#/definitions/ClipSettingOverrideAfterRecording_for_ClipPlayStopTiming"
        },
        "start_timing": {
          "$ref": "#/definitions/ClipRecordStartTiming"
        },
        "stop_timing": {
          "$ref": "#/definitions/ClipRecordStopTiming"
        },
        "time_base": {
          "$ref": "#/definitions/ClipRecordTimeBase"
        }
      },
      "additionalProperties": false
    },
    "MidiClipRecordMode": {
      "oneOf": [
        {
          "description": "Creates an empty clip and records MIDI material in it.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Normal"
              ]
            }
          }
        },
        {
          "description": "Records more material onto an existing clip, leaving existing material in place.\n\nFalls back to Normal when used on an empty slot.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Overdub"
              ]
            }
          }
        },
        {
          "description": "Records more material onto an existing clip, overwriting existing material.\n\nFalls back to Normal when used on an empty slot.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Replace"
              ]
            }
          }
        }
      ]
    },
    "MidiResetMessageRange": {
      "type": "object",
      "required": [
        "left",
        "right"
      ],
      "properties": {
        "left": {
          "description": "Which MIDI reset messages to apply at the beginning.",
          "allOf": [
            {
              "$ref": "#/definitions/MidiResetMessages"
            }
          ]
        },
        "right": {
          "description": "Which MIDI reset messages to apply at the end.",
          "allOf": [
            {
              "$ref": "#/definitions/MidiResetMessages"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "MidiResetMessages": {
      "type": "object",
      "required": [
        "all_notes_off",
        "all_sound_off",
        "damper_pedal_off",
        "reset_all_controllers"
      ],
      "properties": {
        "all_notes_off": {
          "type": "boolean"
        },
        "all_sound_off": {
          "type": "boolean"
        },
        "damper_pedal_off": {
          "type": "boolean"
        },
        "on_notes_off": {
          "description": "Only supported at \"right\" position at the moment.",
          "default": false,
          "type": "boolean"
        },
        "reset_all_controllers": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "PositiveBeat": {
      "type": "number",
      "format": "double"
    },
    "PositiveSecond": {
      "type": "number",
      "format": "double"
    },
    "RecordLength": {
      "oneOf": [
        {
          "description": "Records open-ended until the user decides to stop.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "OpenEnd"
              ]
            }
          }
        },
        {
          "description": "Records exactly as much material as defined by the given quantization.",
          "type": "object",
          "required": [
            "denominator",
            "kind",
            "numerator"
          ],
          "properties": {
            "denominator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "Quantized"
              ]
            },
            "numerator": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      ]
    },
    "RecordOrigin": {
      "oneOf": [
        {
          "description": "Records using the hardware input set for the track (MIDI or stereo).",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "TrackInput"
              ]
            }
          }
        },
        {
          "description": "Captures audio from the output of the track.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "TrackAudioOutput"
              ]
            }
          }
        },
        {
          "description": "Records audio flowing into the FX input.",
          "type": "object",
          "required": [
            "channel_count",
            "first_channel_index",
            "kind"
          ],
          "properties": {
            "channel_count": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "first_channel_index": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "kind": {
              "type": "string",
              "enum": [
                "FxAudioInput"
              ]
            }
          }
        }
      ]
    },
    "Row": {
      "description": "A row represents a complete row in a matrix.\n\nA scene is a very related concept and sometimes used interchangeably with row because there's a one-to-one relationship between a row and a scene.\n\nThe difference between row and scene is of conceptual nature: A scene represents a part of a song that's played exclusively whereas a row is just a row in the clip matrix. This distinction results in some practical differences:\n\n- A column can be configured to not follow scenes. The clips in that column are of course still structured in rows, but they are not part of the scenes anymore. - In practice, this means that whenever you launch the scene, the clips in that independent column are not launched. Or when you clear the scene, the slots in that column are not cleared. - Whenever you read \"Scene\", it will only affect the columns that are configured to follow scenes. Whenever you read \"Row\", it will affect the complete matrix row, no matter the column type.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tempo": {
          "description": "An optional tempo associated with this row.",
          "allOf": [
            {
              "$ref": "#/definitions/Bpm"
            }
          ]
        },
        "time_signature": {
          "description": "An optional time signature associated with this row.",
          "allOf": [
            {
              "$ref": "#/definitions/TimeSignature"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Section": {
      "type": "object",
      "required": [
        "start_pos"
      ],
      "properties": {
        "length": {
          "description": "Length of the material to be played, starting from `start_pos`.\n\n- `None` means until original source end. - May exceed the end of the source. - If this makes the section end be located before the original source end, a fade-out will be used to avoid clicks.",
          "allOf": [
            {
              "$ref": "#/definitions/PositiveSecond"
            }
          ]
        },
        "start_pos": {
          "description": "Position in the source from which to start.\n\nIf this is greater than zero, a fade-in will be used to avoid clicks.",
          "allOf": [
            {
              "$ref": "#/definitions/PositiveSecond"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Slot": {
      "type": "object",
      "required": [
        "row"
      ],
      "properties": {
        "clip": {
          "description": "Clip which currently lives in this slot.",
          "allOf": [
            {
              "$ref": "#/definitions/Clip"
            }
          ]
        },
        "row": {
          "description": "Slot index within the column (= row), starting at zero.",
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Source": {
      "oneOf": [
        {
          "description": "Takes content from a media file on the file system (audio or MIDI).",
          "type": "object",
          "required": [
            "kind",
            "path"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "File"
              ]
            },
            "path": {
              "description": "Path to the media file.\n\nIf it's a relative path, it will be interpreted as relative to the REAPER project directory.",
              "type": "string"
            }
          }
        },
        {
          "description": "Embedded MIDI data.",
          "type": "object",
          "required": [
            "chunk",
            "kind"
          ],
          "properties": {
            "chunk": {
              "description": "MIDI data in the same format that REAPER uses for in-project MIDI.",
              "type": "string"
            },
            "kind": {
              "type": "string",
              "enum": [
                "MidiChunk"
              ]
            }
          }
        }
      ]
    },
    "SourceOrigin": {
      "type": "string",
      "enum": [
        "Normal",
        "Frozen"
      ]
    },
    "TempoRange": {
      "type": "object",
      "required": [
        "max",
        "min"
      ],
      "properties": {
        "max": {
          "$ref": "#/definitions/Bpm"
        },
        "min": {
          "$ref": "#/definitions/Bpm"
        }
      },
      "additionalProperties": false
    },
    "TimeSignature": {
      "type": "object",
      "required": [
        "denominator",
        "numerator"
      ],
      "properties": {
        "denominator": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "numerator": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "TrackId": {
      "type": "string"
    },
    "VirtualResampleMode": {
      "oneOf": [
        {
          "description": "Uses the resample mode set as default for this REAPER project.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ProjectDefault"
              ]
            }
          }
        },
        {
          "description": "Uses a specific resample mode.",
          "type": "object",
          "required": [
            "kind",
            "mode"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ReaperMode"
              ]
            },
            "mode": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      ]
    },
    "VirtualTimeStretchMode": {
      "oneOf": [
        {
          "description": "Uses the pitch shift mode set as default for this REAPER project.",
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ProjectDefault"
              ]
            }
          }
        },
        {
          "description": "Uses a specific REAPER pitch shift mode.",
          "type": "object",
          "required": [
            "kind",
            "mode",
            "sub_mode"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ReaperMode"
              ]
            },
            "mode": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "sub_mode": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      ]
    }
  }
}