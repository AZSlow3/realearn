/* automatically generated by rust-bindgen */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub const ID_MAPPING_DIALOG: u32 = 101;
    pub const ID_MAPPINGS_DIALOG: u32 = 104;
    pub const ID_MAPPING_ROW_DIALOG: u32 = 106;
    pub const ID_MAPPING_ROWS_DIALOG: u32 = 108;
    pub const ID_MAIN_DIALOG: u32 = 111;
    pub const ID_ADD_MAPPING_BUTTON: u32 = 40000;
    pub const ID_MAPPING_ROW_REMOVE_BUTTON: u32 = 40000;
    pub const ID_FEEDBACK_DEVICE_COMBO_BOX: u32 = 40001;
    pub const ID_MAPPING_ROW_EDIT_BUTTON: u32 = 40001;
    pub const ID_SETTINGS_REVERSE_CHECK_BOX: u32 = 40001;
    pub const ID_IMPORT_BUTTON: u32 = 40002;
    pub const ID_MAPPING_ROW_DUPLICATE_BUTTON: u32 = 40002;
    pub const ID_SOURCE_CHANNEL_COMBO_BOX: u32 = 40002;
    pub const ID_LET_UNMATCHED_EVENTS_THROUGH_CHECK_BOX: u32 = 40003;
    pub const ID_MAPPING_ROW_LEARN_SOURCE_BUTTON: u32 = 40003;
    pub const ID_SOURCE_LEARN_BUTTON: u32 = 40003;
    pub const ID_LET_MATCHED_EVENTS_THROUGH_CHECK_BOX: u32 = 40004;
    pub const ID_SOURCE_TYPE_COMBO_BOX: u32 = 40004;
    pub const ID_UP_BUTTON: u32 = 40004;
    pub const ID_ALWAYS_AUTO_DETECT_MODE_CHECK_BOX: u32 = 40005;
    pub const ID_MAPPING_ROW_SOURCE_LABEL_TEXT: u32 = 40005;
    pub const ID_SOURCE_CHARACTER_LABEL_TEXT: u32 = 40005;
    pub const ID_EXPORT_BUTTON: u32 = 40006;
    pub const ID_MAPPING_ROW_TARGET_LABEL_TEXT: u32 = 40006;
    pub const ID_TARGET_TYPE_COMBO_BOX: u32 = 40006;
    pub const ID_FILTER_BY_SOURCE_BUTTON: u32 = 40007;
    pub const ID_MAPPING_ROW_GROUP_BOX: u32 = 40007;
    pub const ID_TARGET_FX_PARAMETER_COMBO_BOX: u32 = 40007;
    pub const ID_MAPPING_ROW_LEARN_TARGET_BUTTON: u32 = 40008;
    pub const ID_SEND_FEEDBACK_BUTTON: u32 = 40008;
    pub const ID_TARGET_TRACK_OR_COMMAND_COMBO_BOX: u32 = 40008;
    pub const ID_MAPPING_ROW_FEEDBACK_CHECK_BOX: u32 = 40009;
    pub const ID_SEND_FEEDBACK_ONLY_IF_ARMED_CHECK_BOX: u32 = 40009;
    pub const ID_SETTINGS_STEP_SIZE_LABEL_TEXT: u32 = 40009;
    pub const ID_FILTER_BY_TARGET_BUTTON: u32 = 40010;
    pub const ID_MAPPING_ROW_CONTROL_CHECK_BOX: u32 = 40010;
    pub const ID_SETTINGS_RESET_BUTTON: u32 = 40010;
    pub const ID_CLEAR_TARGET_FILTER_BUTTON: u32 = 40011;
    pub const ID_DOWN_BUTTON: u32 = 40011;
    pub const ID_SETTINGS_MODE_COMBO_BOX: u32 = 40011;
    pub const ID_CLEAR_SOURCE_FILTER_BUTTON: u32 = 40012;
    pub const ID_SETTINGS_MIN_TARGET_VALUE_EDIT_CONTROL: u32 = 40012;
    pub const ID_CONTROL_DEVICE_COMBO_BOX: u32 = 40013;
    pub const ID_SETTINGS_MIN_SOURCE_VALUE_EDIT_CONTROL: u32 = 40013;
    pub const ID_SETTINGS_MAX_TARGET_VALUE_EDIT_CONTROL: u32 = 40014;
    pub const ID_SETTINGS_MAX_SOURCE_VALUE_EDIT_CONTROL: u32 = 40015;
    pub const ID_TARGET_FX_FOCUS_CHECK_BOX: u32 = 40016;
    pub const ID_SETTINGS_ROTATE_CHECK_BOX: u32 = 40017;
    pub const ID_SETTINGS_MIN_SOURCE_VALUE_SLIDER_CONTROL: u32 = 40018;
    pub const ID_SETTINGS_MAX_SOURCE_VALUE_SLIDER_CONTROL: u32 = 40019;
    pub const ID_SETTINGS_MIN_TARGET_VALUE_SLIDER_CONTROL: u32 = 40020;
    pub const ID_SETTINGS_MAX_TARGET_VALUE_SLIDER_CONTROL: u32 = 40021;
    pub const ID_SETTINGS_MAX_STEP_SIZE_EDIT_CONTROL: u32 = 40022;
    pub const ID_SETTINGS_MAX_STEP_SIZE_SLIDER_CONTROL: u32 = 40023;
    pub const ID_SETTINGS_MIN_STEP_SIZE_SLIDER_CONTROL: u32 = 40024;
    pub const ID_SETTINGS_MIN_STEP_SIZE_EDIT_CONTROL: u32 = 40025;
    pub const ID_TARGET_TRACK_OR_CMD_LABEL_TEXT: u32 = 40026;
    pub const ID_TARGET_FX_PARAMETER_LABEL_TEXT: u32 = 40027;
    pub const ID_TARGET_FX_OR_SEND_LABEL_TEXT: u32 = 40028;
    pub const ID_SOURCE_NOTE_OR_CC_NUMBER_LABEL_TEXT: u32 = 40029;
    pub const ID_TARGET_FX_OR_SEND_COMBO_BOX: u32 = 40030;
    pub const ID_SETTINGS_SOURCE_LABEL_TEXT: u32 = 40031;
    pub const ID_SOURCE_RPN_CHECK_BOX: u32 = 40032;
    pub const ID_SETTINGS_MIN_SOURCE_LABEL_TEXT: u32 = 40033;
    pub const ID_SETTINGS_MIN_STEP_SIZE_LABEL_TEXT: u32 = 40034;
    pub const ID_SETTINGS_MAX_STEP_SIZE_LABEL_TEXT: u32 = 40035;
    pub const ID_SETTINGS_MAX_SOURCE_LABEL_TEXT: u32 = 40036;
    pub const ID_SETTINGS_MIN_STEP_SIZE_VALUE_TEXT: u32 = 40037;
    pub const ID_SETTINGS_MAX_TARGET_VALUE_TEXT: u32 = 40038;
    pub const ID_TARGET_INPUT_FX_CHECK_BOX: u32 = 40039;
    pub const ID_SETTINGS_MAX_STEP_SIZE_VALUE_TEXT: u32 = 40040;
    pub const ID_SETTINGS_MIN_TARGET_VALUE_TEXT: u32 = 40041;
    pub const ID_SETTINGS_MIN_TARGET_JUMP_SLIDER_CONTROL: u32 = 40042;
    pub const ID_SETTINGS_ROUND_TARGET_VALUE_CHECK_BOX: u32 = 40043;
    pub const ID_SETTINGS_MIN_TARGET_JUMP_EDIT_CONTROL: u32 = 40044;
    pub const ID_SETTINGS_MIN_TARGET_JUMP_VALUE_TEXT: u32 = 40045;
    pub const ID_TARGET_VALUE_SLIDER_CONTROL: u32 = 40046;
    pub const ID_TARGET_VALUE_EDIT_CONTROL: u32 = 40047;
    pub const ID_TARGET_VALUE_TEXT: u32 = 40048;
    pub const ID_SOURCE_NUMBER_EDIT_CONTROL: u32 = 40049;
    pub const ID_TARGET_OPEN_BUTTON: u32 = 40050;
    pub const ID_TARGET_LEARN_BUTTON: u32 = 40051;
    pub const ID_SOURCE_CHARACTER_COMBO_BOX: u32 = 40052;
    pub const ID_SOURCE_NUMBER_COMBO_BOX: u32 = 40053;
    pub const ID_SOURCE_14_BIT_CHECK_BOX: u32 = 40054;
    pub const ID_SETTINGS_MAX_TARGET_JUMP_EDIT_CONTROL: u32 = 40055;
    pub const ID_SETTINGS_MAX_TARGET_JUMP_LABEL_TEXT: u32 = 40056;
    pub const ID_SETTINGS_MAX_TARGET_JUMP_SLIDER_CONTROL: u32 = 40057;
    pub const ID_SETTINGS_MAX_TARGET_JUMP_VALUE_TEXT: u32 = 40058;
    pub const ID_TARGET_TRACK_SELECTED_CHECK_BOX: u32 = 40059;
    pub const ID_MODE_EEL_CONTROL_TRANSFORMATION_EDIT_CONTROL: u32 = 40060;
    pub const ID_MODE_EEL_FEEDBACK_TRANSFORMATION_LABEL: u32 = 40061;
    pub const ID_MODE_EEL_CONTROL_TRANSFORMATION_LABEL: u32 = 40062;
    pub const ID_MODE_EEL_FEEDBACK_TRANSFORMATION_EDIT_CONTROL: u32 = 40063;
    pub const ID_SETTINGS_TARGET_JUMP_LABEL_TEXT: u32 = 40064;
    pub const ID_SOURCE_CHANNEL_LABEL: u32 = 40065;
    pub const ID_SETTINGS_MIN_TARGET_JUMP_LABEL_TEXT: u32 = 40066;
    pub const ID_SETTINGS_SCALE_MODE_CHECK_BOX: u32 = 40067;
    pub const ID_MAPPING_CONTROL_ENABLED_CHECK_BOX: u32 = 40068;
    pub const ID_MAPPING_FEEDBACK_ENABLED_CHECK_BOX: u32 = 40069;
    pub const ID_MAPPING_FIND_IN_LIST_BUTTON: u32 = 40070;
    pub const ID_MAPPING_NAME_EDIT_CONTROL: u32 = 40071;
    pub const ID_SETTINGS_IGNORE_OUT_OF_RANGE_CHECK_BOX: u32 = 40072;
    pub const ID_SOURCE_MIDI_CLOCK_TRANSPORT_MESSAGE_TYPE_COMBOX_BOX: u32 = 40073;
    pub const ID_SOURCE_MIDI_MESSAGE_TYPE_LABEL_TEXT: u32 = 40074;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub type BOOL = ::std::os::raw::c_schar;
    pub type UINT = ::std::os::raw::c_uint;
    pub type HRESULT = ::std::os::raw::c_int;
    pub type LONG = ::std::os::raw::c_int;
    pub type LPINT = *mut ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HWND__ {
        _unused: [u8; 0],
    }
    pub type HWND = *mut root::HWND__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RECT {
        pub left: root::LONG,
        pub top: root::LONG,
        pub right: root::LONG,
        pub bottom: root::LONG,
    }
    #[test]
    fn bindgen_test_layout_RECT() {
        assert_eq!(
            ::std::mem::size_of::<RECT>(),
            16usize,
            concat!("Size of: ", stringify!(RECT))
        );
        assert_eq!(
            ::std::mem::align_of::<RECT>(),
            4usize,
            concat!("Alignment of ", stringify!(RECT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RECT>())).left as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RECT),
                "::",
                stringify!(left)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RECT>())).top as *const _ as usize },
            4usize,
            concat!("Offset of field: ", stringify!(RECT), "::", stringify!(top))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RECT>())).right as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RECT),
                "::",
                stringify!(right)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RECT>())).bottom as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RECT),
                "::",
                stringify!(bottom)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SCROLLINFO {
        pub cbSize: root::UINT,
        pub fMask: root::UINT,
        pub nMin: ::std::os::raw::c_int,
        pub nMax: ::std::os::raw::c_int,
        pub nPage: root::UINT,
        pub nPos: ::std::os::raw::c_int,
        pub nTrackPos: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_SCROLLINFO() {
        assert_eq!(
            ::std::mem::size_of::<SCROLLINFO>(),
            28usize,
            concat!("Size of: ", stringify!(SCROLLINFO))
        );
        assert_eq!(
            ::std::mem::align_of::<SCROLLINFO>(),
            4usize,
            concat!("Alignment of ", stringify!(SCROLLINFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).cbSize as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(cbSize)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).fMask as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(fMask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).nMin as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(nMin)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).nMax as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(nMax)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).nPage as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(nPage)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).nPos as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(nPos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).nTrackPos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(nTrackPos)
            )
        );
    }
    pub type LPSCROLLINFO = *mut root::SCROLLINFO;
    extern "C" {
        pub fn InitializeCoolSB(hwnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn UninitializeCoolSB(hwnd: root::HWND) -> root::HRESULT;
    }
    extern "C" {
        pub fn CoolSB_SetMinThumbSize(
            hwnd: root::HWND,
            wBar: root::UINT,
            size: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CoolSB_IsThumbTracking(hwnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn CoolSB_IsCoolScrollEnabled(hwnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn CoolSB_SetVScrollPad(
            hwnd: root::HWND,
            topamt: root::UINT,
            botamt: root::UINT,
            getDeadAreaBitmap: ::std::option::Option<
                unsafe extern "C" fn(
                    which: ::std::os::raw::c_int,
                    hwnd: root::HWND,
                    arg1: *mut root::RECT,
                    defcol: ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_void,
            >,
        );
    }
    extern "C" {
        pub fn CoolSB_GetScrollInfo(
            hwnd: root::HWND,
            fnBar: ::std::os::raw::c_int,
            lpsi: root::LPSCROLLINFO,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CoolSB_GetScrollPos(
            hwnd: root::HWND,
            nBar: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn CoolSB_GetScrollRange(
            hwnd: root::HWND,
            nBar: ::std::os::raw::c_int,
            lpMinPos: root::LPINT,
            lpMaxPos: root::LPINT,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CoolSB_SetScrollInfo(
            hwnd: root::HWND,
            fnBar: ::std::os::raw::c_int,
            lpsi: root::LPSCROLLINFO,
            fRedraw: root::BOOL,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn CoolSB_SetScrollPos(
            hwnd: root::HWND,
            nBar: ::std::os::raw::c_int,
            nPos: ::std::os::raw::c_int,
            fRedraw: root::BOOL,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn CoolSB_SetScrollRange(
            hwnd: root::HWND,
            nBar: ::std::os::raw::c_int,
            nMinPos: ::std::os::raw::c_int,
            nMaxPos: ::std::os::raw::c_int,
            fRedraw: root::BOOL,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn CoolSB_ShowScrollBar(
            hwnd: root::HWND,
            wBar: ::std::os::raw::c_int,
            fShow: root::BOOL,
        ) -> root::BOOL;
    }
    extern "C" {
        pub fn CoolSB_SetResizingThumb(hwnd: root::HWND, active: root::BOOL) -> root::BOOL;
    }
    extern "C" {
        pub fn CoolSB_SetThemeIndex(hwnd: root::HWND, idx: ::std::os::raw::c_int) -> root::BOOL;
    }
    extern "C" {
        pub fn CoolSB_SetScale(scale: f32);
    }
    extern "C" {
        pub fn CoolSB_OnColorThemeChange();
    }
    extern "C" {
        pub fn GetIconThemePointer(
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn CoolSB_GetSysColor(
            hwnd: root::HWND,
            val: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
}
