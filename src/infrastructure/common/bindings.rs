/* automatically generated by rust-bindgen */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub const IDC_STATIC: i32 = -1;
    pub const ID_MAPPING_DIALOG: u32 = 101;
    pub const ID_MAPPINGS_DIALOG: u32 = 104;
    pub const ID_MAPPING_ROW_DIALOG: u32 = 106;
    pub const ID_MAPPING_ROWS_DIALOG: u32 = 108;
    pub const ID_MAIN_DIALOG: u32 = 111;
    pub const IDOK: u32 = 40000;
    pub const ID_ADD_MAPPING_BUTTON: u32 = 40000;
    pub const ID_MAPPING_ROW_REMOVE_BUTTON: u32 = 40000;
    pub const ID_FEEDBACK_DEVICE_COMBO_BOX: u32 = 40001;
    pub const ID_MAPPING_ROW_EDIT_BUTTON: u32 = 40001;
    pub const ID_SETTINGS_REVERSE_CHECK_BOX: u32 = 40001;
    pub const ID_IMPORT_BUTTON: u32 = 40002;
    pub const ID_MAPPING_ROW_DUPLICATE_BUTTON: u32 = 40002;
    pub const ID_SOURCE_CHANNEL_COMBO_BOX: u32 = 40002;
    pub const ID_LET_UNMATCHED_EVENTS_THROUGH_CHECK_BOX: u32 = 40003;
    pub const ID_MAPPING_ROW_LEARN_SOURCE_BUTTON: u32 = 40003;
    pub const ID_SOURCE_LEARN_BUTTON: u32 = 40003;
    pub const ID_LET_MATCHED_EVENTS_THROUGH_CHECK_BOX: u32 = 40004;
    pub const ID_SOURCE_TYPE_COMBO_BOX: u32 = 40004;
    pub const ID_UP_BUTTON: u32 = 40004;
    pub const ID_ALWAYS_AUTO_DETECT_MODE_CHECK_BOX: u32 = 40005;
    pub const ID_MAPPING_ROW_SOURCE_LABEL_TEXT: u32 = 40005;
    pub const ID_SOURCE_CHARACTER_LABEL_TEXT: u32 = 40005;
    pub const ID_EXPORT_BUTTON: u32 = 40006;
    pub const ID_MAPPING_ROW_TARGET_LABEL_TEXT: u32 = 40006;
    pub const ID_TARGET_TYPE_COMBO_BOX: u32 = 40006;
    pub const ID_FILTER_BY_SOURCE_BUTTON: u32 = 40007;
    pub const ID_MAPPING_ROW_GROUP_BOX: u32 = 40007;
    pub const ID_TARGET_FX_PARAMETER_COMBO_BOX: u32 = 40007;
    pub const ID_MAPPING_ROW_LEARN_TARGET_BUTTON: u32 = 40008;
    pub const ID_SEND_FEEDBACK_BUTTON: u32 = 40008;
    pub const ID_TARGET_TRACK_OR_COMMAND_COMBO_BOX: u32 = 40008;
    pub const ID_MAPPING_ROW_FEEDBACK_CHECK_BOX: u32 = 40009;
    pub const ID_SEND_FEEDBACK_ONLY_IF_ARMED_CHECK_BOX: u32 = 40009;
    pub const ID_SETTINGS_STEP_SIZE_LABEL_TEXT: u32 = 40009;
    pub const ID_FILTER_BY_TARGET_BUTTON: u32 = 40010;
    pub const ID_MAPPING_ROW_CONTROL_CHECK_BOX: u32 = 40010;
    pub const ID_SETTINGS_RESET_BUTTON: u32 = 40010;
    pub const ID_CLEAR_TARGET_FILTER_BUTTON: u32 = 40011;
    pub const ID_DOWN_BUTTON: u32 = 40011;
    pub const ID_SETTINGS_MODE_COMBO_BOX: u32 = 40011;
    pub const ID_CLEAR_SOURCE_FILTER_BUTTON: u32 = 40012;
    pub const ID_SETTINGS_MIN_TARGET_VALUE_EDIT_CONTROL: u32 = 40012;
    pub const ID_CONTROL_DEVICE_COMBO_BOX: u32 = 40013;
    pub const ID_SETTINGS_MIN_SOURCE_VALUE_EDIT_CONTROL: u32 = 40013;
    pub const ID_SETTINGS_MAX_TARGET_VALUE_EDIT_CONTROL: u32 = 40014;
    pub const ID_SETTINGS_MAX_SOURCE_VALUE_EDIT_CONTROL: u32 = 40015;
    pub const ID_TARGET_FX_FOCUS_CHECK_BOX: u32 = 40016;
    pub const ID_SETTINGS_ROTATE_CHECK_BOX: u32 = 40017;
    pub const ID_SETTINGS_MIN_SOURCE_VALUE_SLIDER_CONTROL: u32 = 40018;
    pub const ID_SETTINGS_MAX_SOURCE_VALUE_SLIDER_CONTROL: u32 = 40019;
    pub const ID_SETTINGS_MIN_TARGET_VALUE_SLIDER_CONTROL: u32 = 40020;
    pub const ID_SETTINGS_MAX_TARGET_VALUE_SLIDER_CONTROL: u32 = 40021;
    pub const ID_SETTINGS_MAX_STEP_SIZE_EDIT_CONTROL: u32 = 40022;
    pub const ID_SETTINGS_MAX_STEP_SIZE_SLIDER_CONTROL: u32 = 40023;
    pub const ID_SETTINGS_MIN_STEP_SIZE_SLIDER_CONTROL: u32 = 40024;
    pub const ID_SETTINGS_MIN_STEP_SIZE_EDIT_CONTROL: u32 = 40025;
    pub const ID_TARGET_TRACK_OR_CMD_LABEL_TEXT: u32 = 40026;
    pub const ID_TARGET_FX_PARAMETER_LABEL_TEXT: u32 = 40027;
    pub const ID_TARGET_FX_OR_SEND_LABEL_TEXT: u32 = 40028;
    pub const ID_SOURCE_NOTE_OR_CC_NUMBER_LABEL_TEXT: u32 = 40029;
    pub const ID_TARGET_FX_OR_SEND_COMBO_BOX: u32 = 40030;
    pub const ID_SETTINGS_SOURCE_LABEL_TEXT: u32 = 40031;
    pub const ID_SOURCE_RPN_CHECK_BOX: u32 = 40032;
    pub const ID_SETTINGS_MIN_SOURCE_LABEL_TEXT: u32 = 40033;
    pub const ID_SETTINGS_MIN_STEP_SIZE_LABEL_TEXT: u32 = 40034;
    pub const ID_SETTINGS_MAX_STEP_SIZE_LABEL_TEXT: u32 = 40035;
    pub const ID_SETTINGS_MAX_SOURCE_LABEL_TEXT: u32 = 40036;
    pub const ID_SETTINGS_MIN_STEP_SIZE_VALUE_TEXT: u32 = 40037;
    pub const ID_SETTINGS_MAX_TARGET_VALUE_TEXT: u32 = 40038;
    pub const ID_TARGET_INPUT_FX_CHECK_BOX: u32 = 40039;
    pub const ID_SETTINGS_MAX_STEP_SIZE_VALUE_TEXT: u32 = 40040;
    pub const ID_SETTINGS_MIN_TARGET_VALUE_TEXT: u32 = 40041;
    pub const ID_SETTINGS_MIN_TARGET_JUMP_SLIDER_CONTROL: u32 = 40042;
    pub const ID_SETTINGS_ROUND_TARGET_VALUE_CHECK_BOX: u32 = 40043;
    pub const ID_SETTINGS_MIN_TARGET_JUMP_EDIT_CONTROL: u32 = 40044;
    pub const ID_SETTINGS_MIN_TARGET_JUMP_VALUE_TEXT: u32 = 40045;
    pub const ID_TARGET_VALUE_SLIDER_CONTROL: u32 = 40046;
    pub const ID_TARGET_VALUE_EDIT_CONTROL: u32 = 40047;
    pub const ID_TARGET_VALUE_TEXT: u32 = 40048;
    pub const ID_SOURCE_NUMBER_EDIT_CONTROL: u32 = 40049;
    pub const ID_TARGET_OPEN_BUTTON: u32 = 40050;
    pub const ID_TARGET_LEARN_BUTTON: u32 = 40051;
    pub const ID_SOURCE_CHARACTER_COMBO_BOX: u32 = 40052;
    pub const ID_SOURCE_NUMBER_COMBO_BOX: u32 = 40053;
    pub const ID_SOURCE_14_BIT_CHECK_BOX: u32 = 40054;
    pub const ID_SETTINGS_MAX_TARGET_JUMP_EDIT_CONTROL: u32 = 40055;
    pub const ID_SETTINGS_MAX_TARGET_JUMP_LABEL_TEXT: u32 = 40056;
    pub const ID_SETTINGS_MAX_TARGET_JUMP_SLIDER_CONTROL: u32 = 40057;
    pub const ID_SETTINGS_MAX_TARGET_JUMP_VALUE_TEXT: u32 = 40058;
    pub const ID_TARGET_TRACK_SELECTED_CHECK_BOX: u32 = 40059;
    pub const ID_MODE_EEL_CONTROL_TRANSFORMATION_EDIT_CONTROL: u32 = 40060;
    pub const ID_MODE_EEL_FEEDBACK_TRANSFORMATION_LABEL: u32 = 40061;
    pub const ID_MODE_EEL_CONTROL_TRANSFORMATION_LABEL: u32 = 40062;
    pub const ID_MODE_EEL_FEEDBACK_TRANSFORMATION_EDIT_CONTROL: u32 = 40063;
    pub const ID_SETTINGS_TARGET_JUMP_LABEL_TEXT: u32 = 40064;
    pub const ID_SOURCE_CHANNEL_LABEL: u32 = 40065;
    pub const ID_SETTINGS_MIN_TARGET_JUMP_LABEL_TEXT: u32 = 40066;
    pub const ID_SETTINGS_SCALE_MODE_CHECK_BOX: u32 = 40067;
    pub const ID_MAPPING_CONTROL_ENABLED_CHECK_BOX: u32 = 40068;
    pub const ID_MAPPING_FEEDBACK_ENABLED_CHECK_BOX: u32 = 40069;
    pub const ID_MAPPING_FIND_IN_LIST_BUTTON: u32 = 40070;
    pub const ID_MAPPING_NAME_EDIT_CONTROL: u32 = 40071;
    pub const ID_SETTINGS_IGNORE_OUT_OF_RANGE_CHECK_BOX: u32 = 40072;
    pub const ID_SOURCE_MIDI_CLOCK_TRANSPORT_MESSAGE_TYPE_COMBOX_BOX: u32 = 40073;
    pub const ID_SOURCE_MIDI_MESSAGE_TYPE_LABEL_TEXT: u32 = 40074;
    pub const _FEATURES_H: u32 = 1;
    pub const _ISOC95_SOURCE: u32 = 1;
    pub const _ISOC99_SOURCE: u32 = 1;
    pub const _ISOC11_SOURCE: u32 = 1;
    pub const _POSIX_SOURCE: u32 = 1;
    pub const _POSIX_C_SOURCE: u32 = 200809;
    pub const _XOPEN_SOURCE: u32 = 700;
    pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
    pub const _LARGEFILE64_SOURCE: u32 = 1;
    pub const _DEFAULT_SOURCE: u32 = 1;
    pub const _ATFILE_SOURCE: u32 = 1;
    pub const __USE_ISOC11: u32 = 1;
    pub const __USE_ISOC99: u32 = 1;
    pub const __USE_ISOC95: u32 = 1;
    pub const __USE_ISOCXX11: u32 = 1;
    pub const __USE_POSIX: u32 = 1;
    pub const __USE_POSIX2: u32 = 1;
    pub const __USE_POSIX199309: u32 = 1;
    pub const __USE_POSIX199506: u32 = 1;
    pub const __USE_XOPEN2K: u32 = 1;
    pub const __USE_XOPEN2K8: u32 = 1;
    pub const __USE_XOPEN: u32 = 1;
    pub const __USE_XOPEN_EXTENDED: u32 = 1;
    pub const __USE_UNIX98: u32 = 1;
    pub const _LARGEFILE_SOURCE: u32 = 1;
    pub const __USE_XOPEN2K8XSI: u32 = 1;
    pub const __USE_XOPEN2KXSI: u32 = 1;
    pub const __USE_LARGEFILE: u32 = 1;
    pub const __USE_LARGEFILE64: u32 = 1;
    pub const __USE_MISC: u32 = 1;
    pub const __USE_ATFILE: u32 = 1;
    pub const __USE_GNU: u32 = 1;
    pub const __USE_FORTIFY_LEVEL: u32 = 0;
    pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
    pub const _STDC_PREDEF_H: u32 = 1;
    pub const __STDC_IEC_559__: u32 = 1;
    pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
    pub const __STDC_ISO_10646__: u32 = 201706;
    pub const __STDC_NO_THREADS__: u32 = 1;
    pub const __GNU_LIBRARY__: u32 = 6;
    pub const __GLIBC__: u32 = 2;
    pub const __GLIBC_MINOR__: u32 = 27;
    pub const _SYS_CDEFS_H: u32 = 1;
    pub const __glibc_c99_flexarr_available: u32 = 1;
    pub const __WORDSIZE: u32 = 64;
    pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
    pub const __SYSCALL_WORDSIZE: u32 = 64;
    pub const __HAVE_GENERIC_SELECTION: u32 = 0;
    pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
    pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
    pub const _STDLIB_H: u32 = 1;
    pub const WNOHANG: u32 = 1;
    pub const WUNTRACED: u32 = 2;
    pub const WSTOPPED: u32 = 2;
    pub const WEXITED: u32 = 4;
    pub const WCONTINUED: u32 = 8;
    pub const WNOWAIT: u32 = 16777216;
    pub const __WNOTHREAD: u32 = 536870912;
    pub const __WALL: u32 = 1073741824;
    pub const __WCLONE: u32 = 2147483648;
    pub const __ENUM_IDTYPE_T: u32 = 1;
    pub const __W_CONTINUED: u32 = 65535;
    pub const __WCOREFLAG: u32 = 128;
    pub const __HAVE_FLOAT128: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
    pub const __HAVE_FLOAT64X: u32 = 1;
    pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
    pub const __HAVE_FLOAT16: u32 = 0;
    pub const __HAVE_FLOAT32: u32 = 1;
    pub const __HAVE_FLOAT64: u32 = 1;
    pub const __HAVE_FLOAT32X: u32 = 1;
    pub const __HAVE_FLOAT128X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
    pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
    pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
    pub const __ldiv_t_defined: u32 = 1;
    pub const __lldiv_t_defined: u32 = 1;
    pub const RAND_MAX: u32 = 2147483647;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
    pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
    pub const _SYS_TYPES_H: u32 = 1;
    pub const _BITS_TYPES_H: u32 = 1;
    pub const _BITS_TYPESIZES_H: u32 = 1;
    pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
    pub const __INO_T_MATCHES_INO64_T: u32 = 1;
    pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
    pub const __FD_SETSIZE: u32 = 1024;
    pub const __clock_t_defined: u32 = 1;
    pub const __clockid_t_defined: u32 = 1;
    pub const __time_t_defined: u32 = 1;
    pub const __timer_t_defined: u32 = 1;
    pub const _BITS_STDINT_INTN_H: u32 = 1;
    pub const __BIT_TYPES_DEFINED__: u32 = 1;
    pub const _ENDIAN_H: u32 = 1;
    pub const __LITTLE_ENDIAN: u32 = 1234;
    pub const __BIG_ENDIAN: u32 = 4321;
    pub const __PDP_ENDIAN: u32 = 3412;
    pub const __BYTE_ORDER: u32 = 1234;
    pub const __FLOAT_WORD_ORDER: u32 = 1234;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const BYTE_ORDER: u32 = 1234;
    pub const _BITS_BYTESWAP_H: u32 = 1;
    pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
    pub const _SYS_SELECT_H: u32 = 1;
    pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
    pub const __sigset_t_defined: u32 = 1;
    pub const __timeval_defined: u32 = 1;
    pub const __timespec_defined: u32 = 1;
    pub const FD_SETSIZE: u32 = 1024;
    pub const _SYS_SYSMACROS_H: u32 = 1;
    pub const _BITS_SYSMACROS_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
    pub const _THREAD_SHARED_TYPES_H: u32 = 1;
    pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
    pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
    pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
    pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
    pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
    pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
    pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
    pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
    pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
    pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
    pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
    pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
    pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
    pub const __have_pthread_attr_t: u32 = 1;
    pub const _ALLOCA_H: u32 = 1;
    pub const _STDIO_H: u32 = 1;
    pub const ____FILE_defined: u32 = 1;
    pub const __FILE_defined: u32 = 1;
    pub const _BITS_LIBIO_H: u32 = 1;
    pub const _BITS_G_CONFIG_H: u32 = 1;
    pub const ____mbstate_t_defined: u32 = 1;
    pub const _G_HAVE_MMAP: u32 = 1;
    pub const _G_HAVE_MREMAP: u32 = 1;
    pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
    pub const _G_BUFSIZ: u32 = 8192;
    pub const _IO_BUFSIZ: u32 = 8192;
    pub const __GNUC_VA_LIST: u32 = 1;
    pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
    pub const EOF: i32 = -1;
    pub const _IOS_INPUT: u32 = 1;
    pub const _IOS_OUTPUT: u32 = 2;
    pub const _IOS_ATEND: u32 = 4;
    pub const _IOS_APPEND: u32 = 8;
    pub const _IOS_TRUNC: u32 = 16;
    pub const _IOS_NOCREATE: u32 = 32;
    pub const _IOS_NOREPLACE: u32 = 64;
    pub const _IOS_BIN: u32 = 128;
    pub const _IO_MAGIC: u32 = 4222418944;
    pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
    pub const _IO_MAGIC_MASK: u32 = 4294901760;
    pub const _IO_USER_BUF: u32 = 1;
    pub const _IO_UNBUFFERED: u32 = 2;
    pub const _IO_NO_READS: u32 = 4;
    pub const _IO_NO_WRITES: u32 = 8;
    pub const _IO_EOF_SEEN: u32 = 16;
    pub const _IO_ERR_SEEN: u32 = 32;
    pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
    pub const _IO_LINKED: u32 = 128;
    pub const _IO_IN_BACKUP: u32 = 256;
    pub const _IO_LINE_BUF: u32 = 512;
    pub const _IO_TIED_PUT_GET: u32 = 1024;
    pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
    pub const _IO_IS_APPENDING: u32 = 4096;
    pub const _IO_IS_FILEBUF: u32 = 8192;
    pub const _IO_BAD_SEEN: u32 = 16384;
    pub const _IO_USER_LOCK: u32 = 32768;
    pub const _IO_FLAGS2_MMAP: u32 = 1;
    pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
    pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
    pub const _IO_SKIPWS: u32 = 1;
    pub const _IO_LEFT: u32 = 2;
    pub const _IO_RIGHT: u32 = 4;
    pub const _IO_INTERNAL: u32 = 8;
    pub const _IO_DEC: u32 = 16;
    pub const _IO_OCT: u32 = 32;
    pub const _IO_HEX: u32 = 64;
    pub const _IO_SHOWBASE: u32 = 128;
    pub const _IO_SHOWPOINT: u32 = 256;
    pub const _IO_UPPERCASE: u32 = 512;
    pub const _IO_SHOWPOS: u32 = 1024;
    pub const _IO_SCIENTIFIC: u32 = 2048;
    pub const _IO_FIXED: u32 = 4096;
    pub const _IO_UNITBUF: u32 = 8192;
    pub const _IO_STDIO: u32 = 16384;
    pub const _IO_DONT_CLOSE: u32 = 32768;
    pub const _IO_BOOLALPHA: u32 = 65536;
    pub const _IOFBF: u32 = 0;
    pub const _IOLBF: u32 = 1;
    pub const _IONBF: u32 = 2;
    pub const BUFSIZ: u32 = 8192;
    pub const SEEK_SET: u32 = 0;
    pub const SEEK_CUR: u32 = 1;
    pub const SEEK_END: u32 = 2;
    pub const SEEK_DATA: u32 = 3;
    pub const SEEK_HOLE: u32 = 4;
    pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
    pub const _BITS_STDIO_LIM_H: u32 = 1;
    pub const L_tmpnam: u32 = 20;
    pub const TMP_MAX: u32 = 238328;
    pub const FILENAME_MAX: u32 = 4096;
    pub const L_ctermid: u32 = 9;
    pub const L_cuserid: u32 = 9;
    pub const FOPEN_MAX: u32 = 16;
    pub const _STRING_H: u32 = 1;
    pub const _STRINGS_H: u32 = 1;
    pub const _UNISTD_H: u32 = 1;
    pub const _POSIX_VERSION: u32 = 200809;
    pub const __POSIX2_THIS_VERSION: u32 = 200809;
    pub const _POSIX2_VERSION: u32 = 200809;
    pub const _POSIX2_C_VERSION: u32 = 200809;
    pub const _POSIX2_C_BIND: u32 = 200809;
    pub const _POSIX2_C_DEV: u32 = 200809;
    pub const _POSIX2_SW_DEV: u32 = 200809;
    pub const _POSIX2_LOCALEDEF: u32 = 200809;
    pub const _XOPEN_VERSION: u32 = 700;
    pub const _XOPEN_XCU_VERSION: u32 = 4;
    pub const _XOPEN_XPG2: u32 = 1;
    pub const _XOPEN_XPG3: u32 = 1;
    pub const _XOPEN_XPG4: u32 = 1;
    pub const _XOPEN_UNIX: u32 = 1;
    pub const _XOPEN_CRYPT: u32 = 1;
    pub const _XOPEN_ENH_I18N: u32 = 1;
    pub const _XOPEN_LEGACY: u32 = 1;
    pub const _BITS_POSIX_OPT_H: u32 = 1;
    pub const _POSIX_JOB_CONTROL: u32 = 1;
    pub const _POSIX_SAVED_IDS: u32 = 1;
    pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
    pub const _POSIX_FSYNC: u32 = 200809;
    pub const _POSIX_MAPPED_FILES: u32 = 200809;
    pub const _POSIX_MEMLOCK: u32 = 200809;
    pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
    pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
    pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
    pub const _POSIX_VDISABLE: u8 = 0u8;
    pub const _POSIX_NO_TRUNC: u32 = 1;
    pub const _XOPEN_REALTIME: u32 = 1;
    pub const _XOPEN_REALTIME_THREADS: u32 = 1;
    pub const _XOPEN_SHM: u32 = 1;
    pub const _POSIX_THREADS: u32 = 200809;
    pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
    pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
    pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
    pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
    pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
    pub const _POSIX_SEMAPHORES: u32 = 200809;
    pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
    pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
    pub const _POSIX_ASYNC_IO: u32 = 1;
    pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
    pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
    pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
    pub const _LFS_LARGEFILE: u32 = 1;
    pub const _LFS64_LARGEFILE: u32 = 1;
    pub const _LFS64_STDIO: u32 = 1;
    pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
    pub const _POSIX_CPUTIME: u32 = 0;
    pub const _POSIX_THREAD_CPUTIME: u32 = 0;
    pub const _POSIX_REGEXP: u32 = 1;
    pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
    pub const _POSIX_SHELL: u32 = 1;
    pub const _POSIX_TIMEOUTS: u32 = 200809;
    pub const _POSIX_SPIN_LOCKS: u32 = 200809;
    pub const _POSIX_SPAWN: u32 = 200809;
    pub const _POSIX_TIMERS: u32 = 200809;
    pub const _POSIX_BARRIERS: u32 = 200809;
    pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
    pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
    pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
    pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
    pub const _POSIX_ADVISORY_INFO: u32 = 200809;
    pub const _POSIX_IPV6: u32 = 200809;
    pub const _POSIX_RAW_SOCKETS: u32 = 200809;
    pub const _POSIX2_CHAR_TERM: u32 = 200809;
    pub const _POSIX_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
    pub const _POSIX_TRACE: i32 = -1;
    pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
    pub const _POSIX_TRACE_INHERIT: i32 = -1;
    pub const _POSIX_TRACE_LOG: i32 = -1;
    pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
    pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
    pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
    pub const _POSIX_V7_LP64_OFF64: u32 = 1;
    pub const _POSIX_V6_LP64_OFF64: u32 = 1;
    pub const _XBS5_LP64_OFF64: u32 = 1;
    pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\0";
    pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
    pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
        b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
    pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
    pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\0";
    pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\0";
    pub const STDIN_FILENO: u32 = 0;
    pub const STDOUT_FILENO: u32 = 1;
    pub const STDERR_FILENO: u32 = 2;
    pub const R_OK: u32 = 4;
    pub const W_OK: u32 = 2;
    pub const X_OK: u32 = 1;
    pub const F_OK: u32 = 0;
    pub const L_SET: u32 = 0;
    pub const L_INCR: u32 = 1;
    pub const L_XTND: u32 = 2;
    pub const _GETOPT_POSIX_H: u32 = 1;
    pub const _GETOPT_CORE_H: u32 = 1;
    pub const F_ULOCK: u32 = 0;
    pub const F_LOCK: u32 = 1;
    pub const F_TLOCK: u32 = 2;
    pub const F_TEST: u32 = 3;
    pub const _SYS_STAT_H: u32 = 1;
    pub const _BITS_STAT_H: u32 = 1;
    pub const _STAT_VER_KERNEL: u32 = 0;
    pub const _STAT_VER_LINUX: u32 = 1;
    pub const _MKNOD_VER_LINUX: u32 = 0;
    pub const _STAT_VER: u32 = 1;
    pub const __S_IFMT: u32 = 61440;
    pub const __S_IFDIR: u32 = 16384;
    pub const __S_IFCHR: u32 = 8192;
    pub const __S_IFBLK: u32 = 24576;
    pub const __S_IFREG: u32 = 32768;
    pub const __S_IFIFO: u32 = 4096;
    pub const __S_IFLNK: u32 = 40960;
    pub const __S_IFSOCK: u32 = 49152;
    pub const __S_ISUID: u32 = 2048;
    pub const __S_ISGID: u32 = 1024;
    pub const __S_ISVTX: u32 = 512;
    pub const __S_IREAD: u32 = 256;
    pub const __S_IWRITE: u32 = 128;
    pub const __S_IEXEC: u32 = 64;
    pub const UTIME_NOW: u32 = 1073741823;
    pub const UTIME_OMIT: u32 = 1073741822;
    pub const S_IFMT: u32 = 61440;
    pub const S_IFDIR: u32 = 16384;
    pub const S_IFCHR: u32 = 8192;
    pub const S_IFBLK: u32 = 24576;
    pub const S_IFREG: u32 = 32768;
    pub const S_IFIFO: u32 = 4096;
    pub const S_IFLNK: u32 = 40960;
    pub const S_IFSOCK: u32 = 49152;
    pub const S_ISUID: u32 = 2048;
    pub const S_ISGID: u32 = 1024;
    pub const S_ISVTX: u32 = 512;
    pub const S_IRUSR: u32 = 256;
    pub const S_IWUSR: u32 = 128;
    pub const S_IXUSR: u32 = 64;
    pub const S_IRWXU: u32 = 448;
    pub const S_IREAD: u32 = 256;
    pub const S_IWRITE: u32 = 128;
    pub const S_IEXEC: u32 = 64;
    pub const S_IRGRP: u32 = 32;
    pub const S_IWGRP: u32 = 16;
    pub const S_IXGRP: u32 = 8;
    pub const S_IRWXG: u32 = 56;
    pub const S_IROTH: u32 = 4;
    pub const S_IWOTH: u32 = 2;
    pub const S_IXOTH: u32 = 1;
    pub const S_IRWXO: u32 = 7;
    pub const ACCESSPERMS: u32 = 511;
    pub const ALLPERMS: u32 = 4095;
    pub const DEFFILEMODE: u32 = 438;
    pub const S_BLKSIZE: u32 = 512;
    pub const _MKNOD_VER: u32 = 0;
    pub const _DLFCN_H: u32 = 1;
    pub const RTLD_LAZY: u32 = 1;
    pub const RTLD_NOW: u32 = 2;
    pub const RTLD_BINDING_MASK: u32 = 3;
    pub const RTLD_NOLOAD: u32 = 4;
    pub const RTLD_DEEPBIND: u32 = 8;
    pub const RTLD_GLOBAL: u32 = 256;
    pub const RTLD_LOCAL: u32 = 0;
    pub const RTLD_NODELETE: u32 = 4096;
    pub const LM_ID_BASE: u32 = 0;
    pub const LM_ID_NEWLM: i32 = -1;
    pub const _CTYPE_H: u32 = 1;
    pub const _GLIBCXX_CSTDDEF: u32 = 1;
    pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
    pub const _GLIBCXX_RELEASE: u32 = 7;
    pub const __GLIBCXX__: u32 = 20181206;
    pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
    pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
    pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
    pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
    pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
    pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
    pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
    pub const _GLIBCXX_OS_DEFINES: u32 = 1;
    pub const __NO_CTYPE: u32 = 1;
    pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
    pub const _GLIBCXX_FAST_MATH: u32 = 0;
    pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
    pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
    pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
    pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
    pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
    pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
    pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
    pub const _GLIBCXX_HAVE_COSF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
    pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
    pub const _GLIBCXX_HAVE_COSL: u32 = 1;
    pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
    pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
    pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
    pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
    pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
    pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
    pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
    pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
    pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
    pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
    pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
    pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
    pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
    pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
    pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
    pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
    pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
    pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
    pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
    pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
    pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
    pub const _GLIBCXX_HAVE_GETS: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
    pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
    pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
    pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
    pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
    pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
    pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
    pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
    pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
    pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
    pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
    pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
    pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
    pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
    pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
    pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
    pub const _GLIBCXX_HAVE_MODF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
    pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
    pub const _GLIBCXX_HAVE_POLL: u32 = 1;
    pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
    pub const _GLIBCXX_HAVE_POWF: u32 = 1;
    pub const _GLIBCXX_HAVE_POWL: u32 = 1;
    pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
    pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
    pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
    pub const _GLIBCXX_HAVE_SINL: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
    pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
    pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
    pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
    pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
    pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
    pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
    pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
    pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
    pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
    pub const _GLIBCXX_HAVE_TANF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
    pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
    pub const _GLIBCXX_HAVE_TANL: u32 = 1;
    pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
    pub const _GLIBCXX_HAVE_TLS: u32 = 1;
    pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
    pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
    pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
    pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
    pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
    pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
    pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
    pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
    pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
    pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
    pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
    pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
    pub const STDC_HEADERS: u32 = 1;
    pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
    pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
    pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
    pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
    pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
    pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
    pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
    pub const _GLIBCXX_HOSTED: u32 = 1;
    pub const _GLIBCXX_RES_LIMITS: u32 = 1;
    pub const _GLIBCXX_STDIO_EOF: i32 = -1;
    pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
    pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
    pub const _GLIBCXX_SYMVER: u32 = 1;
    pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
    pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
    pub const _GLIBCXX_USE_C99: u32 = 1;
    pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
    pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
    pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
    pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
    pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
    pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
    pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
    pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
    pub const _GLIBCXX_USE_INT128: u32 = 1;
    pub const _GLIBCXX_USE_LFS: u32 = 1;
    pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
    pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
    pub const _GLIBCXX_USE_NLS: u32 = 1;
    pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
    pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
    pub const _GLIBCXX_USE_REALPATH: u32 = 1;
    pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
    pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
    pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
    pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
    pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
    pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
    pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
    pub const _GLIBCXX_VERBOSE: u32 = 1;
    pub const _GLIBCXX_X86_RDRAND: u32 = 1;
    pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
    pub const _STDINT_H: u32 = 1;
    pub const _BITS_WCHAR_H: u32 = 1;
    pub const _BITS_STDINT_UINTN_H: u32 = 1;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i64 = -9223372036854775808;
    pub const INT_FAST32_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u64 = 9223372036854775807;
    pub const INT_FAST32_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: i32 = -1;
    pub const UINT_FAST32_MAX: i32 = -1;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const UINTPTR_MAX: i32 = -1;
    pub const PTRDIFF_MIN: i64 = -9223372036854775808;
    pub const PTRDIFF_MAX: u64 = 9223372036854775807;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 4294967295;
    pub const INT8_WIDTH: u32 = 8;
    pub const UINT8_WIDTH: u32 = 8;
    pub const INT16_WIDTH: u32 = 16;
    pub const UINT16_WIDTH: u32 = 16;
    pub const INT32_WIDTH: u32 = 32;
    pub const UINT32_WIDTH: u32 = 32;
    pub const INT64_WIDTH: u32 = 64;
    pub const UINT64_WIDTH: u32 = 64;
    pub const INT_LEAST8_WIDTH: u32 = 8;
    pub const UINT_LEAST8_WIDTH: u32 = 8;
    pub const INT_LEAST16_WIDTH: u32 = 16;
    pub const UINT_LEAST16_WIDTH: u32 = 16;
    pub const INT_LEAST32_WIDTH: u32 = 32;
    pub const UINT_LEAST32_WIDTH: u32 = 32;
    pub const INT_LEAST64_WIDTH: u32 = 64;
    pub const UINT_LEAST64_WIDTH: u32 = 64;
    pub const INT_FAST8_WIDTH: u32 = 8;
    pub const UINT_FAST8_WIDTH: u32 = 8;
    pub const INT_FAST16_WIDTH: u32 = 64;
    pub const UINT_FAST16_WIDTH: u32 = 64;
    pub const INT_FAST32_WIDTH: u32 = 64;
    pub const UINT_FAST32_WIDTH: u32 = 64;
    pub const INT_FAST64_WIDTH: u32 = 64;
    pub const UINT_FAST64_WIDTH: u32 = 64;
    pub const INTPTR_WIDTH: u32 = 64;
    pub const UINTPTR_WIDTH: u32 = 64;
    pub const INTMAX_WIDTH: u32 = 64;
    pub const UINTMAX_WIDTH: u32 = 64;
    pub const PTRDIFF_WIDTH: u32 = 64;
    pub const SIG_ATOMIC_WIDTH: u32 = 32;
    pub const SIZE_WIDTH: u32 = 64;
    pub const WCHAR_WIDTH: u32 = 32;
    pub const WINT_WIDTH: u32 = 32;
    pub const FALSE: u32 = 0;
    pub const TRUE: u32 = 1;
    pub const S_OK: u32 = 0;
    pub const E_FAIL: i32 = -1;
    pub const MAX_PATH: u32 = 1024;
    pub const SWELLAPP_ONLOAD: u32 = 1;
    pub const SWELLAPP_LOADED: u32 = 2;
    pub const SWELLAPP_DESTROY: u32 = 3;
    pub const SWELLAPP_SHOULDDESTROY: u32 = 4;
    pub const SWELLAPP_OPENFILE: u32 = 80;
    pub const SWELLAPP_NEWFILE: u32 = 81;
    pub const SWELLAPP_SHOULDOPENNEWFILE: u32 = 82;
    pub const SWELLAPP_ONCOMMAND: u32 = 153;
    pub const SWELLAPP_PROCESSMESSAGE: u32 = 256;
    pub const SWELLAPP_ACTIVATE: u32 = 4096;
    pub const ODT_MENU: u32 = 1;
    pub const ODT_LISTBOX: u32 = 2;
    pub const ODT_COMBOBOX: u32 = 3;
    pub const ODT_BUTTON: u32 = 4;
    pub const ODS_SELECTED: u32 = 1;
    pub const NIM_ADD: u32 = 0;
    pub const NIM_MODIFY: u32 = 1;
    pub const NIM_DELETE: u32 = 2;
    pub const NIF_MESSAGE: u32 = 1;
    pub const NIF_ICON: u32 = 2;
    pub const NIF_TIP: u32 = 4;
    pub const TVIF_TEXT: u32 = 1;
    pub const TVIF_IMAGE: u32 = 2;
    pub const TVIF_PARAM: u32 = 4;
    pub const TVIF_STATE: u32 = 8;
    pub const TVIF_HANDLE: u32 = 16;
    pub const TVIF_SELECTEDIMAGE: u32 = 32;
    pub const TVIF_CHILDREN: u32 = 64;
    pub const TVIS_SELECTED: u32 = 2;
    pub const TVIS_DROPHILITED: u32 = 8;
    pub const TVIS_BOLD: u32 = 16;
    pub const TVIS_EXPANDED: u32 = 32;
    pub const TVE_COLLAPSE: u32 = 1;
    pub const TVE_EXPAND: u32 = 2;
    pub const TVE_TOGGLE: u32 = 3;
    pub const TVN_FIRST: i32 = -400;
    pub const TVN_SELCHANGED: i32 = -402;
    pub const TVHT_NOWHERE: u32 = 1;
    pub const TVHT_ONITEMICON: u32 = 2;
    pub const TVHT_ONITEMLABEL: u32 = 4;
    pub const TVHT_ONITEMINDENT: u32 = 8;
    pub const TVHT_ONITEMBUTTON: u32 = 16;
    pub const TVHT_ONITEMRIGHT: u32 = 32;
    pub const TVHT_ONITEMSTATEICON: u32 = 64;
    pub const TVHT_ABOVE: u32 = 256;
    pub const TVHT_BELOW: u32 = 512;
    pub const TVHT_TORIGHT: u32 = 1024;
    pub const TVHT_TOLEFT: u32 = 2048;
    pub const GF_BEGIN: u32 = 1;
    pub const GF_INERTIA: u32 = 2;
    pub const GF_END: u32 = 4;
    pub const GID_BEGIN: u32 = 1;
    pub const GID_END: u32 = 2;
    pub const GID_ZOOM: u32 = 3;
    pub const GID_PAN: u32 = 4;
    pub const GID_ROTATE: u32 = 5;
    pub const GID_TWOFINGERTAP: u32 = 6;
    pub const GID_ROLLOVER: u32 = 7;
    pub const GC_PAN: u32 = 1;
    pub const GC_PAN_WITH_SINGLE_FINGER_VERTICALLY: u32 = 2;
    pub const GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY: u32 = 4;
    pub const DLL_PROCESS_DETACH: u32 = 0;
    pub const DLL_PROCESS_ATTACH: u32 = 1;
    pub const MB_OK: u32 = 0;
    pub const MB_OKCANCEL: u32 = 1;
    pub const MB_YESNOCANCEL: u32 = 3;
    pub const MB_YESNO: u32 = 4;
    pub const MB_RETRYCANCEL: u32 = 5;
    pub const MB_ICONERROR: u32 = 0;
    pub const MB_ICONSTOP: u32 = 0;
    pub const MB_ICONINFORMATION: u32 = 0;
    pub const IDCANCEL: u32 = 2;
    pub const IDABORT: u32 = 3;
    pub const IDRETRY: u32 = 4;
    pub const IDIGNORE: u32 = 5;
    pub const IDYES: u32 = 6;
    pub const IDNO: u32 = 7;
    pub const GW_HWNDFIRST: u32 = 0;
    pub const GW_HWNDLAST: u32 = 1;
    pub const GW_HWNDNEXT: u32 = 2;
    pub const GW_HWNDPREV: u32 = 3;
    pub const GW_OWNER: u32 = 4;
    pub const GW_CHILD: u32 = 5;
    pub const GWL_USERDATA: i32 = -21;
    pub const GWL_ID: i32 = -12;
    pub const GWL_STYLE: i32 = -16;
    pub const GWL_EXSTYLE: i32 = -20;
    pub const GWL_WNDPROC: i32 = -4;
    pub const DWL_DLGPROC: i32 = -8;
    pub const WS_CHILD: u32 = 1073741824;
    pub const WS_DISABLED: u32 = 134217728;
    pub const WS_CLIPSIBLINGS: u32 = 67108864;
    pub const WS_VISIBLE: u32 = 33554432;
    pub const WS_CAPTION: u32 = 12582912;
    pub const WS_VSCROLL: u32 = 2097152;
    pub const WS_HSCROLL: u32 = 1048576;
    pub const WS_SYSMENU: u32 = 524288;
    pub const WS_THICKFRAME: u32 = 262144;
    pub const WS_GROUP: u32 = 131072;
    pub const WS_TABSTOP: u32 = 65536;
    pub const WS_BORDER: u32 = 0;
    pub const WM_CTLCOLORMSGBOX: u32 = 306;
    pub const WM_CTLCOLOREDIT: u32 = 307;
    pub const WM_CTLCOLORLISTBOX: u32 = 308;
    pub const WM_CTLCOLORBTN: u32 = 309;
    pub const WM_CTLCOLORDLG: u32 = 310;
    pub const WM_CTLCOLORSCROLLBAR: u32 = 311;
    pub const WM_CTLCOLORSTATIC: u32 = 312;
    pub const CB_ADDSTRING: u32 = 323;
    pub const CB_DELETESTRING: u32 = 324;
    pub const CB_GETCOUNT: u32 = 326;
    pub const CB_GETCURSEL: u32 = 327;
    pub const CB_GETLBTEXT: u32 = 328;
    pub const CB_GETLBTEXTLEN: u32 = 329;
    pub const CB_INSERTSTRING: u32 = 330;
    pub const CB_RESETCONTENT: u32 = 331;
    pub const CB_FINDSTRING: u32 = 332;
    pub const CB_SETCURSEL: u32 = 334;
    pub const CB_GETITEMDATA: u32 = 336;
    pub const CB_SETITEMDATA: u32 = 337;
    pub const CB_FINDSTRINGEXACT: u32 = 344;
    pub const CB_INITSTORAGE: u32 = 353;
    pub const LB_ADDSTRING: u32 = 384;
    pub const LB_INSERTSTRING: u32 = 385;
    pub const LB_DELETESTRING: u32 = 386;
    pub const LB_GETTEXT: u32 = 387;
    pub const LB_RESETCONTENT: u32 = 388;
    pub const LB_SETSEL: u32 = 389;
    pub const LB_SETCURSEL: u32 = 390;
    pub const LB_GETSEL: u32 = 391;
    pub const LB_GETCURSEL: u32 = 392;
    pub const LB_GETTEXTLEN: u32 = 394;
    pub const LB_GETCOUNT: u32 = 395;
    pub const LB_GETSELCOUNT: u32 = 400;
    pub const LB_GETITEMDATA: u32 = 409;
    pub const LB_SETITEMDATA: u32 = 410;
    pub const BM_GETCHECK: u32 = 240;
    pub const BM_SETCHECK: u32 = 241;
    pub const BM_GETIMAGE: u32 = 246;
    pub const BM_SETIMAGE: u32 = 247;
    pub const IMAGE_BITMAP: u32 = 0;
    pub const IMAGE_ICON: u32 = 1;
    pub const NM_FIRST: u32 = 0;
    pub const NM_LAST: i32 = -99;
    pub const NM_CLICK: i32 = -2;
    pub const NM_DBLCLK: i32 = -3;
    pub const NM_RCLICK: i32 = -5;
    pub const LVSIL_STATE: u32 = 1;
    pub const LVSIL_SMALL: u32 = 2;
    pub const LVIR_BOUNDS: u32 = 0;
    pub const LVIR_ICON: u32 = 1;
    pub const LVIR_LABEL: u32 = 2;
    pub const LVIR_SELECTBOUNDS: u32 = 3;
    pub const LVHT_NOWHERE: u32 = 1;
    pub const LVHT_ONITEMICON: u32 = 2;
    pub const LVHT_ONITEMLABEL: u32 = 4;
    pub const LVHT_ONITEMSTATEICON: u32 = 8;
    pub const LVHT_ONITEM: u32 = 14;
    pub const LVHT_ABOVE: u32 = 16;
    pub const LVHT_BELOW: u32 = 32;
    pub const LVHT_TORIGHT: u32 = 64;
    pub const LVHT_TOLEFT: u32 = 128;
    pub const LVCF_FMT: u32 = 1;
    pub const LVCF_WIDTH: u32 = 2;
    pub const LVCF_TEXT: u32 = 4;
    pub const LVCFMT_LEFT: u32 = 0;
    pub const LVCFMT_RIGHT: u32 = 1;
    pub const LVCFMT_CENTER: u32 = 2;
    pub const LVIF_TEXT: u32 = 1;
    pub const LVIF_IMAGE: u32 = 2;
    pub const LVIF_PARAM: u32 = 4;
    pub const LVIF_STATE: u32 = 8;
    pub const LVIS_SELECTED: u32 = 1;
    pub const LVIS_FOCUSED: u32 = 2;
    pub const LVNI_SELECTED: u32 = 1;
    pub const LVNI_FOCUSED: u32 = 2;
    pub const LVIS_STATEIMAGEMASK: u32 = 16711680;
    pub const LVN_FIRST: i32 = -100;
    pub const LVN_LAST: i32 = -199;
    pub const LVN_BEGINDRAG: i32 = -109;
    pub const LVN_COLUMNCLICK: i32 = -108;
    pub const LVN_ITEMCHANGED: i32 = -101;
    pub const LVN_ODFINDITEM: i32 = -152;
    pub const LVN_GETDISPINFO: i32 = -150;
    pub const LVS_EX_GRIDLINES: u32 = 1;
    pub const LVS_EX_HEADERDRAGDROP: u32 = 16;
    pub const LVS_EX_FULLROWSELECT: u32 = 32;
    pub const HDI_FORMAT: u32 = 4;
    pub const HDF_SORTUP: u32 = 1024;
    pub const HDF_SORTDOWN: u32 = 512;
    pub const TCIF_TEXT: u32 = 1;
    pub const TCIF_IMAGE: u32 = 2;
    pub const TCIF_PARAM: u32 = 8;
    pub const TCN_FIRST: i32 = -550;
    pub const TCN_LAST: i32 = -580;
    pub const TCN_SELCHANGE: i32 = -551;
    pub const BS_AUTOCHECKBOX: u32 = 3;
    pub const BS_AUTO3STATE: u32 = 6;
    pub const BS_AUTORADIOBUTTON: u32 = 9;
    pub const BS_OWNERDRAW: u32 = 11;
    pub const BS_BITMAP: u32 = 128;
    pub const BST_CHECKED: u32 = 1;
    pub const BST_UNCHECKED: u32 = 0;
    pub const BST_INDETERMINATE: u32 = 2;
    pub const SW_HIDE: u32 = 0;
    pub const SW_SHOWNA: u32 = 1;
    pub const SW_SHOW: u32 = 2;
    pub const SW_SHOWMINIMIZED: u32 = 3;
    pub const SW_SHOWNOACTIVATE: u32 = 1;
    pub const SW_NORMAL: u32 = 2;
    pub const SW_SHOWNORMAL: u32 = 2;
    pub const SW_SHOWMAXIMIZED: u32 = 2;
    pub const SW_SHOWDEFAULT: u32 = 2;
    pub const SW_RESTORE: u32 = 1;
    pub const SWP_NOMOVE: u32 = 1;
    pub const SWP_NOSIZE: u32 = 2;
    pub const SWP_NOZORDER: u32 = 4;
    pub const SWP_NOACTIVATE: u32 = 8;
    pub const SWP_SHOWWINDOW: u32 = 16;
    pub const SWP_FRAMECHANGED: u32 = 32;
    pub const SWP_NOCOPYBITS: u32 = 0;
    pub const TPM_LEFTBUTTON: u32 = 0;
    pub const TPM_RIGHTBUTTON: u32 = 2;
    pub const TPM_LEFTALIGN: u32 = 0;
    pub const TPM_CENTERALIGN: u32 = 4;
    pub const TPM_RIGHTALIGN: u32 = 8;
    pub const TPM_TOPALIGN: u32 = 0;
    pub const TPM_VCENTERALIGN: u32 = 16;
    pub const TPM_BOTTOMALIGN: u32 = 32;
    pub const TPM_HORIZONTAL: u32 = 0;
    pub const TPM_VERTICAL: u32 = 64;
    pub const TPM_NONOTIFY: u32 = 128;
    pub const TPM_RETURNCMD: u32 = 256;
    pub const MIIM_ID: u32 = 1;
    pub const MIIM_STATE: u32 = 2;
    pub const MIIM_TYPE: u32 = 4;
    pub const MIIM_SUBMENU: u32 = 8;
    pub const MIIM_DATA: u32 = 16;
    pub const MIIM_BITMAP: u32 = 128;
    pub const MF_ENABLED: u32 = 0;
    pub const MF_GRAYED: u32 = 1;
    pub const MF_DISABLED: u32 = 2;
    pub const MF_STRING: u32 = 0;
    pub const MF_BITMAP: u32 = 4;
    pub const MF_UNCHECKED: u32 = 0;
    pub const MF_CHECKED: u32 = 8;
    pub const MF_POPUP: u32 = 16;
    pub const MF_BYCOMMAND: u32 = 0;
    pub const MF_BYPOSITION: u32 = 1024;
    pub const MF_SEPARATOR: u32 = 2048;
    pub const MFT_STRING: u32 = 0;
    pub const MFT_BITMAP: u32 = 4;
    pub const MFT_SEPARATOR: u32 = 2048;
    pub const MFT_RADIOCHECK: u32 = 512;
    pub const MFS_GRAYED: u32 = 3;
    pub const MFS_DISABLED: u32 = 3;
    pub const MFS_CHECKED: u32 = 8;
    pub const MFS_ENABLED: u32 = 0;
    pub const MFS_UNCHECKED: u32 = 0;
    pub const EN_SETFOCUS: u32 = 256;
    pub const EN_KILLFOCUS: u32 = 512;
    pub const EN_CHANGE: u32 = 768;
    pub const STN_CLICKED: u32 = 0;
    pub const STN_DBLCLK: u32 = 1;
    pub const WM_CREATE: u32 = 1;
    pub const WM_DESTROY: u32 = 2;
    pub const WM_MOVE: u32 = 3;
    pub const WM_SIZE: u32 = 5;
    pub const WM_ACTIVATE: u32 = 6;
    pub const WM_SETREDRAW: u32 = 11;
    pub const WM_SETTEXT: u32 = 12;
    pub const WM_PAINT: u32 = 15;
    pub const WM_CLOSE: u32 = 16;
    pub const WM_ERASEBKGND: u32 = 20;
    pub const WM_SHOWWINDOW: u32 = 24;
    pub const WM_ACTIVATEAPP: u32 = 28;
    pub const WM_SETCURSOR: u32 = 32;
    pub const WM_MOUSEACTIVATE: u32 = 33;
    pub const WM_GETMINMAXINFO: u32 = 36;
    pub const WM_DRAWITEM: u32 = 43;
    pub const WM_SETFONT: u32 = 48;
    pub const WM_GETFONT: u32 = 49;
    pub const WM_GETOBJECT: u32 = 61;
    pub const WM_COPYDATA: u32 = 74;
    pub const WM_NOTIFY: u32 = 78;
    pub const WM_CONTEXTMENU: u32 = 123;
    pub const WM_STYLECHANGED: u32 = 125;
    pub const WM_DISPLAYCHANGE: u32 = 126;
    pub const WM_NCDESTROY: u32 = 130;
    pub const WM_NCCALCSIZE: u32 = 131;
    pub const WM_NCHITTEST: u32 = 132;
    pub const WM_NCPAINT: u32 = 133;
    pub const WM_NCMOUSEMOVE: u32 = 160;
    pub const WM_NCLBUTTONDOWN: u32 = 161;
    pub const WM_NCLBUTTONUP: u32 = 162;
    pub const WM_NCLBUTTONDBLCLK: u32 = 163;
    pub const WM_NCRBUTTONDOWN: u32 = 164;
    pub const WM_NCRBUTTONUP: u32 = 165;
    pub const WM_NCRBUTTONDBLCLK: u32 = 166;
    pub const WM_NCMBUTTONDOWN: u32 = 167;
    pub const WM_NCMBUTTONUP: u32 = 168;
    pub const WM_NCMBUTTONDBLCLK: u32 = 169;
    pub const WM_KEYFIRST: u32 = 256;
    pub const WM_KEYDOWN: u32 = 256;
    pub const WM_KEYUP: u32 = 257;
    pub const WM_CHAR: u32 = 258;
    pub const WM_DEADCHAR: u32 = 259;
    pub const WM_SYSKEYDOWN: u32 = 260;
    pub const WM_SYSKEYUP: u32 = 261;
    pub const WM_SYSCHAR: u32 = 262;
    pub const WM_SYSDEADCHAR: u32 = 263;
    pub const WM_KEYLAST: u32 = 264;
    pub const WM_INITDIALOG: u32 = 272;
    pub const WM_COMMAND: u32 = 273;
    pub const WM_SYSCOMMAND: u32 = 274;
    pub const SC_CLOSE: u32 = 61536;
    pub const WM_TIMER: u32 = 275;
    pub const WM_HSCROLL: u32 = 276;
    pub const WM_VSCROLL: u32 = 277;
    pub const WM_INITMENUPOPUP: u32 = 279;
    pub const WM_GESTURE: u32 = 281;
    pub const WM_MOUSEFIRST: u32 = 512;
    pub const WM_MOUSEMOVE: u32 = 512;
    pub const WM_LBUTTONDOWN: u32 = 513;
    pub const WM_LBUTTONUP: u32 = 514;
    pub const WM_LBUTTONDBLCLK: u32 = 515;
    pub const WM_RBUTTONDOWN: u32 = 516;
    pub const WM_RBUTTONUP: u32 = 517;
    pub const WM_RBUTTONDBLCLK: u32 = 518;
    pub const WM_MBUTTONDOWN: u32 = 519;
    pub const WM_MBUTTONUP: u32 = 520;
    pub const WM_MBUTTONDBLCLK: u32 = 521;
    pub const WM_MOUSEWHEEL: u32 = 522;
    pub const WM_MOUSEHWHEEL: u32 = 526;
    pub const WM_MOUSELAST: u32 = 522;
    pub const WM_CAPTURECHANGED: u32 = 533;
    pub const WM_DROPFILES: u32 = 563;
    pub const WM_USER: u32 = 1024;
    pub const HTCAPTION: u32 = 2;
    pub const HTBOTTOMRIGHT: u32 = 17;
    pub const WA_INACTIVE: u32 = 0;
    pub const WA_ACTIVE: u32 = 1;
    pub const WA_CLICKACTIVE: u32 = 2;
    pub const BN_CLICKED: u32 = 0;
    pub const LBN_SELCHANGE: u32 = 1;
    pub const LBN_DBLCLK: u32 = 2;
    pub const LB_ERR: i32 = -1;
    pub const CBN_SELCHANGE: u32 = 1;
    pub const CBN_EDITCHANGE: u32 = 5;
    pub const CBN_DROPDOWN: u32 = 7;
    pub const CBN_CLOSEUP: u32 = 8;
    pub const CB_ERR: i32 = -1;
    pub const EM_GETSEL: u32 = 61616;
    pub const EM_SETSEL: u32 = 61617;
    pub const EM_SCROLL: u32 = 61621;
    pub const EM_SETPASSWORDCHAR: u32 = 61644;
    pub const SB_HORZ: u32 = 0;
    pub const SB_VERT: u32 = 1;
    pub const SB_CTL: u32 = 2;
    pub const SB_BOTH: u32 = 3;
    pub const SB_LINEUP: u32 = 0;
    pub const SB_LINELEFT: u32 = 0;
    pub const SB_LINEDOWN: u32 = 1;
    pub const SB_LINERIGHT: u32 = 1;
    pub const SB_PAGEUP: u32 = 2;
    pub const SB_PAGELEFT: u32 = 2;
    pub const SB_PAGEDOWN: u32 = 3;
    pub const SB_PAGERIGHT: u32 = 3;
    pub const SB_THUMBPOSITION: u32 = 4;
    pub const SB_THUMBTRACK: u32 = 5;
    pub const SB_TOP: u32 = 6;
    pub const SB_LEFT: u32 = 6;
    pub const SB_BOTTOM: u32 = 7;
    pub const SB_RIGHT: u32 = 7;
    pub const SB_ENDSCROLL: u32 = 8;
    pub const DFCS_SCROLLUP: u32 = 0;
    pub const DFCS_SCROLLDOWN: u32 = 1;
    pub const DFCS_SCROLLLEFT: u32 = 2;
    pub const DFCS_SCROLLRIGHT: u32 = 3;
    pub const DFCS_SCROLLCOMBOBOX: u32 = 5;
    pub const DFCS_SCROLLSIZEGRIP: u32 = 8;
    pub const DFCS_SCROLLSIZEGRIPRIGHT: u32 = 16;
    pub const DFCS_INACTIVE: u32 = 256;
    pub const DFCS_PUSHED: u32 = 512;
    pub const DFCS_CHECKED: u32 = 1024;
    pub const DFCS_FLAT: u32 = 16384;
    pub const DFCS_BUTTONPUSH: u32 = 16;
    pub const DFC_SCROLL: u32 = 3;
    pub const DFC_BUTTON: u32 = 4;
    pub const ESB_ENABLE_BOTH: u32 = 0;
    pub const ESB_DISABLE_BOTH: u32 = 3;
    pub const ESB_DISABLE_LEFT: u32 = 1;
    pub const ESB_DISABLE_RIGHT: u32 = 2;
    pub const ESB_DISABLE_UP: u32 = 1;
    pub const ESB_DISABLE_DOWN: u32 = 2;
    pub const BDR_RAISEDOUTER: u32 = 1;
    pub const BDR_SUNKENOUTER: u32 = 2;
    pub const BDR_RAISEDINNER: u32 = 4;
    pub const BDR_SUNKENINNER: u32 = 8;
    pub const BDR_OUTER: u32 = 3;
    pub const BDR_INNER: u32 = 12;
    pub const EDGE_RAISED: u32 = 5;
    pub const EDGE_SUNKEN: u32 = 10;
    pub const EDGE_ETCHED: u32 = 6;
    pub const EDGE_BUMP: u32 = 9;
    pub const BF_ADJUST: u32 = 8192;
    pub const BF_FLAT: u32 = 16384;
    pub const BF_LEFT: u32 = 1;
    pub const BF_TOP: u32 = 2;
    pub const BF_RIGHT: u32 = 4;
    pub const BF_BOTTOM: u32 = 8;
    pub const BF_RECT: u32 = 15;
    pub const HTHSCROLL: u32 = 6;
    pub const HTVSCROLL: u32 = 7;
    pub const WS_EX_LEFTSCROLLBAR: u32 = 16384;
    pub const WS_EX_ACCEPTFILES: u32 = 16;
    pub const SIF_RANGE: u32 = 1;
    pub const SIF_PAGE: u32 = 2;
    pub const SIF_POS: u32 = 4;
    pub const SIF_DISABLENOSCROLL: u32 = 8;
    pub const SIF_TRACKPOS: u32 = 16;
    pub const SIF_ALL: u32 = 23;
    pub const SIZE_RESTORED: u32 = 0;
    pub const SIZE_MINIMIZED: u32 = 1;
    pub const SIZE_MAXIMIZED: u32 = 2;
    pub const SIZE_MAXSHOW: u32 = 3;
    pub const SIZE_MAXHIDE: u32 = 4;
    pub const FVIRTKEY: u32 = 1;
    pub const FSHIFT: u32 = 4;
    pub const FCONTROL: u32 = 8;
    pub const FALT: u32 = 16;
    pub const FLWIN: u32 = 32;
    pub const VK_LBUTTON: u32 = 1;
    pub const VK_RBUTTON: u32 = 2;
    pub const VK_MBUTTON: u32 = 4;
    pub const VK_BACK: u32 = 8;
    pub const VK_TAB: u32 = 9;
    pub const VK_CLEAR: u32 = 12;
    pub const VK_RETURN: u32 = 13;
    pub const VK_SHIFT: u32 = 16;
    pub const VK_CONTROL: u32 = 17;
    pub const VK_MENU: u32 = 18;
    pub const VK_PAUSE: u32 = 19;
    pub const VK_CAPITAL: u32 = 20;
    pub const VK_ESCAPE: u32 = 27;
    pub const VK_SPACE: u32 = 32;
    pub const VK_PRIOR: u32 = 33;
    pub const VK_NEXT: u32 = 34;
    pub const VK_END: u32 = 35;
    pub const VK_HOME: u32 = 36;
    pub const VK_LEFT: u32 = 37;
    pub const VK_UP: u32 = 38;
    pub const VK_RIGHT: u32 = 39;
    pub const VK_DOWN: u32 = 40;
    pub const VK_SELECT: u32 = 41;
    pub const VK_PRINT: u32 = 42;
    pub const VK_SNAPSHOT: u32 = 44;
    pub const VK_INSERT: u32 = 45;
    pub const VK_DELETE: u32 = 46;
    pub const VK_HELP: u32 = 47;
    pub const VK_LWIN: u32 = 91;
    pub const VK_NUMPAD0: u32 = 96;
    pub const VK_NUMPAD1: u32 = 97;
    pub const VK_NUMPAD2: u32 = 98;
    pub const VK_NUMPAD3: u32 = 99;
    pub const VK_NUMPAD4: u32 = 100;
    pub const VK_NUMPAD5: u32 = 101;
    pub const VK_NUMPAD6: u32 = 102;
    pub const VK_NUMPAD7: u32 = 103;
    pub const VK_NUMPAD8: u32 = 104;
    pub const VK_NUMPAD9: u32 = 105;
    pub const VK_MULTIPLY: u32 = 106;
    pub const VK_ADD: u32 = 107;
    pub const VK_SEPARATOR: u32 = 108;
    pub const VK_SUBTRACT: u32 = 109;
    pub const VK_DECIMAL: u32 = 110;
    pub const VK_DIVIDE: u32 = 111;
    pub const VK_F1: u32 = 112;
    pub const VK_F2: u32 = 113;
    pub const VK_F3: u32 = 114;
    pub const VK_F4: u32 = 115;
    pub const VK_F5: u32 = 116;
    pub const VK_F6: u32 = 117;
    pub const VK_F7: u32 = 118;
    pub const VK_F8: u32 = 119;
    pub const VK_F9: u32 = 120;
    pub const VK_F10: u32 = 121;
    pub const VK_F11: u32 = 122;
    pub const VK_F12: u32 = 123;
    pub const VK_F13: u32 = 124;
    pub const VK_F14: u32 = 125;
    pub const VK_F15: u32 = 126;
    pub const VK_F16: u32 = 127;
    pub const VK_F17: u32 = 128;
    pub const VK_F18: u32 = 129;
    pub const VK_F19: u32 = 130;
    pub const VK_F20: u32 = 131;
    pub const VK_F21: u32 = 132;
    pub const VK_F22: u32 = 133;
    pub const VK_F23: u32 = 134;
    pub const VK_F24: u32 = 135;
    pub const VK_NUMLOCK: u32 = 144;
    pub const VK_SCROLL: u32 = 145;
    pub const MK_LBUTTON: u32 = 1;
    pub const MK_RBUTTON: u32 = 2;
    pub const MK_MBUTTON: u32 = 16;
    pub const COLOR_3DSHADOW: u32 = 0;
    pub const COLOR_3DHILIGHT: u32 = 1;
    pub const COLOR_3DFACE: u32 = 2;
    pub const COLOR_BTNTEXT: u32 = 3;
    pub const COLOR_WINDOW: u32 = 4;
    pub const COLOR_SCROLLBAR: u32 = 5;
    pub const COLOR_3DDKSHADOW: u32 = 6;
    pub const COLOR_BTNFACE: u32 = 7;
    pub const COLOR_INFOBK: u32 = 8;
    pub const COLOR_INFOTEXT: u32 = 9;
    pub const SRCCOPY: u32 = 0;
    pub const SRCCOPY_USEALPHACHAN: u32 = 3735928559;
    pub const PS_SOLID: u32 = 0;
    pub const DT_TOP: u32 = 0;
    pub const DT_LEFT: u32 = 0;
    pub const DT_CENTER: u32 = 1;
    pub const DT_RIGHT: u32 = 2;
    pub const DT_VCENTER: u32 = 4;
    pub const DT_BOTTOM: u32 = 8;
    pub const DT_WORDBREAK: u32 = 16;
    pub const DT_SINGLELINE: u32 = 32;
    pub const DT_NOCLIP: u32 = 256;
    pub const DT_CALCRECT: u32 = 1024;
    pub const DT_NOPREFIX: u32 = 2048;
    pub const DT_END_ELLIPSIS: u32 = 32768;
    pub const FW_DONTCARE: u32 = 0;
    pub const FW_THIN: u32 = 100;
    pub const FW_EXTRALIGHT: u32 = 200;
    pub const FW_LIGHT: u32 = 300;
    pub const FW_NORMAL: u32 = 400;
    pub const FW_MEDIUM: u32 = 500;
    pub const FW_SEMIBOLD: u32 = 600;
    pub const FW_BOLD: u32 = 700;
    pub const FW_EXTRABOLD: u32 = 800;
    pub const FW_HEAVY: u32 = 900;
    pub const FW_ULTRALIGHT: u32 = 200;
    pub const FW_REGULAR: u32 = 400;
    pub const FW_DEMIBOLD: u32 = 600;
    pub const FW_ULTRABOLD: u32 = 800;
    pub const FW_BLACK: u32 = 900;
    pub const OUT_DEFAULT_PRECIS: u32 = 0;
    pub const CLIP_DEFAULT_PRECIS: u32 = 0;
    pub const DEFAULT_QUALITY: u32 = 0;
    pub const DRAFT_QUALITY: u32 = 1;
    pub const PROOF_QUALITY: u32 = 2;
    pub const NONANTIALIASED_QUALITY: u32 = 3;
    pub const ANTIALIASED_QUALITY: u32 = 4;
    pub const DEFAULT_PITCH: u32 = 0;
    pub const DEFAULT_CHARSET: u32 = 0;
    pub const ANSI_CHARSET: u32 = 0;
    pub const TRANSPARENT: u32 = 0;
    pub const OPAQUE: u32 = 1;
    pub const NULL_PEN: u32 = 1;
    pub const NULL_BRUSH: u32 = 2;
    pub const GGI_MARK_NONEXISTING_GLYPHS: u32 = 1;
    pub const GMEM_ZEROINIT: u32 = 1;
    pub const GMEM_FIXED: u32 = 0;
    pub const GMEM_MOVEABLE: u32 = 0;
    pub const GMEM_DDESHARE: u32 = 0;
    pub const GMEM_DISCARDABLE: u32 = 0;
    pub const GMEM_SHARE: u32 = 0;
    pub const GMEM_LOWER: u32 = 0;
    pub const GPTR: u32 = 1;
    pub const _MCW_RC: u32 = 768;
    pub const _RC_NEAR: u32 = 0;
    pub const _RC_DOWN: u32 = 256;
    pub const _RC_UP: u32 = 512;
    pub const _RC_CHOP: u32 = 768;
    pub const HTNOWHERE: u32 = 0;
    pub const HTCLIENT: u32 = 1;
    pub const HTMENU: u32 = 5;
    pub const SM_CXSCREEN: u32 = 0;
    pub const SM_CYSCREEN: u32 = 1;
    pub const SM_CXVSCROLL: u32 = 2;
    pub const SM_CYHSCROLL: u32 = 3;
    pub const SM_CYVSCROLL: u32 = 20;
    pub const SM_CXHSCROLL: u32 = 21;
    pub const THREAD_BASE_PRIORITY_LOWRT: u32 = 15;
    pub const THREAD_BASE_PRIORITY_MAX: u32 = 2;
    pub const THREAD_BASE_PRIORITY_MIN: i32 = -2;
    pub const THREAD_BASE_PRIORITY_IDLE: i32 = -15;
    pub const THREAD_PRIORITY_LOWEST: i32 = -2;
    pub const THREAD_PRIORITY_BELOW_NORMAL: i32 = -1;
    pub const THREAD_PRIORITY_NORMAL: u32 = 0;
    pub const THREAD_PRIORITY_HIGHEST: u32 = 2;
    pub const THREAD_PRIORITY_ABOVE_NORMAL: u32 = 1;
    pub const THREAD_PRIORITY_TIME_CRITICAL: u32 = 15;
    pub const THREAD_PRIORITY_IDLE: i32 = -15;
    pub const WAIT_OBJECT_0: u32 = 0;
    pub const WAIT_TIMEOUT: u32 = 258;
    pub const INFINITE: u32 = 4294967295;
    pub const FR_PRIVATE: u32 = 1;
    pub const idtype_t_P_ALL: root::idtype_t = 0;
    pub const idtype_t_P_PID: root::idtype_t = 1;
    pub const idtype_t_P_PGID: root::idtype_t = 2;
    pub type idtype_t = u32;
    pub type _Float32 = f32;
    pub type _Float64 = f64;
    pub type _Float32x = f64;
    pub type _Float64x = u128;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct div_t {
        pub quot: ::std::os::raw::c_int,
        pub rem: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_div_t() {
        assert_eq!(
            ::std::mem::size_of::<div_t>(),
            8usize,
            concat!("Size of: ", stringify!(div_t))
        );
        assert_eq!(
            ::std::mem::align_of::<div_t>(),
            4usize,
            concat!("Alignment of ", stringify!(div_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ldiv_t {
        pub quot: ::std::os::raw::c_long,
        pub rem: ::std::os::raw::c_long,
    }
    #[test]
    fn bindgen_test_layout_ldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<ldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(ldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<ldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(ldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lldiv_t {
        pub quot: ::std::os::raw::c_longlong,
        pub rem: ::std::os::raw::c_longlong,
    }
    #[test]
    fn bindgen_test_layout_lldiv_t() {
        assert_eq!(
            ::std::mem::size_of::<lldiv_t>(),
            16usize,
            concat!("Size of: ", stringify!(lldiv_t))
        );
        assert_eq!(
            ::std::mem::align_of::<lldiv_t>(),
            8usize,
            concat!("Alignment of ", stringify!(lldiv_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(quot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    extern "C" {
        pub fn __ctype_get_mb_cur_max() -> usize;
    }
    extern "C" {
        pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtod(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> u128;
    }
    extern "C" {
        pub fn strtof32(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn strtof64(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn strtof32x(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn strtof64x(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn strtol(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoq(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtouq(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strtoll(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strfromd(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: f32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfroml(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: u128,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf32(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float32,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf64(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf32x(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float32x,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfromf64x(
            __dest: *mut ::std::os::raw::c_char,
            __size: usize,
            __format: *const ::std::os::raw::c_char,
            __f: root::_Float64x,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_struct {
        pub __locales: [*mut root::__locale_data; 13usize],
        pub __ctype_b: *const ::std::os::raw::c_ushort,
        pub __ctype_tolower: *const ::std::os::raw::c_int,
        pub __ctype_toupper: *const ::std::os::raw::c_int,
        pub __names: [*const ::std::os::raw::c_char; 13usize],
    }
    #[test]
    fn bindgen_test_layout___locale_struct() {
        assert_eq!(
            ::std::mem::size_of::<__locale_struct>(),
            232usize,
            concat!("Size of: ", stringify!(__locale_struct))
        );
        assert_eq!(
            ::std::mem::align_of::<__locale_struct>(),
            8usize,
            concat!("Alignment of ", stringify!(__locale_struct))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__locales)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_b)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_tolower)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__ctype_toupper)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(__locale_struct),
                "::",
                stringify!(__names)
            )
        );
    }
    pub type __locale_t = *mut root::__locale_struct;
    pub type locale_t = root::__locale_t;
    extern "C" {
        pub fn strtol_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtoul_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoll_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoull_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn strtod_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> f32;
    }
    extern "C" {
        pub fn strtold_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> u128;
    }
    extern "C" {
        pub fn strtof32_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32;
    }
    extern "C" {
        pub fn strtof64_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64;
    }
    extern "C" {
        pub fn strtof32x_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float32x;
    }
    extern "C" {
        pub fn strtof64x_l(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> root::_Float64x;
    }
    extern "C" {
        pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    pub type __u_char = ::std::os::raw::c_uchar;
    pub type __u_short = ::std::os::raw::c_ushort;
    pub type __u_int = ::std::os::raw::c_uint;
    pub type __u_long = ::std::os::raw::c_ulong;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_long;
    pub type __uint64_t = ::std::os::raw::c_ulong;
    pub type __quad_t = ::std::os::raw::c_long;
    pub type __u_quad_t = ::std::os::raw::c_ulong;
    pub type __intmax_t = ::std::os::raw::c_long;
    pub type __uintmax_t = ::std::os::raw::c_ulong;
    pub type __dev_t = ::std::os::raw::c_ulong;
    pub type __uid_t = ::std::os::raw::c_uint;
    pub type __gid_t = ::std::os::raw::c_uint;
    pub type __ino_t = ::std::os::raw::c_ulong;
    pub type __ino64_t = ::std::os::raw::c_ulong;
    pub type __mode_t = ::std::os::raw::c_uint;
    pub type __nlink_t = ::std::os::raw::c_ulong;
    pub type __off_t = ::std::os::raw::c_long;
    pub type __off64_t = ::std::os::raw::c_long;
    pub type __pid_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __fsid_t {
        pub __val: [::std::os::raw::c_int; 2usize],
    }
    #[test]
    fn bindgen_test_layout___fsid_t() {
        assert_eq!(
            ::std::mem::size_of::<__fsid_t>(),
            8usize,
            concat!("Size of: ", stringify!(__fsid_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__fsid_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__fsid_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type __clock_t = ::std::os::raw::c_long;
    pub type __rlim_t = ::std::os::raw::c_ulong;
    pub type __rlim64_t = ::std::os::raw::c_ulong;
    pub type __id_t = ::std::os::raw::c_uint;
    pub type __time_t = ::std::os::raw::c_long;
    pub type __useconds_t = ::std::os::raw::c_uint;
    pub type __suseconds_t = ::std::os::raw::c_long;
    pub type __daddr_t = ::std::os::raw::c_int;
    pub type __key_t = ::std::os::raw::c_int;
    pub type __clockid_t = ::std::os::raw::c_int;
    pub type __timer_t = *mut ::std::os::raw::c_void;
    pub type __blksize_t = ::std::os::raw::c_long;
    pub type __blkcnt_t = ::std::os::raw::c_long;
    pub type __blkcnt64_t = ::std::os::raw::c_long;
    pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
    pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
    pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
    pub type __fsword_t = ::std::os::raw::c_long;
    pub type __ssize_t = ::std::os::raw::c_long;
    pub type __syscall_slong_t = ::std::os::raw::c_long;
    pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
    pub type __loff_t = root::__off64_t;
    pub type __caddr_t = *mut ::std::os::raw::c_char;
    pub type __intptr_t = ::std::os::raw::c_long;
    pub type __socklen_t = ::std::os::raw::c_uint;
    pub type __sig_atomic_t = ::std::os::raw::c_int;
    pub type u_char = root::__u_char;
    pub type u_short = root::__u_short;
    pub type u_int = root::__u_int;
    pub type u_long = root::__u_long;
    pub type quad_t = root::__quad_t;
    pub type u_quad_t = root::__u_quad_t;
    pub type fsid_t = root::__fsid_t;
    pub type loff_t = root::__loff_t;
    pub type ino_t = root::__ino_t;
    pub type ino64_t = root::__ino64_t;
    pub type dev_t = root::__dev_t;
    pub type gid_t = root::__gid_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type uid_t = root::__uid_t;
    pub type off_t = root::__off_t;
    pub type off64_t = root::__off64_t;
    pub type pid_t = root::__pid_t;
    pub type id_t = root::__id_t;
    pub type daddr_t = root::__daddr_t;
    pub type caddr_t = root::__caddr_t;
    pub type key_t = root::__key_t;
    pub type clock_t = root::__clock_t;
    pub type clockid_t = root::__clockid_t;
    pub type time_t = root::__time_t;
    pub type timer_t = root::__timer_t;
    pub type useconds_t = root::__useconds_t;
    pub type suseconds_t = root::__suseconds_t;
    pub type ulong = ::std::os::raw::c_ulong;
    pub type ushort = ::std::os::raw::c_ushort;
    pub type uint = ::std::os::raw::c_uint;
    pub type u_int8_t = ::std::os::raw::c_uchar;
    pub type u_int16_t = ::std::os::raw::c_ushort;
    pub type u_int32_t = ::std::os::raw::c_uint;
    pub type u_int64_t = ::std::os::raw::c_ulong;
    pub type register_t = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __sigset_t {
        pub __val: [::std::os::raw::c_ulong; 16usize],
    }
    #[test]
    fn bindgen_test_layout___sigset_t() {
        assert_eq!(
            ::std::mem::size_of::<__sigset_t>(),
            128usize,
            concat!("Size of: ", stringify!(__sigset_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__sigset_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__sigset_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigset_t),
                "::",
                stringify!(__val)
            )
        );
    }
    pub type sigset_t = root::__sigset_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: root::__time_t,
        pub tv_usec: root::__suseconds_t,
    }
    #[test]
    fn bindgen_test_layout_timeval() {
        assert_eq!(
            ::std::mem::size_of::<timeval>(),
            16usize,
            concat!("Size of: ", stringify!(timeval))
        );
        assert_eq!(
            ::std::mem::align_of::<timeval>(),
            8usize,
            concat!("Alignment of ", stringify!(timeval))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_sec)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_usec)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: root::__time_t,
        pub tv_nsec: root::__syscall_slong_t,
    }
    #[test]
    fn bindgen_test_layout_timespec() {
        assert_eq!(
            ::std::mem::size_of::<timespec>(),
            16usize,
            concat!("Size of: ", stringify!(timespec))
        );
        assert_eq!(
            ::std::mem::align_of::<timespec>(),
            8usize,
            concat!("Alignment of ", stringify!(timespec))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_sec)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_nsec)
            )
        );
    }
    pub type __fd_mask = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct fd_set {
        pub fds_bits: [root::__fd_mask; 16usize],
    }
    #[test]
    fn bindgen_test_layout_fd_set() {
        assert_eq!(
            ::std::mem::size_of::<fd_set>(),
            128usize,
            concat!("Size of: ", stringify!(fd_set))
        );
        assert_eq!(
            ::std::mem::align_of::<fd_set>(),
            8usize,
            concat!("Alignment of ", stringify!(fd_set))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fd_set),
                "::",
                stringify!(fds_bits)
            )
        );
    }
    pub type fd_mask = root::__fd_mask;
    extern "C" {
        pub fn select(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *mut root::timeval,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pselect(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut root::fd_set,
            __writefds: *mut root::fd_set,
            __exceptfds: *mut root::fd_set,
            __timeout: *const root::timespec,
            __sigmask: *const root::__sigset_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn gnu_dev_major(__dev: root::__dev_t) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn gnu_dev_minor(__dev: root::__dev_t) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn gnu_dev_makedev(
            __major: ::std::os::raw::c_uint,
            __minor: ::std::os::raw::c_uint,
        ) -> root::__dev_t;
    }
    pub type blksize_t = root::__blksize_t;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub type blkcnt64_t = root::__blkcnt64_t;
    pub type fsblkcnt64_t = root::__fsblkcnt64_t;
    pub type fsfilcnt64_t = root::__fsfilcnt64_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_rwlock_arch_t {
        pub __readers: ::std::os::raw::c_uint,
        pub __writers: ::std::os::raw::c_uint,
        pub __wrphase_futex: ::std::os::raw::c_uint,
        pub __writers_futex: ::std::os::raw::c_uint,
        pub __pad3: ::std::os::raw::c_uint,
        pub __pad4: ::std::os::raw::c_uint,
        pub __cur_writer: ::std::os::raw::c_int,
        pub __shared: ::std::os::raw::c_int,
        pub __rwelision: ::std::os::raw::c_schar,
        pub __pad1: [::std::os::raw::c_uchar; 7usize],
        pub __pad2: ::std::os::raw::c_ulong,
        pub __flags: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_rwlock_arch_t() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
            56usize,
            concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__readers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _
                    as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__wrphase_futex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _
                    as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers_futex)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad3)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad4)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _
                    as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__cur_writer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__shared)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__rwelision)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__flags)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    #[test]
    fn bindgen_test_layout___pthread_internal_list() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_internal_list>(),
            16usize,
            concat!("Size of: ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_internal_list>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__prev)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__next)
            )
        );
    }
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_mutex_s {
        pub __lock: ::std::os::raw::c_int,
        pub __count: ::std::os::raw::c_uint,
        pub __owner: ::std::os::raw::c_int,
        pub __nusers: ::std::os::raw::c_uint,
        pub __kind: ::std::os::raw::c_int,
        pub __spins: ::std::os::raw::c_short,
        pub __elision: ::std::os::raw::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[test]
    fn bindgen_test_layout___pthread_mutex_s() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_mutex_s>(),
            40usize,
            concat!("Size of: ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_mutex_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__lock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__nusers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__kind)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__spins)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__elision)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__list)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __pthread_cond_s {
        pub __bindgen_anon_1: root::__pthread_cond_s__bindgen_ty_1,
        pub __bindgen_anon_2: root::__pthread_cond_s__bindgen_ty_2,
        pub __g_refs: [::std::os::raw::c_uint; 2usize],
        pub __g_size: [::std::os::raw::c_uint; 2usize],
        pub __g1_orig_size: ::std::os::raw::c_uint,
        pub __wrefs: ::std::os::raw::c_uint,
        pub __g_signals: [::std::os::raw::c_uint; 2usize],
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_1 {
        pub __wseq: ::std::os::raw::c_ulonglong,
        pub __wseq32: root::__pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
        pub __low: ::std::os::raw::c_uint,
        pub __high: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                    as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1),
                "::",
                stringify!(__wseq)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1),
                "::",
                stringify!(__wseq32)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __pthread_cond_s__bindgen_ty_2 {
        pub __g1_start: ::std::os::raw::c_ulonglong,
        pub __g1_start32: root::__pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
        pub __low: ::std::os::raw::c_uint,
        pub __high: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
            8usize,
            concat!(
                "Size of: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
            4usize,
            concat!(
                "Alignment of ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                    as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                    as *const _ as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
            8usize,
            concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2),
                "::",
                stringify!(__g1_start)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2),
                "::",
                stringify!(__g1_start32)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___pthread_cond_s() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_cond_s>(),
            48usize,
            concat!("Size of: ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_cond_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_cond_s))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_refs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_orig_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wrefs)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_signals)
            )
        );
    }
    pub type pthread_t = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutexattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_mutexattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_mutexattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_mutexattr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_condattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_condattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_condattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_condattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_condattr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    pub type pthread_key_t = ::std::os::raw::c_uint;
    pub type pthread_once_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_attr_t {
        pub __size: [::std::os::raw::c_char; 56usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 7usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_attr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_attr_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_attr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_attr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [::std::os::raw::c_char; 40usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 5usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_mutex_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_mutex_t>(),
            40usize,
            concat!("Size of: ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_mutex_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__align)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_cond_t {
        pub __data: root::__pthread_cond_s,
        pub __size: [::std::os::raw::c_char; 48usize],
        pub __align: ::std::os::raw::c_longlong,
        _bindgen_union_align: [u64; 6usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_cond_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_cond_t>(),
            48usize,
            concat!("Size of: ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_cond_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_cond_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__align)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlock_t {
        pub __data: root::__pthread_rwlock_arch_t,
        pub __size: [::std::os::raw::c_char; 56usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 7usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlock_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_rwlock_t>(),
            56usize,
            concat!("Size of: ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_rwlock_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlock_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__align)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_rwlockattr_t {
        pub __size: [::std::os::raw::c_char; 8usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: u64,
    }
    #[test]
    fn bindgen_test_layout_pthread_rwlockattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Size of: ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_rwlockattr_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    pub type pthread_spinlock_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrier_t {
        pub __size: [::std::os::raw::c_char; 32usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 4usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_barrier_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_barrier_t>(),
            32usize,
            concat!("Size of: ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_barrier_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_barrier_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__align)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_barrierattr_t {
        pub __size: [::std::os::raw::c_char; 4usize],
        pub __align: ::std::os::raw::c_int,
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout_pthread_barrierattr_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Size of: ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_barrierattr_t>(),
            4usize,
            concat!("Alignment of ", stringify!(pthread_barrierattr_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    extern "C" {
        pub fn random() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn srandom(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn initstate(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct random_data {
        pub fptr: *mut i32,
        pub rptr: *mut i32,
        pub state: *mut i32,
        pub rand_type: ::std::os::raw::c_int,
        pub rand_deg: ::std::os::raw::c_int,
        pub rand_sep: ::std::os::raw::c_int,
        pub end_ptr: *mut i32,
    }
    #[test]
    fn bindgen_test_layout_random_data() {
        assert_eq!(
            ::std::mem::size_of::<random_data>(),
            48usize,
            concat!("Size of: ", stringify!(random_data))
        );
        assert_eq!(
            ::std::mem::align_of::<random_data>(),
            8usize,
            concat!("Alignment of ", stringify!(random_data))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(fptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(state)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_type)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_deg)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_sep)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(end_ptr)
            )
        );
    }
    extern "C" {
        pub fn random_r(__buf: *mut root::random_data, __result: *mut i32)
        -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srandom_r(
            __seed: ::std::os::raw::c_uint,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn initstate_r(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: usize,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setstate_r(
            __statebuf: *mut ::std::os::raw::c_char,
            __buf: *mut root::random_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rand() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand(__seed: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn drand48() -> f64;
    }
    extern "C" {
        pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
    }
    extern "C" {
        pub fn lrand48() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn mrand48() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn srand48(__seedval: ::std::os::raw::c_long);
    }
    extern "C" {
        pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
    }
    extern "C" {
        pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct drand48_data {
        pub __x: [::std::os::raw::c_ushort; 3usize],
        pub __old_x: [::std::os::raw::c_ushort; 3usize],
        pub __c: ::std::os::raw::c_ushort,
        pub __init: ::std::os::raw::c_ushort,
        pub __a: ::std::os::raw::c_ulonglong,
    }
    #[test]
    fn bindgen_test_layout_drand48_data() {
        assert_eq!(
            ::std::mem::size_of::<drand48_data>(),
            24usize,
            concat!("Size of: ", stringify!(drand48_data))
        );
        assert_eq!(
            ::std::mem::align_of::<drand48_data>(),
            8usize,
            concat!("Alignment of ", stringify!(drand48_data))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__old_x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__c)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__init)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__a)
            )
        );
    }
    extern "C" {
        pub fn drand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn erand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn nrand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mrand48_r(
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn jrand48_r(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand48_r(
            __seedval: ::std::os::raw::c_long,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn seed48_r(
            __seed16v: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lcong48_r(
            __param: *mut ::std::os::raw::c_ushort,
            __buffer: *mut root::drand48_data,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn realloc(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn reallocarray(
            __ptr: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn free(__ptr: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn posix_memalign(
            __memptr: *mut *mut ::std::os::raw::c_void,
            __alignment: usize,
            __size: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn abort();
    }
    extern "C" {
        pub fn atexit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn at_quick_exit(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn on_exit(
            __func: ::std::option::Option<
                unsafe extern "C" fn(
                    __status: ::std::os::raw::c_int,
                    __arg: *mut ::std::os::raw::c_void,
                ),
            >,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn quick_exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn _Exit(__status: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setenv(
            __name: *const ::std::os::raw::c_char,
            __value: *const ::std::os::raw::c_char,
            __replace: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearenv() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemps(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkstemps64(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn mkostemp(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemp64(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemps(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkostemps64(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn canonicalize_file_name(
            __name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn realpath(
            __name: *const ::std::os::raw::c_char,
            __resolved: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    pub type __compar_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    pub type comparison_fn_t = root::__compar_fn_t;
    pub type __compar_d_fn_t = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
    extern "C" {
        pub fn bsearch(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_fn_t,
        );
    }
    extern "C" {
        pub fn qsort_r(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: root::__compar_d_fn_t,
            __arg: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> root::div_t;
    }
    extern "C" {
        pub fn ldiv(
            __numer: ::std::os::raw::c_long,
            __denom: ::std::os::raw::c_long,
        ) -> root::ldiv_t;
    }
    extern "C" {
        pub fn lldiv(
            __numer: ::std::os::raw::c_longlong,
            __denom: ::std::os::raw::c_longlong,
        ) -> root::lldiv_t;
    }
    extern "C" {
        pub fn ecvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn gcvt(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qecvt(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qfcvt(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn qgcvt(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ecvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fcvt_r(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn qecvt_r(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn qfcvt_r(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbtowc(
            __pwc: *mut u32,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
    }
    extern "C" {
        pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: usize) -> usize;
    }
    extern "C" {
        pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getsubopt(
            __optionp: *mut *mut ::std::os::raw::c_char,
            __tokens: *const *mut ::std::os::raw::c_char,
            __valuep: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setkey(__key: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ptsname_r(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getpt() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getloadavg(
            __loadavg: *mut f64,
            __nelem: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    pub type __FILE = root::_IO_FILE;
    pub type FILE = root::_IO_FILE;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __mbstate_t {
        pub __count: ::std::os::raw::c_int,
        pub __value: root::__mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t__bindgen_ty_1 {
        pub __wch: ::std::os::raw::c_uint,
        pub __wchb: [::std::os::raw::c_char; 4usize],
        _bindgen_union_align: u32,
    }
    #[test]
    fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t__bindgen_ty_1),
                "::",
                stringify!(__wchb)
            )
        );
    }
    #[test]
    fn bindgen_test_layout___mbstate_t() {
        assert_eq!(
            ::std::mem::size_of::<__mbstate_t>(),
            8usize,
            concat!("Size of: ", stringify!(__mbstate_t))
        );
        assert_eq!(
            ::std::mem::align_of::<__mbstate_t>(),
            4usize,
            concat!("Alignment of ", stringify!(__mbstate_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__value)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos_t {
        pub __pos: root::__off_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos_t),
                "::",
                stringify!(__state)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _G_fpos64_t {
        pub __pos: root::__off64_t,
        pub __state: root::__mbstate_t,
    }
    #[test]
    fn bindgen_test_layout__G_fpos64_t() {
        assert_eq!(
            ::std::mem::size_of::<_G_fpos64_t>(),
            16usize,
            concat!("Size of: ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_G_fpos64_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_G_fpos64_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_G_fpos64_t),
                "::",
                stringify!(__state)
            )
        );
    }
    pub type va_list = root::__builtin_va_list;
    pub type __gnuc_va_list = root::__builtin_va_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_jump_t {
        _unused: [u8; 0],
    }
    pub type _IO_lock_t = ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_marker {
        pub _next: *mut root::_IO_marker,
        pub _sbuf: *mut root::_IO_FILE,
        pub _pos: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout__IO_marker() {
        assert_eq!(
            ::std::mem::size_of::<_IO_marker>(),
            24usize,
            concat!("Size of: ", stringify!(_IO_marker))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_marker>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_marker))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_marker),
                "::",
                stringify!(_next)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_marker),
                "::",
                stringify!(_sbuf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_marker),
                "::",
                stringify!(_pos)
            )
        );
    }
    pub const __codecvt_result___codecvt_ok: root::__codecvt_result = 0;
    pub const __codecvt_result___codecvt_partial: root::__codecvt_result = 1;
    pub const __codecvt_result___codecvt_error: root::__codecvt_result = 2;
    pub const __codecvt_result___codecvt_noconv: root::__codecvt_result = 3;
    pub type __codecvt_result = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_FILE {
        pub _flags: ::std::os::raw::c_int,
        pub _IO_read_ptr: *mut ::std::os::raw::c_char,
        pub _IO_read_end: *mut ::std::os::raw::c_char,
        pub _IO_read_base: *mut ::std::os::raw::c_char,
        pub _IO_write_base: *mut ::std::os::raw::c_char,
        pub _IO_write_ptr: *mut ::std::os::raw::c_char,
        pub _IO_write_end: *mut ::std::os::raw::c_char,
        pub _IO_buf_base: *mut ::std::os::raw::c_char,
        pub _IO_buf_end: *mut ::std::os::raw::c_char,
        pub _IO_save_base: *mut ::std::os::raw::c_char,
        pub _IO_backup_base: *mut ::std::os::raw::c_char,
        pub _IO_save_end: *mut ::std::os::raw::c_char,
        pub _markers: *mut root::_IO_marker,
        pub _chain: *mut root::_IO_FILE,
        pub _fileno: ::std::os::raw::c_int,
        pub _flags2: ::std::os::raw::c_int,
        pub _old_offset: root::__off_t,
        pub _cur_column: ::std::os::raw::c_ushort,
        pub _vtable_offset: ::std::os::raw::c_schar,
        pub _shortbuf: [::std::os::raw::c_char; 1usize],
        pub _lock: *mut root::_IO_lock_t,
        pub _offset: root::__off64_t,
        pub __pad1: *mut ::std::os::raw::c_void,
        pub __pad2: *mut ::std::os::raw::c_void,
        pub __pad3: *mut ::std::os::raw::c_void,
        pub __pad4: *mut ::std::os::raw::c_void,
        pub __pad5: usize,
        pub _mode: ::std::os::raw::c_int,
        pub _unused2: [::std::os::raw::c_char; 20usize],
    }
    #[test]
    fn bindgen_test_layout__IO_FILE() {
        assert_eq!(
            ::std::mem::size_of::<_IO_FILE>(),
            216usize,
            concat!("Size of: ", stringify!(_IO_FILE))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_FILE>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_FILE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_read_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_ptr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_write_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_buf_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_backup_base)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_IO_save_end)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_markers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_chain)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_fileno)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_flags2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_old_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_cur_column)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_vtable_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
            131usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_shortbuf)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_lock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad1)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad3)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad4)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(__pad5)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_mode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_FILE),
                "::",
                stringify!(_unused2)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_FILE_plus {
        _unused: [u8; 0],
    }
    extern "C" {
        pub static mut _IO_2_1_stdin_: root::_IO_FILE_plus;
    }
    extern "C" {
        pub static mut _IO_2_1_stdout_: root::_IO_FILE_plus;
    }
    extern "C" {
        pub static mut _IO_2_1_stderr_: root::_IO_FILE_plus;
    }
    pub type __io_read_fn = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __buf: *mut ::std::os::raw::c_char,
            __nbytes: usize,
        ) -> root::__ssize_t,
    >;
    pub type __io_write_fn = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __buf: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> root::__ssize_t,
    >;
    pub type __io_seek_fn = ::std::option::Option<
        unsafe extern "C" fn(
            __cookie: *mut ::std::os::raw::c_void,
            __pos: *mut root::__off64_t,
            __w: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
    pub type __io_close_fn = ::std::option::Option<
        unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >;
    pub type cookie_read_function_t = root::__io_read_fn;
    pub type cookie_write_function_t = root::__io_write_fn;
    pub type cookie_seek_function_t = root::__io_seek_fn;
    pub type cookie_close_function_t = root::__io_close_fn;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_cookie_io_functions_t {
        pub read: root::__io_read_fn,
        pub write: root::__io_write_fn,
        pub seek: root::__io_seek_fn,
        pub close: root::__io_close_fn,
    }
    #[test]
    fn bindgen_test_layout__IO_cookie_io_functions_t() {
        assert_eq!(
            ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
            32usize,
            concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
        );
        assert_eq!(
            ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
            8usize,
            concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).read as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(read)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).write as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(write)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).seek as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(seek)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).close as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_IO_cookie_io_functions_t),
                "::",
                stringify!(close)
            )
        );
    }
    pub type cookie_io_functions_t = root::_IO_cookie_io_functions_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _IO_cookie_file {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn _IO_cookie_init(
            __cfile: *mut root::_IO_cookie_file,
            __read_write: ::std::os::raw::c_int,
            __cookie: *mut ::std::os::raw::c_void,
            __fns: root::_IO_cookie_io_functions_t,
        );
    }
    extern "C" {
        pub fn __underflow(arg1: *mut root::_IO_FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __uflow(arg1: *mut root::_IO_FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __overflow(
            arg1: *mut root::_IO_FILE,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_getc(__fp: *mut root::_IO_FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_putc(
            __c: ::std::os::raw::c_int,
            __fp: *mut root::_IO_FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_feof(__fp: *mut root::_IO_FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_ferror(__fp: *mut root::_IO_FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_peekc_locked(__fp: *mut root::_IO_FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_flockfile(arg1: *mut root::_IO_FILE);
    }
    extern "C" {
        pub fn _IO_funlockfile(arg1: *mut root::_IO_FILE);
    }
    extern "C" {
        pub fn _IO_ftrylockfile(arg1: *mut root::_IO_FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_vfscanf(
            arg1: *mut root::_IO_FILE,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut root::__va_list_tag,
            arg4: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_vfprintf(
            arg1: *mut root::_IO_FILE,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _IO_padn(
            arg1: *mut root::_IO_FILE,
            arg2: ::std::os::raw::c_int,
            arg3: root::__ssize_t,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn _IO_sgetn(
            arg1: *mut root::_IO_FILE,
            arg2: *mut ::std::os::raw::c_void,
            arg3: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn _IO_seekoff(
            arg1: *mut root::_IO_FILE,
            arg2: root::__off64_t,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
        ) -> root::__off64_t;
    }
    extern "C" {
        pub fn _IO_seekpos(
            arg1: *mut root::_IO_FILE,
            arg2: root::__off64_t,
            arg3: ::std::os::raw::c_int,
        ) -> root::__off64_t;
    }
    extern "C" {
        pub fn _IO_free_backup_area(arg1: *mut root::_IO_FILE);
    }
    pub type fpos_t = root::_G_fpos_t;
    pub type fpos64_t = root::_G_fpos64_t;
    extern "C" {
        pub static mut stdin: *mut root::_IO_FILE;
    }
    extern "C" {
        pub static mut stdout: *mut root::_IO_FILE;
    }
    extern "C" {
        pub static mut stderr: *mut root::_IO_FILE;
    }
    extern "C" {
        pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rename(
            __old: *const ::std::os::raw::c_char,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn renameat(
            __oldfd: ::std::os::raw::c_int,
            __old: *const ::std::os::raw::c_char,
            __newfd: ::std::os::raw::c_int,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tmpfile() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpfile64() -> *mut root::FILE;
    }
    extern "C" {
        pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn tempnam(
            __dir: *const ::std::os::raw::c_char,
            __pfx: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fclose(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fflush_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fcloseall() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fopen64(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn freopen64(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fdopen(
            __fd: ::std::os::raw::c_int,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fopencookie(
            __magic_cookie: *mut ::std::os::raw::c_void,
            __modes: *const ::std::os::raw::c_char,
            __io_funcs: root::_IO_cookie_io_functions_t,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn fmemopen(
            __s: *mut ::std::os::raw::c_void,
            __len: usize,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn open_memstream(
            __bufloc: *mut *mut ::std::os::raw::c_char,
            __sizeloc: *mut usize,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn setbuf(__stream: *mut root::FILE, __buf: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn setvbuf(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
            __modes: ::std::os::raw::c_int,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setbuffer(
            __stream: *mut root::FILE,
            __buf: *mut ::std::os::raw::c_char,
            __size: usize,
        );
    }
    extern "C" {
        pub fn setlinebuf(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fprintf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfprintf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vprintf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsprintf(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn snprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: usize,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsnprintf(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: usize,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vasprintf(
            __ptr: *mut *mut ::std::os::raw::c_char,
            __f: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __asprintf(
            __ptr: *mut *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn asprintf(
            __ptr: *mut *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vdprintf(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn dprintf(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fscanf(
            __stream: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vfscanf(
            __s: *mut root::FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vscanf(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vsscanf(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getc_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgetc_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut root::FILE)
        -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fputc_unlocked(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putc_unlocked(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getw(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut root::FILE)
        -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fgets(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fgets_unlocked(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __getdelim(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getdelim(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn getline(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __stream: *mut root::FILE,
        ) -> root::__ssize_t;
    }
    extern "C" {
        pub fn fputs(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ungetc(
            __c: ::std::os::raw::c_int,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fwrite(
            __ptr: *const ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __s: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fputs_unlocked(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut root::FILE,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fread_unlocked(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fwrite_unlocked(
            __ptr: *const ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut root::FILE,
        ) -> usize;
    }
    extern "C" {
        pub fn fseek(
            __stream: *mut root::FILE,
            __off: ::std::os::raw::c_long,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftell(__stream: *mut root::FILE) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn rewind(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn fseeko(
            __stream: *mut root::FILE,
            __off: root::__off_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftello(__stream: *mut root::FILE) -> root::__off_t;
    }
    extern "C" {
        pub fn fgetpos(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos(
            __stream: *mut root::FILE,
            __pos: *const root::fpos_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fseeko64(
            __stream: *mut root::FILE,
            __off: root::__off64_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftello64(__stream: *mut root::FILE) -> root::__off64_t;
    }
    extern "C" {
        pub fn fgetpos64(
            __stream: *mut root::FILE,
            __pos: *mut root::fpos64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fsetpos64(
            __stream: *mut root::FILE,
            __pos: *const root::fpos64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clearerr_unlocked(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn feof_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ferror_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn perror(__s: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub static mut sys_nerr: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    }
    extern "C" {
        pub static mut _sys_nerr: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut _sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    }
    extern "C" {
        pub fn fileno(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fileno_unlocked(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn popen(
            __command: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut root::FILE;
    }
    extern "C" {
        pub fn pclose(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct obstack {
        _unused: [u8; 0],
    }
    extern "C" {
        pub fn obstack_printf(
            __obstack: *mut root::obstack,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn obstack_vprintf(
            __obstack: *mut root::obstack,
            __format: *const ::std::os::raw::c_char,
            __args: *mut root::__va_list_tag,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn flockfile(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn ftrylockfile(__stream: *mut root::FILE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn funlockfile(__stream: *mut root::FILE);
    }
    extern "C" {
        pub fn memcpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memmove(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memccpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memset(
            __s: *mut ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memcmp(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn memchr(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn rawmemchr(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memrchr(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn strcpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcat(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncat(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcoll(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strxfrm(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn strcoll_l(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __l: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strxfrm_l(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
            __l: root::locale_t,
        ) -> usize;
    }
    extern "C" {
        pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strndup(
            __string: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strrchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strchrnul(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcspn(
            __s: *const ::std::os::raw::c_char,
            __reject: *const ::std::os::raw::c_char,
        ) -> usize;
    }
    extern "C" {
        pub fn strspn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> usize;
    }
    extern "C" {
        pub fn strpbrk(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strstr(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strtok(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __strtok_r(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strtok_r(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcasestr(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn memmem(
            __haystack: *const ::std::os::raw::c_void,
            __haystacklen: usize,
            __needle: *const ::std::os::raw::c_void,
            __needlelen: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn __mempcpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn mempcpy(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn strlen(__s: *const ::std::os::raw::c_char) -> usize;
    }
    extern "C" {
        pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
    }
    extern "C" {
        pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strerror_r(
            __errnum: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strerror_l(
            __errnum: ::std::os::raw::c_int,
            __l: root::locale_t,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn bcmp(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn bcopy(
            __src: *const ::std::os::raw::c_void,
            __dest: *mut ::std::os::raw::c_void,
            __n: usize,
        );
    }
    extern "C" {
        pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
    }
    extern "C" {
        pub fn index(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn rindex(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcasecmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncasecmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcasecmp_l(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncasecmp_l(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
            __loc: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
    }
    extern "C" {
        pub fn strsep(
            __stringp: *mut *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __stpcpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn stpcpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __stpncpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn stpncpy(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strverscmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: usize)
        -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn basename(__filename: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    pub type socklen_t = root::__socklen_t;
    extern "C" {
        pub fn access(
            __name: *const ::std::os::raw::c_char,
            __type: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn euidaccess(
            __name: *const ::std::os::raw::c_char,
            __type: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn eaccess(
            __name: *const ::std::os::raw::c_char,
            __type: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn faccessat(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __type: ::std::os::raw::c_int,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lseek(
            __fd: ::std::os::raw::c_int,
            __offset: root::__off_t,
            __whence: ::std::os::raw::c_int,
        ) -> root::__off_t;
    }
    extern "C" {
        pub fn lseek64(
            __fd: ::std::os::raw::c_int,
            __offset: root::__off64_t,
            __whence: ::std::os::raw::c_int,
        ) -> root::__off64_t;
    }
    extern "C" {
        pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn read(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __nbytes: usize,
        ) -> isize;
    }
    extern "C" {
        pub fn write(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> isize;
    }
    extern "C" {
        pub fn pread(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __nbytes: usize,
            __offset: root::__off_t,
        ) -> isize;
    }
    extern "C" {
        pub fn pwrite(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
            __offset: root::__off_t,
        ) -> isize;
    }
    extern "C" {
        pub fn pread64(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __nbytes: usize,
            __offset: root::__off64_t,
        ) -> isize;
    }
    extern "C" {
        pub fn pwrite64(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
            __offset: root::__off64_t,
        ) -> isize;
    }
    extern "C" {
        pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pipe2(
            __pipedes: *mut ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        pub fn ualarm(
            __value: root::__useconds_t,
            __interval: root::__useconds_t,
        ) -> root::__useconds_t;
    }
    extern "C" {
        pub fn usleep(__useconds: root::__useconds_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pause() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn chown(
            __file: *const ::std::os::raw::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fchown(
            __fd: ::std::os::raw::c_int,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lchown(
            __file: *const ::std::os::raw::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fchownat(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __owner: root::__uid_t,
            __group: root::__gid_t,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getcwd(
            __buf: *mut ::std::os::raw::c_char,
            __size: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn get_current_dir_name() -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn dup2(
            __fd: ::std::os::raw::c_int,
            __fd2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn dup3(
            __fd: ::std::os::raw::c_int,
            __fd2: ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut __environ: *mut *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub static mut environ: *mut *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn execve(
            __path: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
            __envp: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fexecve(
            __fd: ::std::os::raw::c_int,
            __argv: *const *mut ::std::os::raw::c_char,
            __envp: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execv(
            __path: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execle(
            __path: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execl(
            __path: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execvp(
            __file: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execlp(
            __file: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn execvpe(
            __file: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
            __envp: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _exit(__status: ::std::os::raw::c_int);
    }
    pub const _PC_LINK_MAX: root::_bindgen_ty_1 = 0;
    pub const _PC_MAX_CANON: root::_bindgen_ty_1 = 1;
    pub const _PC_MAX_INPUT: root::_bindgen_ty_1 = 2;
    pub const _PC_NAME_MAX: root::_bindgen_ty_1 = 3;
    pub const _PC_PATH_MAX: root::_bindgen_ty_1 = 4;
    pub const _PC_PIPE_BUF: root::_bindgen_ty_1 = 5;
    pub const _PC_CHOWN_RESTRICTED: root::_bindgen_ty_1 = 6;
    pub const _PC_NO_TRUNC: root::_bindgen_ty_1 = 7;
    pub const _PC_VDISABLE: root::_bindgen_ty_1 = 8;
    pub const _PC_SYNC_IO: root::_bindgen_ty_1 = 9;
    pub const _PC_ASYNC_IO: root::_bindgen_ty_1 = 10;
    pub const _PC_PRIO_IO: root::_bindgen_ty_1 = 11;
    pub const _PC_SOCK_MAXBUF: root::_bindgen_ty_1 = 12;
    pub const _PC_FILESIZEBITS: root::_bindgen_ty_1 = 13;
    pub const _PC_REC_INCR_XFER_SIZE: root::_bindgen_ty_1 = 14;
    pub const _PC_REC_MAX_XFER_SIZE: root::_bindgen_ty_1 = 15;
    pub const _PC_REC_MIN_XFER_SIZE: root::_bindgen_ty_1 = 16;
    pub const _PC_REC_XFER_ALIGN: root::_bindgen_ty_1 = 17;
    pub const _PC_ALLOC_SIZE_MIN: root::_bindgen_ty_1 = 18;
    pub const _PC_SYMLINK_MAX: root::_bindgen_ty_1 = 19;
    pub const _PC_2_SYMLINKS: root::_bindgen_ty_1 = 20;
    pub type _bindgen_ty_1 = u32;
    pub const _SC_ARG_MAX: root::_bindgen_ty_2 = 0;
    pub const _SC_CHILD_MAX: root::_bindgen_ty_2 = 1;
    pub const _SC_CLK_TCK: root::_bindgen_ty_2 = 2;
    pub const _SC_NGROUPS_MAX: root::_bindgen_ty_2 = 3;
    pub const _SC_OPEN_MAX: root::_bindgen_ty_2 = 4;
    pub const _SC_STREAM_MAX: root::_bindgen_ty_2 = 5;
    pub const _SC_TZNAME_MAX: root::_bindgen_ty_2 = 6;
    pub const _SC_JOB_CONTROL: root::_bindgen_ty_2 = 7;
    pub const _SC_SAVED_IDS: root::_bindgen_ty_2 = 8;
    pub const _SC_REALTIME_SIGNALS: root::_bindgen_ty_2 = 9;
    pub const _SC_PRIORITY_SCHEDULING: root::_bindgen_ty_2 = 10;
    pub const _SC_TIMERS: root::_bindgen_ty_2 = 11;
    pub const _SC_ASYNCHRONOUS_IO: root::_bindgen_ty_2 = 12;
    pub const _SC_PRIORITIZED_IO: root::_bindgen_ty_2 = 13;
    pub const _SC_SYNCHRONIZED_IO: root::_bindgen_ty_2 = 14;
    pub const _SC_FSYNC: root::_bindgen_ty_2 = 15;
    pub const _SC_MAPPED_FILES: root::_bindgen_ty_2 = 16;
    pub const _SC_MEMLOCK: root::_bindgen_ty_2 = 17;
    pub const _SC_MEMLOCK_RANGE: root::_bindgen_ty_2 = 18;
    pub const _SC_MEMORY_PROTECTION: root::_bindgen_ty_2 = 19;
    pub const _SC_MESSAGE_PASSING: root::_bindgen_ty_2 = 20;
    pub const _SC_SEMAPHORES: root::_bindgen_ty_2 = 21;
    pub const _SC_SHARED_MEMORY_OBJECTS: root::_bindgen_ty_2 = 22;
    pub const _SC_AIO_LISTIO_MAX: root::_bindgen_ty_2 = 23;
    pub const _SC_AIO_MAX: root::_bindgen_ty_2 = 24;
    pub const _SC_AIO_PRIO_DELTA_MAX: root::_bindgen_ty_2 = 25;
    pub const _SC_DELAYTIMER_MAX: root::_bindgen_ty_2 = 26;
    pub const _SC_MQ_OPEN_MAX: root::_bindgen_ty_2 = 27;
    pub const _SC_MQ_PRIO_MAX: root::_bindgen_ty_2 = 28;
    pub const _SC_VERSION: root::_bindgen_ty_2 = 29;
    pub const _SC_PAGESIZE: root::_bindgen_ty_2 = 30;
    pub const _SC_RTSIG_MAX: root::_bindgen_ty_2 = 31;
    pub const _SC_SEM_NSEMS_MAX: root::_bindgen_ty_2 = 32;
    pub const _SC_SEM_VALUE_MAX: root::_bindgen_ty_2 = 33;
    pub const _SC_SIGQUEUE_MAX: root::_bindgen_ty_2 = 34;
    pub const _SC_TIMER_MAX: root::_bindgen_ty_2 = 35;
    pub const _SC_BC_BASE_MAX: root::_bindgen_ty_2 = 36;
    pub const _SC_BC_DIM_MAX: root::_bindgen_ty_2 = 37;
    pub const _SC_BC_SCALE_MAX: root::_bindgen_ty_2 = 38;
    pub const _SC_BC_STRING_MAX: root::_bindgen_ty_2 = 39;
    pub const _SC_COLL_WEIGHTS_MAX: root::_bindgen_ty_2 = 40;
    pub const _SC_EQUIV_CLASS_MAX: root::_bindgen_ty_2 = 41;
    pub const _SC_EXPR_NEST_MAX: root::_bindgen_ty_2 = 42;
    pub const _SC_LINE_MAX: root::_bindgen_ty_2 = 43;
    pub const _SC_RE_DUP_MAX: root::_bindgen_ty_2 = 44;
    pub const _SC_CHARCLASS_NAME_MAX: root::_bindgen_ty_2 = 45;
    pub const _SC_2_VERSION: root::_bindgen_ty_2 = 46;
    pub const _SC_2_C_BIND: root::_bindgen_ty_2 = 47;
    pub const _SC_2_C_DEV: root::_bindgen_ty_2 = 48;
    pub const _SC_2_FORT_DEV: root::_bindgen_ty_2 = 49;
    pub const _SC_2_FORT_RUN: root::_bindgen_ty_2 = 50;
    pub const _SC_2_SW_DEV: root::_bindgen_ty_2 = 51;
    pub const _SC_2_LOCALEDEF: root::_bindgen_ty_2 = 52;
    pub const _SC_PII: root::_bindgen_ty_2 = 53;
    pub const _SC_PII_XTI: root::_bindgen_ty_2 = 54;
    pub const _SC_PII_SOCKET: root::_bindgen_ty_2 = 55;
    pub const _SC_PII_INTERNET: root::_bindgen_ty_2 = 56;
    pub const _SC_PII_OSI: root::_bindgen_ty_2 = 57;
    pub const _SC_POLL: root::_bindgen_ty_2 = 58;
    pub const _SC_SELECT: root::_bindgen_ty_2 = 59;
    pub const _SC_UIO_MAXIOV: root::_bindgen_ty_2 = 60;
    pub const _SC_IOV_MAX: root::_bindgen_ty_2 = 60;
    pub const _SC_PII_INTERNET_STREAM: root::_bindgen_ty_2 = 61;
    pub const _SC_PII_INTERNET_DGRAM: root::_bindgen_ty_2 = 62;
    pub const _SC_PII_OSI_COTS: root::_bindgen_ty_2 = 63;
    pub const _SC_PII_OSI_CLTS: root::_bindgen_ty_2 = 64;
    pub const _SC_PII_OSI_M: root::_bindgen_ty_2 = 65;
    pub const _SC_T_IOV_MAX: root::_bindgen_ty_2 = 66;
    pub const _SC_THREADS: root::_bindgen_ty_2 = 67;
    pub const _SC_THREAD_SAFE_FUNCTIONS: root::_bindgen_ty_2 = 68;
    pub const _SC_GETGR_R_SIZE_MAX: root::_bindgen_ty_2 = 69;
    pub const _SC_GETPW_R_SIZE_MAX: root::_bindgen_ty_2 = 70;
    pub const _SC_LOGIN_NAME_MAX: root::_bindgen_ty_2 = 71;
    pub const _SC_TTY_NAME_MAX: root::_bindgen_ty_2 = 72;
    pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: root::_bindgen_ty_2 = 73;
    pub const _SC_THREAD_KEYS_MAX: root::_bindgen_ty_2 = 74;
    pub const _SC_THREAD_STACK_MIN: root::_bindgen_ty_2 = 75;
    pub const _SC_THREAD_THREADS_MAX: root::_bindgen_ty_2 = 76;
    pub const _SC_THREAD_ATTR_STACKADDR: root::_bindgen_ty_2 = 77;
    pub const _SC_THREAD_ATTR_STACKSIZE: root::_bindgen_ty_2 = 78;
    pub const _SC_THREAD_PRIORITY_SCHEDULING: root::_bindgen_ty_2 = 79;
    pub const _SC_THREAD_PRIO_INHERIT: root::_bindgen_ty_2 = 80;
    pub const _SC_THREAD_PRIO_PROTECT: root::_bindgen_ty_2 = 81;
    pub const _SC_THREAD_PROCESS_SHARED: root::_bindgen_ty_2 = 82;
    pub const _SC_NPROCESSORS_CONF: root::_bindgen_ty_2 = 83;
    pub const _SC_NPROCESSORS_ONLN: root::_bindgen_ty_2 = 84;
    pub const _SC_PHYS_PAGES: root::_bindgen_ty_2 = 85;
    pub const _SC_AVPHYS_PAGES: root::_bindgen_ty_2 = 86;
    pub const _SC_ATEXIT_MAX: root::_bindgen_ty_2 = 87;
    pub const _SC_PASS_MAX: root::_bindgen_ty_2 = 88;
    pub const _SC_XOPEN_VERSION: root::_bindgen_ty_2 = 89;
    pub const _SC_XOPEN_XCU_VERSION: root::_bindgen_ty_2 = 90;
    pub const _SC_XOPEN_UNIX: root::_bindgen_ty_2 = 91;
    pub const _SC_XOPEN_CRYPT: root::_bindgen_ty_2 = 92;
    pub const _SC_XOPEN_ENH_I18N: root::_bindgen_ty_2 = 93;
    pub const _SC_XOPEN_SHM: root::_bindgen_ty_2 = 94;
    pub const _SC_2_CHAR_TERM: root::_bindgen_ty_2 = 95;
    pub const _SC_2_C_VERSION: root::_bindgen_ty_2 = 96;
    pub const _SC_2_UPE: root::_bindgen_ty_2 = 97;
    pub const _SC_XOPEN_XPG2: root::_bindgen_ty_2 = 98;
    pub const _SC_XOPEN_XPG3: root::_bindgen_ty_2 = 99;
    pub const _SC_XOPEN_XPG4: root::_bindgen_ty_2 = 100;
    pub const _SC_CHAR_BIT: root::_bindgen_ty_2 = 101;
    pub const _SC_CHAR_MAX: root::_bindgen_ty_2 = 102;
    pub const _SC_CHAR_MIN: root::_bindgen_ty_2 = 103;
    pub const _SC_INT_MAX: root::_bindgen_ty_2 = 104;
    pub const _SC_INT_MIN: root::_bindgen_ty_2 = 105;
    pub const _SC_LONG_BIT: root::_bindgen_ty_2 = 106;
    pub const _SC_WORD_BIT: root::_bindgen_ty_2 = 107;
    pub const _SC_MB_LEN_MAX: root::_bindgen_ty_2 = 108;
    pub const _SC_NZERO: root::_bindgen_ty_2 = 109;
    pub const _SC_SSIZE_MAX: root::_bindgen_ty_2 = 110;
    pub const _SC_SCHAR_MAX: root::_bindgen_ty_2 = 111;
    pub const _SC_SCHAR_MIN: root::_bindgen_ty_2 = 112;
    pub const _SC_SHRT_MAX: root::_bindgen_ty_2 = 113;
    pub const _SC_SHRT_MIN: root::_bindgen_ty_2 = 114;
    pub const _SC_UCHAR_MAX: root::_bindgen_ty_2 = 115;
    pub const _SC_UINT_MAX: root::_bindgen_ty_2 = 116;
    pub const _SC_ULONG_MAX: root::_bindgen_ty_2 = 117;
    pub const _SC_USHRT_MAX: root::_bindgen_ty_2 = 118;
    pub const _SC_NL_ARGMAX: root::_bindgen_ty_2 = 119;
    pub const _SC_NL_LANGMAX: root::_bindgen_ty_2 = 120;
    pub const _SC_NL_MSGMAX: root::_bindgen_ty_2 = 121;
    pub const _SC_NL_NMAX: root::_bindgen_ty_2 = 122;
    pub const _SC_NL_SETMAX: root::_bindgen_ty_2 = 123;
    pub const _SC_NL_TEXTMAX: root::_bindgen_ty_2 = 124;
    pub const _SC_XBS5_ILP32_OFF32: root::_bindgen_ty_2 = 125;
    pub const _SC_XBS5_ILP32_OFFBIG: root::_bindgen_ty_2 = 126;
    pub const _SC_XBS5_LP64_OFF64: root::_bindgen_ty_2 = 127;
    pub const _SC_XBS5_LPBIG_OFFBIG: root::_bindgen_ty_2 = 128;
    pub const _SC_XOPEN_LEGACY: root::_bindgen_ty_2 = 129;
    pub const _SC_XOPEN_REALTIME: root::_bindgen_ty_2 = 130;
    pub const _SC_XOPEN_REALTIME_THREADS: root::_bindgen_ty_2 = 131;
    pub const _SC_ADVISORY_INFO: root::_bindgen_ty_2 = 132;
    pub const _SC_BARRIERS: root::_bindgen_ty_2 = 133;
    pub const _SC_BASE: root::_bindgen_ty_2 = 134;
    pub const _SC_C_LANG_SUPPORT: root::_bindgen_ty_2 = 135;
    pub const _SC_C_LANG_SUPPORT_R: root::_bindgen_ty_2 = 136;
    pub const _SC_CLOCK_SELECTION: root::_bindgen_ty_2 = 137;
    pub const _SC_CPUTIME: root::_bindgen_ty_2 = 138;
    pub const _SC_THREAD_CPUTIME: root::_bindgen_ty_2 = 139;
    pub const _SC_DEVICE_IO: root::_bindgen_ty_2 = 140;
    pub const _SC_DEVICE_SPECIFIC: root::_bindgen_ty_2 = 141;
    pub const _SC_DEVICE_SPECIFIC_R: root::_bindgen_ty_2 = 142;
    pub const _SC_FD_MGMT: root::_bindgen_ty_2 = 143;
    pub const _SC_FIFO: root::_bindgen_ty_2 = 144;
    pub const _SC_PIPE: root::_bindgen_ty_2 = 145;
    pub const _SC_FILE_ATTRIBUTES: root::_bindgen_ty_2 = 146;
    pub const _SC_FILE_LOCKING: root::_bindgen_ty_2 = 147;
    pub const _SC_FILE_SYSTEM: root::_bindgen_ty_2 = 148;
    pub const _SC_MONOTONIC_CLOCK: root::_bindgen_ty_2 = 149;
    pub const _SC_MULTI_PROCESS: root::_bindgen_ty_2 = 150;
    pub const _SC_SINGLE_PROCESS: root::_bindgen_ty_2 = 151;
    pub const _SC_NETWORKING: root::_bindgen_ty_2 = 152;
    pub const _SC_READER_WRITER_LOCKS: root::_bindgen_ty_2 = 153;
    pub const _SC_SPIN_LOCKS: root::_bindgen_ty_2 = 154;
    pub const _SC_REGEXP: root::_bindgen_ty_2 = 155;
    pub const _SC_REGEX_VERSION: root::_bindgen_ty_2 = 156;
    pub const _SC_SHELL: root::_bindgen_ty_2 = 157;
    pub const _SC_SIGNALS: root::_bindgen_ty_2 = 158;
    pub const _SC_SPAWN: root::_bindgen_ty_2 = 159;
    pub const _SC_SPORADIC_SERVER: root::_bindgen_ty_2 = 160;
    pub const _SC_THREAD_SPORADIC_SERVER: root::_bindgen_ty_2 = 161;
    pub const _SC_SYSTEM_DATABASE: root::_bindgen_ty_2 = 162;
    pub const _SC_SYSTEM_DATABASE_R: root::_bindgen_ty_2 = 163;
    pub const _SC_TIMEOUTS: root::_bindgen_ty_2 = 164;
    pub const _SC_TYPED_MEMORY_OBJECTS: root::_bindgen_ty_2 = 165;
    pub const _SC_USER_GROUPS: root::_bindgen_ty_2 = 166;
    pub const _SC_USER_GROUPS_R: root::_bindgen_ty_2 = 167;
    pub const _SC_2_PBS: root::_bindgen_ty_2 = 168;
    pub const _SC_2_PBS_ACCOUNTING: root::_bindgen_ty_2 = 169;
    pub const _SC_2_PBS_LOCATE: root::_bindgen_ty_2 = 170;
    pub const _SC_2_PBS_MESSAGE: root::_bindgen_ty_2 = 171;
    pub const _SC_2_PBS_TRACK: root::_bindgen_ty_2 = 172;
    pub const _SC_SYMLOOP_MAX: root::_bindgen_ty_2 = 173;
    pub const _SC_STREAMS: root::_bindgen_ty_2 = 174;
    pub const _SC_2_PBS_CHECKPOINT: root::_bindgen_ty_2 = 175;
    pub const _SC_V6_ILP32_OFF32: root::_bindgen_ty_2 = 176;
    pub const _SC_V6_ILP32_OFFBIG: root::_bindgen_ty_2 = 177;
    pub const _SC_V6_LP64_OFF64: root::_bindgen_ty_2 = 178;
    pub const _SC_V6_LPBIG_OFFBIG: root::_bindgen_ty_2 = 179;
    pub const _SC_HOST_NAME_MAX: root::_bindgen_ty_2 = 180;
    pub const _SC_TRACE: root::_bindgen_ty_2 = 181;
    pub const _SC_TRACE_EVENT_FILTER: root::_bindgen_ty_2 = 182;
    pub const _SC_TRACE_INHERIT: root::_bindgen_ty_2 = 183;
    pub const _SC_TRACE_LOG: root::_bindgen_ty_2 = 184;
    pub const _SC_LEVEL1_ICACHE_SIZE: root::_bindgen_ty_2 = 185;
    pub const _SC_LEVEL1_ICACHE_ASSOC: root::_bindgen_ty_2 = 186;
    pub const _SC_LEVEL1_ICACHE_LINESIZE: root::_bindgen_ty_2 = 187;
    pub const _SC_LEVEL1_DCACHE_SIZE: root::_bindgen_ty_2 = 188;
    pub const _SC_LEVEL1_DCACHE_ASSOC: root::_bindgen_ty_2 = 189;
    pub const _SC_LEVEL1_DCACHE_LINESIZE: root::_bindgen_ty_2 = 190;
    pub const _SC_LEVEL2_CACHE_SIZE: root::_bindgen_ty_2 = 191;
    pub const _SC_LEVEL2_CACHE_ASSOC: root::_bindgen_ty_2 = 192;
    pub const _SC_LEVEL2_CACHE_LINESIZE: root::_bindgen_ty_2 = 193;
    pub const _SC_LEVEL3_CACHE_SIZE: root::_bindgen_ty_2 = 194;
    pub const _SC_LEVEL3_CACHE_ASSOC: root::_bindgen_ty_2 = 195;
    pub const _SC_LEVEL3_CACHE_LINESIZE: root::_bindgen_ty_2 = 196;
    pub const _SC_LEVEL4_CACHE_SIZE: root::_bindgen_ty_2 = 197;
    pub const _SC_LEVEL4_CACHE_ASSOC: root::_bindgen_ty_2 = 198;
    pub const _SC_LEVEL4_CACHE_LINESIZE: root::_bindgen_ty_2 = 199;
    pub const _SC_IPV6: root::_bindgen_ty_2 = 235;
    pub const _SC_RAW_SOCKETS: root::_bindgen_ty_2 = 236;
    pub const _SC_V7_ILP32_OFF32: root::_bindgen_ty_2 = 237;
    pub const _SC_V7_ILP32_OFFBIG: root::_bindgen_ty_2 = 238;
    pub const _SC_V7_LP64_OFF64: root::_bindgen_ty_2 = 239;
    pub const _SC_V7_LPBIG_OFFBIG: root::_bindgen_ty_2 = 240;
    pub const _SC_SS_REPL_MAX: root::_bindgen_ty_2 = 241;
    pub const _SC_TRACE_EVENT_NAME_MAX: root::_bindgen_ty_2 = 242;
    pub const _SC_TRACE_NAME_MAX: root::_bindgen_ty_2 = 243;
    pub const _SC_TRACE_SYS_MAX: root::_bindgen_ty_2 = 244;
    pub const _SC_TRACE_USER_EVENT_MAX: root::_bindgen_ty_2 = 245;
    pub const _SC_XOPEN_STREAMS: root::_bindgen_ty_2 = 246;
    pub const _SC_THREAD_ROBUST_PRIO_INHERIT: root::_bindgen_ty_2 = 247;
    pub const _SC_THREAD_ROBUST_PRIO_PROTECT: root::_bindgen_ty_2 = 248;
    pub type _bindgen_ty_2 = u32;
    pub const _CS_PATH: root::_bindgen_ty_3 = 0;
    pub const _CS_V6_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_3 = 1;
    pub const _CS_GNU_LIBC_VERSION: root::_bindgen_ty_3 = 2;
    pub const _CS_GNU_LIBPTHREAD_VERSION: root::_bindgen_ty_3 = 3;
    pub const _CS_V5_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_3 = 4;
    pub const _CS_V7_WIDTH_RESTRICTED_ENVS: root::_bindgen_ty_3 = 5;
    pub const _CS_LFS_CFLAGS: root::_bindgen_ty_3 = 1000;
    pub const _CS_LFS_LDFLAGS: root::_bindgen_ty_3 = 1001;
    pub const _CS_LFS_LIBS: root::_bindgen_ty_3 = 1002;
    pub const _CS_LFS_LINTFLAGS: root::_bindgen_ty_3 = 1003;
    pub const _CS_LFS64_CFLAGS: root::_bindgen_ty_3 = 1004;
    pub const _CS_LFS64_LDFLAGS: root::_bindgen_ty_3 = 1005;
    pub const _CS_LFS64_LIBS: root::_bindgen_ty_3 = 1006;
    pub const _CS_LFS64_LINTFLAGS: root::_bindgen_ty_3 = 1007;
    pub const _CS_XBS5_ILP32_OFF32_CFLAGS: root::_bindgen_ty_3 = 1100;
    pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_3 = 1101;
    pub const _CS_XBS5_ILP32_OFF32_LIBS: root::_bindgen_ty_3 = 1102;
    pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_3 = 1103;
    pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_3 = 1104;
    pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_3 = 1105;
    pub const _CS_XBS5_ILP32_OFFBIG_LIBS: root::_bindgen_ty_3 = 1106;
    pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_3 = 1107;
    pub const _CS_XBS5_LP64_OFF64_CFLAGS: root::_bindgen_ty_3 = 1108;
    pub const _CS_XBS5_LP64_OFF64_LDFLAGS: root::_bindgen_ty_3 = 1109;
    pub const _CS_XBS5_LP64_OFF64_LIBS: root::_bindgen_ty_3 = 1110;
    pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_3 = 1111;
    pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_3 = 1112;
    pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_3 = 1113;
    pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_3 = 1114;
    pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_3 = 1115;
    pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: root::_bindgen_ty_3 = 1116;
    pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_3 = 1117;
    pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: root::_bindgen_ty_3 = 1118;
    pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_3 = 1119;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_3 = 1120;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_3 = 1121;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: root::_bindgen_ty_3 = 1122;
    pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_3 = 1123;
    pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: root::_bindgen_ty_3 = 1124;
    pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: root::_bindgen_ty_3 = 1125;
    pub const _CS_POSIX_V6_LP64_OFF64_LIBS: root::_bindgen_ty_3 = 1126;
    pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_3 = 1127;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_3 = 1128;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_3 = 1129;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_3 = 1130;
    pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_3 = 1131;
    pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: root::_bindgen_ty_3 = 1132;
    pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: root::_bindgen_ty_3 = 1133;
    pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: root::_bindgen_ty_3 = 1134;
    pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: root::_bindgen_ty_3 = 1135;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: root::_bindgen_ty_3 = 1136;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: root::_bindgen_ty_3 = 1137;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: root::_bindgen_ty_3 = 1138;
    pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: root::_bindgen_ty_3 = 1139;
    pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: root::_bindgen_ty_3 = 1140;
    pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: root::_bindgen_ty_3 = 1141;
    pub const _CS_POSIX_V7_LP64_OFF64_LIBS: root::_bindgen_ty_3 = 1142;
    pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: root::_bindgen_ty_3 = 1143;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: root::_bindgen_ty_3 = 1144;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: root::_bindgen_ty_3 = 1145;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: root::_bindgen_ty_3 = 1146;
    pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: root::_bindgen_ty_3 = 1147;
    pub const _CS_V6_ENV: root::_bindgen_ty_3 = 1148;
    pub const _CS_V7_ENV: root::_bindgen_ty_3 = 1149;
    pub type _bindgen_ty_3 = u32;
    extern "C" {
        pub fn pathconf(
            __path: *const ::std::os::raw::c_char,
            __name: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn fpathconf(
            __fd: ::std::os::raw::c_int,
            __name: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn confstr(
            __name: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn getpid() -> root::__pid_t;
    }
    extern "C" {
        pub fn getppid() -> root::__pid_t;
    }
    extern "C" {
        pub fn getpgrp() -> root::__pid_t;
    }
    extern "C" {
        pub fn __getpgid(__pid: root::__pid_t) -> root::__pid_t;
    }
    extern "C" {
        pub fn getpgid(__pid: root::__pid_t) -> root::__pid_t;
    }
    extern "C" {
        pub fn setpgid(__pid: root::__pid_t, __pgid: root::__pid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setpgrp() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setsid() -> root::__pid_t;
    }
    extern "C" {
        pub fn getsid(__pid: root::__pid_t) -> root::__pid_t;
    }
    extern "C" {
        pub fn getuid() -> root::__uid_t;
    }
    extern "C" {
        pub fn geteuid() -> root::__uid_t;
    }
    extern "C" {
        pub fn getgid() -> root::__gid_t;
    }
    extern "C" {
        pub fn getegid() -> root::__gid_t;
    }
    extern "C" {
        pub fn getgroups(
            __size: ::std::os::raw::c_int,
            __list: *mut root::__gid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn group_member(__gid: root::__gid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setuid(__uid: root::__uid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setreuid(__ruid: root::__uid_t, __euid: root::__uid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn seteuid(__uid: root::__uid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setgid(__gid: root::__gid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setregid(__rgid: root::__gid_t, __egid: root::__gid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setegid(__gid: root::__gid_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getresuid(
            __ruid: *mut root::__uid_t,
            __euid: *mut root::__uid_t,
            __suid: *mut root::__uid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getresgid(
            __rgid: *mut root::__gid_t,
            __egid: *mut root::__gid_t,
            __sgid: *mut root::__gid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setresuid(
            __ruid: root::__uid_t,
            __euid: root::__uid_t,
            __suid: root::__uid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setresgid(
            __rgid: root::__gid_t,
            __egid: root::__gid_t,
            __sgid: root::__gid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fork() -> root::__pid_t;
    }
    extern "C" {
        pub fn vfork() -> root::__pid_t;
    }
    extern "C" {
        pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ttyname_r(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ttyslot() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn link(
            __from: *const ::std::os::raw::c_char,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn linkat(
            __fromfd: ::std::os::raw::c_int,
            __from: *const ::std::os::raw::c_char,
            __tofd: ::std::os::raw::c_int,
            __to: *const ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn symlink(
            __from: *const ::std::os::raw::c_char,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn readlink(
            __path: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> isize;
    }
    extern "C" {
        pub fn symlinkat(
            __from: *const ::std::os::raw::c_char,
            __tofd: ::std::os::raw::c_int,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn readlinkat(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> isize;
    }
    extern "C" {
        pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unlinkat(
            __fd: ::std::os::raw::c_int,
            __name: *const ::std::os::raw::c_char,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> root::__pid_t;
    }
    extern "C" {
        pub fn tcsetpgrp(
            __fd: ::std::os::raw::c_int,
            __pgrp_id: root::__pid_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getlogin() -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn getlogin_r(
            __name: *mut ::std::os::raw::c_char,
            __name_len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut optarg: *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub static mut optind: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut opterr: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut optopt: ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getopt(
            ___argc: ::std::os::raw::c_int,
            ___argv: *const *mut ::std::os::raw::c_char,
            __shortopts: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn gethostname(
            __name: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sethostname(
            __name: *const ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getdomainname(
            __name: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setdomainname(
            __name: *const ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn vhangup() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn profil(
            __sample_buffer: *mut ::std::os::raw::c_ushort,
            __size: usize,
            __offset: usize,
            __scale: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getusershell() -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn endusershell();
    }
    extern "C" {
        pub fn setusershell();
    }
    extern "C" {
        pub fn daemon(
            __nochdir: ::std::os::raw::c_int,
            __noclose: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn syncfs(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn gethostid() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn sync();
    }
    extern "C" {
        pub fn getpagesize() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getdtablesize() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn truncate(
            __file: *const ::std::os::raw::c_char,
            __length: root::__off_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn truncate64(
            __file: *const ::std::os::raw::c_char,
            __length: root::__off64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftruncate(
            __fd: ::std::os::raw::c_int,
            __length: root::__off_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ftruncate64(
            __fd: ::std::os::raw::c_int,
            __length: root::__off64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn lockf(
            __fd: ::std::os::raw::c_int,
            __cmd: ::std::os::raw::c_int,
            __len: root::__off_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lockf64(
            __fd: ::std::os::raw::c_int,
            __cmd: ::std::os::raw::c_int,
            __len: root::__off64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn copy_file_range(
            __infd: ::std::os::raw::c_int,
            __pinoff: *mut root::__off64_t,
            __outfd: ::std::os::raw::c_int,
            __poutoff: *mut root::__off64_t,
            __length: usize,
            __flags: ::std::os::raw::c_uint,
        ) -> isize;
    }
    extern "C" {
        pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn crypt(
            __key: *const ::std::os::raw::c_char,
            __salt: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn encrypt(__glibc_block: *mut ::std::os::raw::c_char, __edflag: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn swab(
            __from: *const ::std::os::raw::c_void,
            __to: *mut ::std::os::raw::c_void,
            __n: isize,
        );
    }
    extern "C" {
        pub fn getentropy(
            __buffer: *mut ::std::os::raw::c_void,
            __length: usize,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct stat {
        pub st_dev: root::__dev_t,
        pub st_ino: root::__ino_t,
        pub st_nlink: root::__nlink_t,
        pub st_mode: root::__mode_t,
        pub st_uid: root::__uid_t,
        pub st_gid: root::__gid_t,
        pub __pad0: ::std::os::raw::c_int,
        pub st_rdev: root::__dev_t,
        pub st_size: root::__off_t,
        pub st_blksize: root::__blksize_t,
        pub st_blocks: root::__blkcnt_t,
        pub st_atim: root::timespec,
        pub st_mtim: root::timespec,
        pub st_ctim: root::timespec,
        pub __glibc_reserved: [root::__syscall_slong_t; 3usize],
    }
    #[test]
    fn bindgen_test_layout_stat() {
        assert_eq!(
            ::std::mem::size_of::<stat>(),
            144usize,
            concat!("Size of: ", stringify!(stat))
        );
        assert_eq!(
            ::std::mem::align_of::<stat>(),
            8usize,
            concat!("Alignment of ", stringify!(stat))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(st_dev)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(st_ino)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(st_nlink)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(st_mode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(st_uid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(st_gid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(__pad0)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(st_rdev)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(st_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(st_blksize)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(st_blocks)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(st_atim)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(st_mtim)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(st_ctim)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(stat),
                "::",
                stringify!(__glibc_reserved)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct stat64 {
        pub st_dev: root::__dev_t,
        pub st_ino: root::__ino64_t,
        pub st_nlink: root::__nlink_t,
        pub st_mode: root::__mode_t,
        pub st_uid: root::__uid_t,
        pub st_gid: root::__gid_t,
        pub __pad0: ::std::os::raw::c_int,
        pub st_rdev: root::__dev_t,
        pub st_size: root::__off_t,
        pub st_blksize: root::__blksize_t,
        pub st_blocks: root::__blkcnt64_t,
        pub st_atim: root::timespec,
        pub st_mtim: root::timespec,
        pub st_ctim: root::timespec,
        pub __glibc_reserved: [root::__syscall_slong_t; 3usize],
    }
    #[test]
    fn bindgen_test_layout_stat64() {
        assert_eq!(
            ::std::mem::size_of::<stat64>(),
            144usize,
            concat!("Size of: ", stringify!(stat64))
        );
        assert_eq!(
            ::std::mem::align_of::<stat64>(),
            8usize,
            concat!("Alignment of ", stringify!(stat64))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).st_dev as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(st_dev)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).st_ino as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(st_ino)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).st_nlink as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(st_nlink)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).st_mode as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(st_mode)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).st_uid as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(st_uid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).st_gid as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(st_gid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).__pad0 as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(__pad0)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).st_rdev as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(st_rdev)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).st_size as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(st_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).st_blksize as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(st_blksize)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).st_blocks as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(st_blocks)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).st_atim as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(st_atim)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).st_mtim as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(st_mtim)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).st_ctim as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(st_ctim)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<stat64>())).__glibc_reserved as *const _ as usize },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(stat64),
                "::",
                stringify!(__glibc_reserved)
            )
        );
    }
    extern "C" {
        pub fn stat(
            __file: *const ::std::os::raw::c_char,
            __buf: *mut root::stat,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut root::stat) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn stat64(
            __file: *const ::std::os::raw::c_char,
            __buf: *mut root::stat64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fstat64(
            __fd: ::std::os::raw::c_int,
            __buf: *mut root::stat64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fstatat(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __buf: *mut root::stat,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fstatat64(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __buf: *mut root::stat64,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lstat(
            __file: *const ::std::os::raw::c_char,
            __buf: *mut root::stat,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lstat64(
            __file: *const ::std::os::raw::c_char,
            __buf: *mut root::stat64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn chmod(
            __file: *const ::std::os::raw::c_char,
            __mode: root::__mode_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn lchmod(
            __file: *const ::std::os::raw::c_char,
            __mode: root::__mode_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: root::__mode_t)
        -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fchmodat(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __mode: root::__mode_t,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn umask(__mask: root::__mode_t) -> root::__mode_t;
    }
    extern "C" {
        pub fn getumask() -> root::__mode_t;
    }
    extern "C" {
        pub fn mkdir(
            __path: *const ::std::os::raw::c_char,
            __mode: root::__mode_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkdirat(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __mode: root::__mode_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mknod(
            __path: *const ::std::os::raw::c_char,
            __mode: root::__mode_t,
            __dev: root::__dev_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mknodat(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __mode: root::__mode_t,
            __dev: root::__dev_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkfifo(
            __path: *const ::std::os::raw::c_char,
            __mode: root::__mode_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mkfifoat(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __mode: root::__mode_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn utimensat(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __times: *const root::timespec,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn futimens(
            __fd: ::std::os::raw::c_int,
            __times: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __fxstat(
            __ver: ::std::os::raw::c_int,
            __fildes: ::std::os::raw::c_int,
            __stat_buf: *mut root::stat,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __xstat(
            __ver: ::std::os::raw::c_int,
            __filename: *const ::std::os::raw::c_char,
            __stat_buf: *mut root::stat,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __lxstat(
            __ver: ::std::os::raw::c_int,
            __filename: *const ::std::os::raw::c_char,
            __stat_buf: *mut root::stat,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __fxstatat(
            __ver: ::std::os::raw::c_int,
            __fildes: ::std::os::raw::c_int,
            __filename: *const ::std::os::raw::c_char,
            __stat_buf: *mut root::stat,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __fxstat64(
            __ver: ::std::os::raw::c_int,
            __fildes: ::std::os::raw::c_int,
            __stat_buf: *mut root::stat64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __xstat64(
            __ver: ::std::os::raw::c_int,
            __filename: *const ::std::os::raw::c_char,
            __stat_buf: *mut root::stat64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __lxstat64(
            __ver: ::std::os::raw::c_int,
            __filename: *const ::std::os::raw::c_char,
            __stat_buf: *mut root::stat64,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __fxstatat64(
            __ver: ::std::os::raw::c_int,
            __fildes: ::std::os::raw::c_int,
            __filename: *const ::std::os::raw::c_char,
            __stat_buf: *mut root::stat64,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __xmknod(
            __ver: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __mode: root::__mode_t,
            __dev: *mut root::__dev_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __xmknodat(
            __ver: ::std::os::raw::c_int,
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __mode: root::__mode_t,
            __dev: *mut root::__dev_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _dl_mcount_wrapper_check(__selfpc: *mut ::std::os::raw::c_void);
    }
    pub type Lmid_t = ::std::os::raw::c_long;
    extern "C" {
        pub fn dlopen(
            __file: *const ::std::os::raw::c_char,
            __mode: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn dlclose(__handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn dlsym(
            __handle: *mut ::std::os::raw::c_void,
            __name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn dlmopen(
            __nsid: root::Lmid_t,
            __file: *const ::std::os::raw::c_char,
            __mode: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn dlvsym(
            __handle: *mut ::std::os::raw::c_void,
            __name: *const ::std::os::raw::c_char,
            __version: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn dlerror() -> *mut ::std::os::raw::c_char;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_info {
        pub dli_fname: *const ::std::os::raw::c_char,
        pub dli_fbase: *mut ::std::os::raw::c_void,
        pub dli_sname: *const ::std::os::raw::c_char,
        pub dli_saddr: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout_Dl_info() {
        assert_eq!(
            ::std::mem::size_of::<Dl_info>(),
            32usize,
            concat!("Size of: ", stringify!(Dl_info))
        );
        assert_eq!(
            ::std::mem::align_of::<Dl_info>(),
            8usize,
            concat!("Alignment of ", stringify!(Dl_info))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_info>())).dli_fname as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_info),
                "::",
                stringify!(dli_fname)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_info>())).dli_fbase as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_info),
                "::",
                stringify!(dli_fbase)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_info>())).dli_sname as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_info),
                "::",
                stringify!(dli_sname)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_info>())).dli_saddr as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_info),
                "::",
                stringify!(dli_saddr)
            )
        );
    }
    extern "C" {
        pub fn dladdr(
            __address: *const ::std::os::raw::c_void,
            __info: *mut root::Dl_info,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn dladdr1(
            __address: *const ::std::os::raw::c_void,
            __info: *mut root::Dl_info,
            __extra_info: *mut *mut ::std::os::raw::c_void,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    pub const RTLD_DL_SYMENT: root::_bindgen_ty_4 = 1;
    pub const RTLD_DL_LINKMAP: root::_bindgen_ty_4 = 2;
    pub type _bindgen_ty_4 = u32;
    extern "C" {
        pub fn dlinfo(
            __handle: *mut ::std::os::raw::c_void,
            __request: ::std::os::raw::c_int,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    pub const RTLD_DI_LMID: root::_bindgen_ty_5 = 1;
    pub const RTLD_DI_LINKMAP: root::_bindgen_ty_5 = 2;
    pub const RTLD_DI_CONFIGADDR: root::_bindgen_ty_5 = 3;
    pub const RTLD_DI_SERINFO: root::_bindgen_ty_5 = 4;
    pub const RTLD_DI_SERINFOSIZE: root::_bindgen_ty_5 = 5;
    pub const RTLD_DI_ORIGIN: root::_bindgen_ty_5 = 6;
    pub const RTLD_DI_PROFILENAME: root::_bindgen_ty_5 = 7;
    pub const RTLD_DI_PROFILEOUT: root::_bindgen_ty_5 = 8;
    pub const RTLD_DI_TLS_MODID: root::_bindgen_ty_5 = 9;
    pub const RTLD_DI_TLS_DATA: root::_bindgen_ty_5 = 10;
    pub const RTLD_DI_MAX: root::_bindgen_ty_5 = 10;
    pub type _bindgen_ty_5 = u32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_serpath {
        pub dls_name: *mut ::std::os::raw::c_char,
        pub dls_flags: ::std::os::raw::c_uint,
    }
    #[test]
    fn bindgen_test_layout_Dl_serpath() {
        assert_eq!(
            ::std::mem::size_of::<Dl_serpath>(),
            16usize,
            concat!("Size of: ", stringify!(Dl_serpath))
        );
        assert_eq!(
            ::std::mem::align_of::<Dl_serpath>(),
            8usize,
            concat!("Alignment of ", stringify!(Dl_serpath))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serpath>())).dls_name as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serpath),
                "::",
                stringify!(dls_name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serpath>())).dls_flags as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serpath),
                "::",
                stringify!(dls_flags)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Dl_serinfo {
        pub dls_size: usize,
        pub dls_cnt: ::std::os::raw::c_uint,
        pub dls_serpath: [root::Dl_serpath; 1usize],
    }
    #[test]
    fn bindgen_test_layout_Dl_serinfo() {
        assert_eq!(
            ::std::mem::size_of::<Dl_serinfo>(),
            32usize,
            concat!("Size of: ", stringify!(Dl_serinfo))
        );
        assert_eq!(
            ::std::mem::align_of::<Dl_serinfo>(),
            8usize,
            concat!("Alignment of ", stringify!(Dl_serinfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serinfo>())).dls_size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serinfo),
                "::",
                stringify!(dls_size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serinfo>())).dls_cnt as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serinfo),
                "::",
                stringify!(dls_cnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<Dl_serinfo>())).dls_serpath as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Dl_serinfo),
                "::",
                stringify!(dls_serpath)
            )
        );
    }
    pub const _ISupper: root::_bindgen_ty_6 = 256;
    pub const _ISlower: root::_bindgen_ty_6 = 512;
    pub const _ISalpha: root::_bindgen_ty_6 = 1024;
    pub const _ISdigit: root::_bindgen_ty_6 = 2048;
    pub const _ISxdigit: root::_bindgen_ty_6 = 4096;
    pub const _ISspace: root::_bindgen_ty_6 = 8192;
    pub const _ISprint: root::_bindgen_ty_6 = 16384;
    pub const _ISgraph: root::_bindgen_ty_6 = 32768;
    pub const _ISblank: root::_bindgen_ty_6 = 1;
    pub const _IScntrl: root::_bindgen_ty_6 = 2;
    pub const _ISpunct: root::_bindgen_ty_6 = 4;
    pub const _ISalnum: root::_bindgen_ty_6 = 8;
    pub type _bindgen_ty_6 = u32;
    extern "C" {
        pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
    }
    extern "C" {
        pub fn __ctype_tolower_loc() -> *mut *const root::__int32_t;
    }
    extern "C" {
        pub fn __ctype_toupper_loc() -> *mut *const root::__int32_t;
    }
    extern "C" {
        pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isctype(
            __c: ::std::os::raw::c_int,
            __mask: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalnum_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isalpha_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn iscntrl_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isdigit_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn islower_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isgraph_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isprint_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ispunct_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isspace_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isupper_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isxdigit_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn isblank_l(
            arg1: ::std::os::raw::c_int,
            arg2: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __tolower_l(
            __c: ::std::os::raw::c_int,
            __l: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn tolower_l(__c: ::std::os::raw::c_int, __l: root::locale_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __toupper_l(
            __c: ::std::os::raw::c_int,
            __l: root::locale_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn toupper_l(__c: ::std::os::raw::c_int, __l: root::locale_t) -> ::std::os::raw::c_int;
    }
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type nullptr_t = *const ::std::os::raw::c_void;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct max_align_t {
        pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
        pub __bindgen_padding_0: u64,
        pub __clang_max_align_nonce2: u128,
    }
    #[test]
    fn bindgen_test_layout_max_align_t() {
        assert_eq!(
            ::std::mem::size_of::<max_align_t>(),
            32usize,
            concat!("Size of: ", stringify!(max_align_t))
        );
        assert_eq!(
            ::std::mem::align_of::<max_align_t>(),
            16usize,
            concat!("Alignment of ", stringify!(max_align_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _
                    as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce2)
            )
        );
    }
    pub type int_least8_t = ::std::os::raw::c_schar;
    pub type int_least16_t = ::std::os::raw::c_short;
    pub type int_least32_t = ::std::os::raw::c_int;
    pub type int_least64_t = ::std::os::raw::c_long;
    pub type uint_least8_t = ::std::os::raw::c_uchar;
    pub type uint_least16_t = ::std::os::raw::c_ushort;
    pub type uint_least32_t = ::std::os::raw::c_uint;
    pub type uint_least64_t = ::std::os::raw::c_ulong;
    pub type int_fast8_t = ::std::os::raw::c_schar;
    pub type int_fast16_t = ::std::os::raw::c_long;
    pub type int_fast32_t = ::std::os::raw::c_long;
    pub type int_fast64_t = ::std::os::raw::c_long;
    pub type uint_fast8_t = ::std::os::raw::c_uchar;
    pub type uint_fast16_t = ::std::os::raw::c_ulong;
    pub type uint_fast32_t = ::std::os::raw::c_ulong;
    pub type uint_fast64_t = ::std::os::raw::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    pub type INT_PTR = isize;
    pub type PINT_PTR = *mut isize;
    pub type LONG_PTR = isize;
    pub type PLONG_PTR = *mut isize;
    pub type UINT_PTR = usize;
    pub type PUINT_PTR = *mut usize;
    pub type ULONG_PTR = usize;
    pub type PULONG_PTR = *mut usize;
    pub type DWORD_PTR = usize;
    pub type PDWORD_PTR = *mut usize;
    extern "C" {
        pub fn SWELLAppMain(
            msg: ::std::os::raw::c_int,
            parm1: root::INT_PTR,
            parm2: root::INT_PTR,
        ) -> root::INT_PTR;
    }
    pub type BOOL = ::std::os::raw::c_schar;
    pub type BYTE = ::std::os::raw::c_uchar;
    pub type WORD = ::std::os::raw::c_ushort;
    pub type DWORD = ::std::os::raw::c_uint;
    pub type COLORREF = root::DWORD;
    pub type UINT = ::std::os::raw::c_uint;
    pub type INT = ::std::os::raw::c_int;
    pub type WPARAM = root::ULONG_PTR;
    pub type LPARAM = root::LONG_PTR;
    pub type LRESULT = root::LONG_PTR;
    pub type LPVOID = *mut ::std::os::raw::c_void;
    pub type PVOID = *mut ::std::os::raw::c_void;
    pub type HRESULT = ::std::os::raw::c_int;
    pub type LONG = ::std::os::raw::c_int;
    pub type ULONG = ::std::os::raw::c_uint;
    pub type SHORT = ::std::os::raw::c_short;
    pub type LPINT = *mut ::std::os::raw::c_int;
    pub type CHAR = ::std::os::raw::c_char;
    pub type LPSTR = *mut ::std::os::raw::c_char;
    pub type LPTSTR = *mut ::std::os::raw::c_char;
    pub type LPCSTR = *const ::std::os::raw::c_char;
    pub type LPCTSTR = *const ::std::os::raw::c_char;
    pub type ULONGLONG = ::std::os::raw::c_ulonglong;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union ULARGE_INTEGER {
        pub QuadPart: ::std::os::raw::c_ulonglong,
        pub __bindgen_anon_1: root::ULARGE_INTEGER__bindgen_ty_1,
        _bindgen_union_align: u64,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ULARGE_INTEGER__bindgen_ty_1 {
        pub LowPart: root::DWORD,
        pub HighPart: root::DWORD,
    }
    #[test]
    fn bindgen_test_layout_ULARGE_INTEGER__bindgen_ty_1() {
        assert_eq!(
            ::std::mem::size_of::<ULARGE_INTEGER__bindgen_ty_1>(),
            8usize,
            concat!("Size of: ", stringify!(ULARGE_INTEGER__bindgen_ty_1))
        );
        assert_eq!(
            ::std::mem::align_of::<ULARGE_INTEGER__bindgen_ty_1>(),
            4usize,
            concat!("Alignment of ", stringify!(ULARGE_INTEGER__bindgen_ty_1))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ULARGE_INTEGER__bindgen_ty_1>())).LowPart as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULARGE_INTEGER__bindgen_ty_1),
                "::",
                stringify!(LowPart)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ULARGE_INTEGER__bindgen_ty_1>())).HighPart as *const _
                    as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ULARGE_INTEGER__bindgen_ty_1),
                "::",
                stringify!(HighPart)
            )
        );
    }
    #[test]
    fn bindgen_test_layout_ULARGE_INTEGER() {
        assert_eq!(
            ::std::mem::size_of::<ULARGE_INTEGER>(),
            8usize,
            concat!("Size of: ", stringify!(ULARGE_INTEGER))
        );
        assert_eq!(
            ::std::mem::align_of::<ULARGE_INTEGER>(),
            8usize,
            concat!("Alignment of ", stringify!(ULARGE_INTEGER))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ULARGE_INTEGER>())).QuadPart as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ULARGE_INTEGER),
                "::",
                stringify!(QuadPart)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HWND__ {
        _unused: [u8; 0],
    }
    pub type HWND = *mut root::HWND__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HMENU__ {
        _unused: [u8; 0],
    }
    pub type HMENU = *mut root::HMENU__;
    pub type HANDLE = *mut ::std::os::raw::c_void;
    pub type HINSTANCE = *mut ::std::os::raw::c_void;
    pub type HDROP = *mut ::std::os::raw::c_void;
    pub type HGLOBAL = *mut ::std::os::raw::c_void;
    pub type TIMERPROC = ::std::option::Option<
        unsafe extern "C" fn(
            hwnd: root::HWND,
            uMsg: root::UINT,
            idEvent: root::UINT_PTR,
            dwTime: root::DWORD,
        ),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct POINT {
        pub x: root::LONG,
        pub y: root::LONG,
    }
    #[test]
    fn bindgen_test_layout_POINT() {
        assert_eq!(
            ::std::mem::size_of::<POINT>(),
            8usize,
            concat!("Size of: ", stringify!(POINT))
        );
        assert_eq!(
            ::std::mem::align_of::<POINT>(),
            4usize,
            concat!("Alignment of ", stringify!(POINT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<POINT>())).x as *const _ as usize },
            0usize,
            concat!("Offset of field: ", stringify!(POINT), "::", stringify!(x))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<POINT>())).y as *const _ as usize },
            4usize,
            concat!("Offset of field: ", stringify!(POINT), "::", stringify!(y))
        );
    }
    pub type LPPOINT = *mut root::POINT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct POINTS {
        pub x: root::SHORT,
        pub y: root::SHORT,
    }
    #[test]
    fn bindgen_test_layout_POINTS() {
        assert_eq!(
            ::std::mem::size_of::<POINTS>(),
            4usize,
            concat!("Size of: ", stringify!(POINTS))
        );
        assert_eq!(
            ::std::mem::align_of::<POINTS>(),
            2usize,
            concat!("Alignment of ", stringify!(POINTS))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<POINTS>())).x as *const _ as usize },
            0usize,
            concat!("Offset of field: ", stringify!(POINTS), "::", stringify!(x))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<POINTS>())).y as *const _ as usize },
            2usize,
            concat!("Offset of field: ", stringify!(POINTS), "::", stringify!(y))
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct RECT {
        pub left: root::LONG,
        pub top: root::LONG,
        pub right: root::LONG,
        pub bottom: root::LONG,
    }
    #[test]
    fn bindgen_test_layout_RECT() {
        assert_eq!(
            ::std::mem::size_of::<RECT>(),
            16usize,
            concat!("Size of: ", stringify!(RECT))
        );
        assert_eq!(
            ::std::mem::align_of::<RECT>(),
            4usize,
            concat!("Alignment of ", stringify!(RECT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RECT>())).left as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RECT),
                "::",
                stringify!(left)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RECT>())).top as *const _ as usize },
            4usize,
            concat!("Offset of field: ", stringify!(RECT), "::", stringify!(top))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RECT>())).right as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RECT),
                "::",
                stringify!(right)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RECT>())).bottom as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RECT),
                "::",
                stringify!(bottom)
            )
        );
    }
    pub type LPRECT = *mut root::RECT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ACCEL {
        pub fVirt: ::std::os::raw::c_uchar,
        pub key: ::std::os::raw::c_ushort,
        pub cmd: ::std::os::raw::c_ushort,
    }
    #[test]
    fn bindgen_test_layout_ACCEL() {
        assert_eq!(
            ::std::mem::size_of::<ACCEL>(),
            6usize,
            concat!("Size of: ", stringify!(ACCEL))
        );
        assert_eq!(
            ::std::mem::align_of::<ACCEL>(),
            2usize,
            concat!("Alignment of ", stringify!(ACCEL))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ACCEL>())).fVirt as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ACCEL),
                "::",
                stringify!(fVirt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ACCEL>())).key as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(ACCEL),
                "::",
                stringify!(key)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ACCEL>())).cmd as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ACCEL),
                "::",
                stringify!(cmd)
            )
        );
    }
    pub type LPACCEL = *mut root::ACCEL;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct FILETIME {
        pub dwLowDateTime: root::DWORD,
        pub dwHighDateTime: root::DWORD,
    }
    #[test]
    fn bindgen_test_layout_FILETIME() {
        assert_eq!(
            ::std::mem::size_of::<FILETIME>(),
            8usize,
            concat!("Size of: ", stringify!(FILETIME))
        );
        assert_eq!(
            ::std::mem::align_of::<FILETIME>(),
            4usize,
            concat!("Alignment of ", stringify!(FILETIME))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<FILETIME>())).dwLowDateTime as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(FILETIME),
                "::",
                stringify!(dwLowDateTime)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<FILETIME>())).dwHighDateTime as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(FILETIME),
                "::",
                stringify!(dwHighDateTime)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _GUID {
        pub Data1: ::std::os::raw::c_uint,
        pub Data2: ::std::os::raw::c_ushort,
        pub Data3: ::std::os::raw::c_ushort,
        pub Data4: [::std::os::raw::c_uchar; 8usize],
    }
    #[test]
    fn bindgen_test_layout__GUID() {
        assert_eq!(
            ::std::mem::size_of::<_GUID>(),
            16usize,
            concat!("Size of: ", stringify!(_GUID))
        );
        assert_eq!(
            ::std::mem::align_of::<_GUID>(),
            4usize,
            concat!("Alignment of ", stringify!(_GUID))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_GUID>())).Data1 as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_GUID),
                "::",
                stringify!(Data1)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_GUID>())).Data2 as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_GUID),
                "::",
                stringify!(Data2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_GUID>())).Data3 as *const _ as usize },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(_GUID),
                "::",
                stringify!(Data3)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_GUID>())).Data4 as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_GUID),
                "::",
                stringify!(Data4)
            )
        );
    }
    pub type GUID = root::_GUID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MSG {
        pub hwnd: root::HWND,
        pub message: root::UINT,
        pub wParam: root::WPARAM,
        pub lParam: root::LPARAM,
        pub time: root::DWORD,
        pub pt: root::POINT,
    }
    #[test]
    fn bindgen_test_layout_MSG() {
        assert_eq!(
            ::std::mem::size_of::<MSG>(),
            48usize,
            concat!("Size of: ", stringify!(MSG))
        );
        assert_eq!(
            ::std::mem::align_of::<MSG>(),
            8usize,
            concat!("Alignment of ", stringify!(MSG))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MSG>())).hwnd as *const _ as usize },
            0usize,
            concat!("Offset of field: ", stringify!(MSG), "::", stringify!(hwnd))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MSG>())).message as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(MSG),
                "::",
                stringify!(message)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MSG>())).wParam as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(MSG),
                "::",
                stringify!(wParam)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MSG>())).lParam as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(MSG),
                "::",
                stringify!(lParam)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MSG>())).time as *const _ as usize },
            32usize,
            concat!("Offset of field: ", stringify!(MSG), "::", stringify!(time))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MSG>())).pt as *const _ as usize },
            36usize,
            concat!("Offset of field: ", stringify!(MSG), "::", stringify!(pt))
        );
    }
    pub type LPMSG = *mut root::MSG;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HDC__ {
        _unused: [u8; 0],
    }
    pub type HDC = *mut root::HDC__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HCURSOR__ {
        _unused: [u8; 0],
    }
    pub type HCURSOR = *mut root::HCURSOR__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HRGN__ {
        _unused: [u8; 0],
    }
    pub type HRGN = *mut root::HRGN__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HGDIOBJ__ {
        _unused: [u8; 0],
    }
    pub type HBITMAP = *mut root::HGDIOBJ__;
    pub type HICON = *mut root::HGDIOBJ__;
    pub type HGDIOBJ = *mut root::HGDIOBJ__;
    pub type HBRUSH = *mut root::HGDIOBJ__;
    pub type HPEN = *mut root::HGDIOBJ__;
    pub type HFONT = *mut root::HGDIOBJ__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NMHDR {
        pub hwndFrom: root::HWND,
        pub idFrom: root::UINT_PTR,
        pub code: root::UINT,
    }
    #[test]
    fn bindgen_test_layout_NMHDR() {
        assert_eq!(
            ::std::mem::size_of::<NMHDR>(),
            24usize,
            concat!("Size of: ", stringify!(NMHDR))
        );
        assert_eq!(
            ::std::mem::align_of::<NMHDR>(),
            8usize,
            concat!("Alignment of ", stringify!(NMHDR))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMHDR>())).hwndFrom as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(NMHDR),
                "::",
                stringify!(hwndFrom)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMHDR>())).idFrom as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(NMHDR),
                "::",
                stringify!(idFrom)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMHDR>())).code as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(NMHDR),
                "::",
                stringify!(code)
            )
        );
    }
    pub type LPNMHDR = *mut root::NMHDR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NMMOUSE {
        pub hdr: root::NMHDR,
        pub dwItemSpec: root::DWORD_PTR,
        pub dwItemData: root::DWORD_PTR,
        pub pt: root::POINT,
        pub dwHitInfo: root::DWORD,
    }
    #[test]
    fn bindgen_test_layout_NMMOUSE() {
        assert_eq!(
            ::std::mem::size_of::<NMMOUSE>(),
            56usize,
            concat!("Size of: ", stringify!(NMMOUSE))
        );
        assert_eq!(
            ::std::mem::align_of::<NMMOUSE>(),
            8usize,
            concat!("Alignment of ", stringify!(NMMOUSE))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMMOUSE>())).hdr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(NMMOUSE),
                "::",
                stringify!(hdr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMMOUSE>())).dwItemSpec as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(NMMOUSE),
                "::",
                stringify!(dwItemSpec)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMMOUSE>())).dwItemData as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(NMMOUSE),
                "::",
                stringify!(dwItemData)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMMOUSE>())).pt as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(NMMOUSE),
                "::",
                stringify!(pt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMMOUSE>())).dwHitInfo as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(NMMOUSE),
                "::",
                stringify!(dwHitInfo)
            )
        );
    }
    pub type LPNMMOUSE = *mut root::NMMOUSE;
    pub type NMCLICK = root::NMMOUSE;
    pub type LPNMCLICK = root::LPNMMOUSE;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct LVCOLUMN {
        pub mask: ::std::os::raw::c_int,
        pub fmt: ::std::os::raw::c_int,
        pub cx: ::std::os::raw::c_int,
        pub pszText: *mut ::std::os::raw::c_char,
        pub cchTextMax: ::std::os::raw::c_int,
        pub iSubItem: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_LVCOLUMN() {
        assert_eq!(
            ::std::mem::size_of::<LVCOLUMN>(),
            32usize,
            concat!("Size of: ", stringify!(LVCOLUMN))
        );
        assert_eq!(
            ::std::mem::align_of::<LVCOLUMN>(),
            8usize,
            concat!("Alignment of ", stringify!(LVCOLUMN))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVCOLUMN>())).mask as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LVCOLUMN),
                "::",
                stringify!(mask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVCOLUMN>())).fmt as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(LVCOLUMN),
                "::",
                stringify!(fmt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVCOLUMN>())).cx as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LVCOLUMN),
                "::",
                stringify!(cx)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVCOLUMN>())).pszText as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LVCOLUMN),
                "::",
                stringify!(pszText)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVCOLUMN>())).cchTextMax as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LVCOLUMN),
                "::",
                stringify!(cchTextMax)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVCOLUMN>())).iSubItem as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(LVCOLUMN),
                "::",
                stringify!(iSubItem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct LVITEM {
        pub mask: ::std::os::raw::c_int,
        pub iItem: ::std::os::raw::c_int,
        pub iSubItem: ::std::os::raw::c_int,
        pub state: ::std::os::raw::c_int,
        pub stateMask: ::std::os::raw::c_int,
        pub pszText: *mut ::std::os::raw::c_char,
        pub cchTextMax: ::std::os::raw::c_int,
        pub iImage: ::std::os::raw::c_int,
        pub lParam: root::LPARAM,
    }
    #[test]
    fn bindgen_test_layout_LVITEM() {
        assert_eq!(
            ::std::mem::size_of::<LVITEM>(),
            48usize,
            concat!("Size of: ", stringify!(LVITEM))
        );
        assert_eq!(
            ::std::mem::align_of::<LVITEM>(),
            8usize,
            concat!("Alignment of ", stringify!(LVITEM))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVITEM>())).mask as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LVITEM),
                "::",
                stringify!(mask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVITEM>())).iItem as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(LVITEM),
                "::",
                stringify!(iItem)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVITEM>())).iSubItem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LVITEM),
                "::",
                stringify!(iSubItem)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVITEM>())).state as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(LVITEM),
                "::",
                stringify!(state)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVITEM>())).stateMask as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LVITEM),
                "::",
                stringify!(stateMask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVITEM>())).pszText as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LVITEM),
                "::",
                stringify!(pszText)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVITEM>())).cchTextMax as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(LVITEM),
                "::",
                stringify!(cchTextMax)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVITEM>())).iImage as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(LVITEM),
                "::",
                stringify!(iImage)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVITEM>())).lParam as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(LVITEM),
                "::",
                stringify!(lParam)
            )
        );
    }
    pub type PFNLVCOMPARE = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::LPARAM,
            arg2: root::LPARAM,
            arg3: root::LPARAM,
        ) -> ::std::os::raw::c_int,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HIMAGELIST__ {
        _unused: [u8; 0],
    }
    pub type HIMAGELIST = *mut root::HIMAGELIST__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct LVHITTESTINFO {
        pub pt: root::POINT,
        pub flags: root::UINT,
        pub iItem: ::std::os::raw::c_int,
        pub iSubItem: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_LVHITTESTINFO() {
        assert_eq!(
            ::std::mem::size_of::<LVHITTESTINFO>(),
            20usize,
            concat!("Size of: ", stringify!(LVHITTESTINFO))
        );
        assert_eq!(
            ::std::mem::align_of::<LVHITTESTINFO>(),
            4usize,
            concat!("Alignment of ", stringify!(LVHITTESTINFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVHITTESTINFO>())).pt as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LVHITTESTINFO),
                "::",
                stringify!(pt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVHITTESTINFO>())).flags as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LVHITTESTINFO),
                "::",
                stringify!(flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVHITTESTINFO>())).iItem as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(LVHITTESTINFO),
                "::",
                stringify!(iItem)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LVHITTESTINFO>())).iSubItem as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LVHITTESTINFO),
                "::",
                stringify!(iSubItem)
            )
        );
    }
    pub type LPLVHITTESTINFO = *mut root::LVHITTESTINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NMLISTVIEW {
        pub hdr: root::NMHDR,
        pub iItem: ::std::os::raw::c_int,
        pub iSubItem: ::std::os::raw::c_int,
        pub uNewState: root::UINT,
        pub uOldState: root::UINT,
        pub uChanged: root::UINT,
        pub ptAction: root::POINT,
        pub lParam: root::LPARAM,
    }
    #[test]
    fn bindgen_test_layout_NMLISTVIEW() {
        assert_eq!(
            ::std::mem::size_of::<NMLISTVIEW>(),
            64usize,
            concat!("Size of: ", stringify!(NMLISTVIEW))
        );
        assert_eq!(
            ::std::mem::align_of::<NMLISTVIEW>(),
            8usize,
            concat!("Alignment of ", stringify!(NMLISTVIEW))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMLISTVIEW>())).hdr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(NMLISTVIEW),
                "::",
                stringify!(hdr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMLISTVIEW>())).iItem as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(NMLISTVIEW),
                "::",
                stringify!(iItem)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMLISTVIEW>())).iSubItem as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(NMLISTVIEW),
                "::",
                stringify!(iSubItem)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMLISTVIEW>())).uNewState as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(NMLISTVIEW),
                "::",
                stringify!(uNewState)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMLISTVIEW>())).uOldState as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(NMLISTVIEW),
                "::",
                stringify!(uOldState)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMLISTVIEW>())).uChanged as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(NMLISTVIEW),
                "::",
                stringify!(uChanged)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMLISTVIEW>())).ptAction as *const _ as usize },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(NMLISTVIEW),
                "::",
                stringify!(ptAction)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMLISTVIEW>())).lParam as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(NMLISTVIEW),
                "::",
                stringify!(lParam)
            )
        );
    }
    pub type LPNMLISTVIEW = *mut root::NMLISTVIEW;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NMLVDISPINFO {
        pub hdr: root::NMHDR,
        pub item: root::LVITEM,
    }
    #[test]
    fn bindgen_test_layout_NMLVDISPINFO() {
        assert_eq!(
            ::std::mem::size_of::<NMLVDISPINFO>(),
            72usize,
            concat!("Size of: ", stringify!(NMLVDISPINFO))
        );
        assert_eq!(
            ::std::mem::align_of::<NMLVDISPINFO>(),
            8usize,
            concat!("Alignment of ", stringify!(NMLVDISPINFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMLVDISPINFO>())).hdr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(NMLVDISPINFO),
                "::",
                stringify!(hdr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMLVDISPINFO>())).item as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(NMLVDISPINFO),
                "::",
                stringify!(item)
            )
        );
    }
    pub type LPNMLVDISPINFO = *mut root::NMLVDISPINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HDITEM {
        pub mask: root::UINT,
        pub cxy: ::std::os::raw::c_int,
        pub pszText: *mut ::std::os::raw::c_char,
        pub hbm: root::HBITMAP,
        pub cchTextMax: ::std::os::raw::c_int,
        pub fmt: ::std::os::raw::c_int,
        pub lParam: root::LPARAM,
        pub iImage: ::std::os::raw::c_int,
        pub iOrder: ::std::os::raw::c_int,
        pub type_: root::UINT,
        pub pvFilter: *mut ::std::os::raw::c_void,
        pub state: root::UINT,
    }
    #[test]
    fn bindgen_test_layout_HDITEM() {
        assert_eq!(
            ::std::mem::size_of::<HDITEM>(),
            72usize,
            concat!("Size of: ", stringify!(HDITEM))
        );
        assert_eq!(
            ::std::mem::align_of::<HDITEM>(),
            8usize,
            concat!("Alignment of ", stringify!(HDITEM))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HDITEM>())).mask as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HDITEM),
                "::",
                stringify!(mask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HDITEM>())).cxy as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(HDITEM),
                "::",
                stringify!(cxy)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HDITEM>())).pszText as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(HDITEM),
                "::",
                stringify!(pszText)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HDITEM>())).hbm as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(HDITEM),
                "::",
                stringify!(hbm)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HDITEM>())).cchTextMax as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(HDITEM),
                "::",
                stringify!(cchTextMax)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HDITEM>())).fmt as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(HDITEM),
                "::",
                stringify!(fmt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HDITEM>())).lParam as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(HDITEM),
                "::",
                stringify!(lParam)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HDITEM>())).iImage as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(HDITEM),
                "::",
                stringify!(iImage)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HDITEM>())).iOrder as *const _ as usize },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(HDITEM),
                "::",
                stringify!(iOrder)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HDITEM>())).type_ as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(HDITEM),
                "::",
                stringify!(type_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HDITEM>())).pvFilter as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(HDITEM),
                "::",
                stringify!(pvFilter)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HDITEM>())).state as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(HDITEM),
                "::",
                stringify!(state)
            )
        );
    }
    pub type LPHDITEM = *mut root::HDITEM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct TCITEM {
        pub mask: root::UINT,
        pub dwState: root::DWORD,
        pub dwStateMask: root::DWORD,
        pub pszText: *mut ::std::os::raw::c_char,
        pub cchTextMax: ::std::os::raw::c_int,
        pub iImage: ::std::os::raw::c_int,
        pub lParam: root::LPARAM,
    }
    #[test]
    fn bindgen_test_layout_TCITEM() {
        assert_eq!(
            ::std::mem::size_of::<TCITEM>(),
            40usize,
            concat!("Size of: ", stringify!(TCITEM))
        );
        assert_eq!(
            ::std::mem::align_of::<TCITEM>(),
            8usize,
            concat!("Alignment of ", stringify!(TCITEM))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TCITEM>())).mask as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TCITEM),
                "::",
                stringify!(mask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TCITEM>())).dwState as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(TCITEM),
                "::",
                stringify!(dwState)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TCITEM>())).dwStateMask as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TCITEM),
                "::",
                stringify!(dwStateMask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TCITEM>())).pszText as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TCITEM),
                "::",
                stringify!(pszText)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TCITEM>())).cchTextMax as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TCITEM),
                "::",
                stringify!(cchTextMax)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TCITEM>())).iImage as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(TCITEM),
                "::",
                stringify!(iImage)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TCITEM>())).lParam as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TCITEM),
                "::",
                stringify!(lParam)
            )
        );
    }
    pub type LPTCITEM = *mut root::TCITEM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagDRAWITEMSTRUCT {
        pub CtlType: root::UINT,
        pub CtlID: root::UINT,
        pub itemID: root::UINT,
        pub itemAction: root::UINT,
        pub itemState: root::UINT,
        pub hwndItem: root::HWND,
        pub hDC: root::HDC,
        pub rcItem: root::RECT,
        pub itemData: root::DWORD_PTR,
    }
    #[test]
    fn bindgen_test_layout_tagDRAWITEMSTRUCT() {
        assert_eq!(
            ::std::mem::size_of::<tagDRAWITEMSTRUCT>(),
            64usize,
            concat!("Size of: ", stringify!(tagDRAWITEMSTRUCT))
        );
        assert_eq!(
            ::std::mem::align_of::<tagDRAWITEMSTRUCT>(),
            8usize,
            concat!("Alignment of ", stringify!(tagDRAWITEMSTRUCT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagDRAWITEMSTRUCT>())).CtlType as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tagDRAWITEMSTRUCT),
                "::",
                stringify!(CtlType)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagDRAWITEMSTRUCT>())).CtlID as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(tagDRAWITEMSTRUCT),
                "::",
                stringify!(CtlID)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagDRAWITEMSTRUCT>())).itemID as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tagDRAWITEMSTRUCT),
                "::",
                stringify!(itemID)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<tagDRAWITEMSTRUCT>())).itemAction as *const _ as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(tagDRAWITEMSTRUCT),
                "::",
                stringify!(itemAction)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagDRAWITEMSTRUCT>())).itemState as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tagDRAWITEMSTRUCT),
                "::",
                stringify!(itemState)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagDRAWITEMSTRUCT>())).hwndItem as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tagDRAWITEMSTRUCT),
                "::",
                stringify!(hwndItem)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagDRAWITEMSTRUCT>())).hDC as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tagDRAWITEMSTRUCT),
                "::",
                stringify!(hDC)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagDRAWITEMSTRUCT>())).rcItem as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tagDRAWITEMSTRUCT),
                "::",
                stringify!(rcItem)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagDRAWITEMSTRUCT>())).itemData as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(tagDRAWITEMSTRUCT),
                "::",
                stringify!(itemData)
            )
        );
    }
    pub type DRAWITEMSTRUCT = root::tagDRAWITEMSTRUCT;
    pub type PDRAWITEMSTRUCT = *mut root::tagDRAWITEMSTRUCT;
    pub type LPDRAWITEMSTRUCT = *mut root::tagDRAWITEMSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagBITMAP {
        pub bmWidth: root::LONG,
        pub bmHeight: root::LONG,
        pub bmWidthBytes: root::LONG,
        pub bmPlanes: root::WORD,
        pub bmBitsPixel: root::WORD,
        pub bmBits: root::LPVOID,
    }
    #[test]
    fn bindgen_test_layout_tagBITMAP() {
        assert_eq!(
            ::std::mem::size_of::<tagBITMAP>(),
            24usize,
            concat!("Size of: ", stringify!(tagBITMAP))
        );
        assert_eq!(
            ::std::mem::align_of::<tagBITMAP>(),
            8usize,
            concat!("Alignment of ", stringify!(tagBITMAP))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagBITMAP>())).bmWidth as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tagBITMAP),
                "::",
                stringify!(bmWidth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagBITMAP>())).bmHeight as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(tagBITMAP),
                "::",
                stringify!(bmHeight)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagBITMAP>())).bmWidthBytes as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tagBITMAP),
                "::",
                stringify!(bmWidthBytes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagBITMAP>())).bmPlanes as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(tagBITMAP),
                "::",
                stringify!(bmPlanes)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagBITMAP>())).bmBitsPixel as *const _ as usize },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(tagBITMAP),
                "::",
                stringify!(bmBitsPixel)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagBITMAP>())).bmBits as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tagBITMAP),
                "::",
                stringify!(bmBits)
            )
        );
    }
    pub type BITMAP = root::tagBITMAP;
    pub type PBITMAP = *mut root::tagBITMAP;
    pub type LPBITMAP = *mut root::tagBITMAP;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct NOTIFYICONDATA {
        pub cbSize: root::DWORD,
        pub hWnd: root::HWND,
        pub uID: root::UINT,
        pub uFlags: root::UINT,
        pub uCallbackMessage: root::UINT,
        pub hIcon: root::HICON,
        pub szTip: [root::CHAR; 64usize],
    }
    #[test]
    fn bindgen_test_layout_NOTIFYICONDATA() {
        assert_eq!(
            ::std::mem::size_of::<NOTIFYICONDATA>(),
            104usize,
            concat!("Size of: ", stringify!(NOTIFYICONDATA))
        );
        assert_eq!(
            ::std::mem::align_of::<NOTIFYICONDATA>(),
            8usize,
            concat!("Alignment of ", stringify!(NOTIFYICONDATA))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NOTIFYICONDATA>())).cbSize as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(NOTIFYICONDATA),
                "::",
                stringify!(cbSize)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NOTIFYICONDATA>())).hWnd as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(NOTIFYICONDATA),
                "::",
                stringify!(hWnd)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NOTIFYICONDATA>())).uID as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(NOTIFYICONDATA),
                "::",
                stringify!(uID)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NOTIFYICONDATA>())).uFlags as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(NOTIFYICONDATA),
                "::",
                stringify!(uFlags)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<NOTIFYICONDATA>())).uCallbackMessage as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(NOTIFYICONDATA),
                "::",
                stringify!(uCallbackMessage)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NOTIFYICONDATA>())).hIcon as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(NOTIFYICONDATA),
                "::",
                stringify!(hIcon)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NOTIFYICONDATA>())).szTip as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(NOTIFYICONDATA),
                "::",
                stringify!(szTip)
            )
        );
    }
    pub type PNOTIFYICONDATA = *mut root::NOTIFYICONDATA;
    pub type LPNOTIFYICONDATA = *mut root::NOTIFYICONDATA;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HTREEITEM__ {
        _unused: [u8; 0],
    }
    pub type HTREEITEM = *mut root::HTREEITEM__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct TVITEM {
        pub mask: root::UINT,
        pub hItem: root::HTREEITEM,
        pub state: root::UINT,
        pub stateMask: root::UINT,
        pub pszText: *mut ::std::os::raw::c_char,
        pub cchTextMax: ::std::os::raw::c_int,
        pub iImage: ::std::os::raw::c_int,
        pub iSelectedImage: ::std::os::raw::c_int,
        pub cChildren: ::std::os::raw::c_int,
        pub lParam: root::LPARAM,
    }
    #[test]
    fn bindgen_test_layout_TVITEM() {
        assert_eq!(
            ::std::mem::size_of::<TVITEM>(),
            56usize,
            concat!("Size of: ", stringify!(TVITEM))
        );
        assert_eq!(
            ::std::mem::align_of::<TVITEM>(),
            8usize,
            concat!("Alignment of ", stringify!(TVITEM))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVITEM>())).mask as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TVITEM),
                "::",
                stringify!(mask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVITEM>())).hItem as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TVITEM),
                "::",
                stringify!(hItem)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVITEM>())).state as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TVITEM),
                "::",
                stringify!(state)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVITEM>())).stateMask as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(TVITEM),
                "::",
                stringify!(stateMask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVITEM>())).pszText as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TVITEM),
                "::",
                stringify!(pszText)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVITEM>())).cchTextMax as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(TVITEM),
                "::",
                stringify!(cchTextMax)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVITEM>())).iImage as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(TVITEM),
                "::",
                stringify!(iImage)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVITEM>())).iSelectedImage as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TVITEM),
                "::",
                stringify!(iSelectedImage)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVITEM>())).cChildren as *const _ as usize },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(TVITEM),
                "::",
                stringify!(cChildren)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVITEM>())).lParam as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TVITEM),
                "::",
                stringify!(lParam)
            )
        );
    }
    pub type TV_ITEM = root::TVITEM;
    pub type LPTVITEM = *mut root::TVITEM;
    pub type LPTV_ITEM = *mut root::TVITEM;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct TVINSERTSTRUCT {
        pub hParent: root::HTREEITEM,
        pub hInsertAfter: root::HTREEITEM,
        pub item: root::TVITEM,
    }
    #[test]
    fn bindgen_test_layout_TVINSERTSTRUCT() {
        assert_eq!(
            ::std::mem::size_of::<TVINSERTSTRUCT>(),
            72usize,
            concat!("Size of: ", stringify!(TVINSERTSTRUCT))
        );
        assert_eq!(
            ::std::mem::align_of::<TVINSERTSTRUCT>(),
            8usize,
            concat!("Alignment of ", stringify!(TVINSERTSTRUCT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVINSERTSTRUCT>())).hParent as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TVINSERTSTRUCT),
                "::",
                stringify!(hParent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVINSERTSTRUCT>())).hInsertAfter as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TVINSERTSTRUCT),
                "::",
                stringify!(hInsertAfter)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVINSERTSTRUCT>())).item as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TVINSERTSTRUCT),
                "::",
                stringify!(item)
            )
        );
    }
    pub type LPTVINSERTSTRUCT = *mut root::TVINSERTSTRUCT;
    pub type TV_INSERTSTRUCT = root::TVINSERTSTRUCT;
    pub type LPTV_INSERTSTRUCT = *mut root::TVINSERTSTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct TVHITTESTINFO {
        pub pt: root::POINT,
        pub flags: root::UINT,
        pub hItem: root::HTREEITEM,
    }
    #[test]
    fn bindgen_test_layout_TVHITTESTINFO() {
        assert_eq!(
            ::std::mem::size_of::<TVHITTESTINFO>(),
            24usize,
            concat!("Size of: ", stringify!(TVHITTESTINFO))
        );
        assert_eq!(
            ::std::mem::align_of::<TVHITTESTINFO>(),
            8usize,
            concat!("Alignment of ", stringify!(TVHITTESTINFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVHITTESTINFO>())).pt as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TVHITTESTINFO),
                "::",
                stringify!(pt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVHITTESTINFO>())).flags as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TVHITTESTINFO),
                "::",
                stringify!(flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TVHITTESTINFO>())).hItem as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TVHITTESTINFO),
                "::",
                stringify!(hItem)
            )
        );
    }
    pub type LPTVHITTESTINFO = *mut root::TVHITTESTINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NMTREEVIEW {
        pub hdr: root::NMHDR,
        pub action: root::UINT,
        pub itemOld: root::TVITEM,
        pub itemNew: root::TVITEM,
        pub ptDrag: root::POINT,
    }
    #[test]
    fn bindgen_test_layout_NMTREEVIEW() {
        assert_eq!(
            ::std::mem::size_of::<NMTREEVIEW>(),
            152usize,
            concat!("Size of: ", stringify!(NMTREEVIEW))
        );
        assert_eq!(
            ::std::mem::align_of::<NMTREEVIEW>(),
            8usize,
            concat!("Alignment of ", stringify!(NMTREEVIEW))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMTREEVIEW>())).hdr as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(NMTREEVIEW),
                "::",
                stringify!(hdr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMTREEVIEW>())).action as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(NMTREEVIEW),
                "::",
                stringify!(action)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMTREEVIEW>())).itemOld as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(NMTREEVIEW),
                "::",
                stringify!(itemOld)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMTREEVIEW>())).itemNew as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(NMTREEVIEW),
                "::",
                stringify!(itemNew)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NMTREEVIEW>())).ptDrag as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(NMTREEVIEW),
                "::",
                stringify!(ptDrag)
            )
        );
    }
    pub type LPNMTREEVIEW = *mut root::NMTREEVIEW;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MENUITEMINFO {
        pub cbSize: ::std::os::raw::c_uint,
        pub fMask: ::std::os::raw::c_uint,
        pub fType: ::std::os::raw::c_uint,
        pub fState: ::std::os::raw::c_uint,
        pub wID: ::std::os::raw::c_uint,
        pub hSubMenu: root::HMENU,
        pub hbmpChecked: root::HICON,
        pub hbmpUnchecked: root::HICON,
        pub dwItemData: root::DWORD_PTR,
        pub dwTypeData: *mut ::std::os::raw::c_char,
        pub cch: ::std::os::raw::c_int,
        pub hbmpItem: root::HBITMAP,
    }
    #[test]
    fn bindgen_test_layout_MENUITEMINFO() {
        assert_eq!(
            ::std::mem::size_of::<MENUITEMINFO>(),
            80usize,
            concat!("Size of: ", stringify!(MENUITEMINFO))
        );
        assert_eq!(
            ::std::mem::align_of::<MENUITEMINFO>(),
            8usize,
            concat!("Alignment of ", stringify!(MENUITEMINFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MENUITEMINFO>())).cbSize as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(MENUITEMINFO),
                "::",
                stringify!(cbSize)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MENUITEMINFO>())).fMask as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(MENUITEMINFO),
                "::",
                stringify!(fMask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MENUITEMINFO>())).fType as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(MENUITEMINFO),
                "::",
                stringify!(fType)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MENUITEMINFO>())).fState as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(MENUITEMINFO),
                "::",
                stringify!(fState)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MENUITEMINFO>())).wID as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(MENUITEMINFO),
                "::",
                stringify!(wID)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MENUITEMINFO>())).hSubMenu as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(MENUITEMINFO),
                "::",
                stringify!(hSubMenu)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MENUITEMINFO>())).hbmpChecked as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(MENUITEMINFO),
                "::",
                stringify!(hbmpChecked)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MENUITEMINFO>())).hbmpUnchecked as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(MENUITEMINFO),
                "::",
                stringify!(hbmpUnchecked)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MENUITEMINFO>())).dwItemData as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(MENUITEMINFO),
                "::",
                stringify!(dwItemData)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MENUITEMINFO>())).dwTypeData as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(MENUITEMINFO),
                "::",
                stringify!(dwTypeData)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MENUITEMINFO>())).cch as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(MENUITEMINFO),
                "::",
                stringify!(cch)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MENUITEMINFO>())).hbmpItem as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(MENUITEMINFO),
                "::",
                stringify!(hbmpItem)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MINMAXINFO {
        pub ptReserved: root::POINT,
        pub ptMaxSize: root::POINT,
        pub ptMaxPosition: root::POINT,
        pub ptMinTrackSize: root::POINT,
        pub ptMaxTrackSize: root::POINT,
    }
    #[test]
    fn bindgen_test_layout_MINMAXINFO() {
        assert_eq!(
            ::std::mem::size_of::<MINMAXINFO>(),
            40usize,
            concat!("Size of: ", stringify!(MINMAXINFO))
        );
        assert_eq!(
            ::std::mem::align_of::<MINMAXINFO>(),
            4usize,
            concat!("Alignment of ", stringify!(MINMAXINFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MINMAXINFO>())).ptReserved as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(MINMAXINFO),
                "::",
                stringify!(ptReserved)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MINMAXINFO>())).ptMaxSize as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(MINMAXINFO),
                "::",
                stringify!(ptMaxSize)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MINMAXINFO>())).ptMaxPosition as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(MINMAXINFO),
                "::",
                stringify!(ptMaxPosition)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MINMAXINFO>())).ptMinTrackSize as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(MINMAXINFO),
                "::",
                stringify!(ptMinTrackSize)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MINMAXINFO>())).ptMaxTrackSize as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(MINMAXINFO),
                "::",
                stringify!(ptMaxTrackSize)
            )
        );
    }
    pub type LPMINMAXINFO = *mut root::MINMAXINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct LOGFONT {
        pub lfHeight: ::std::os::raw::c_int,
        pub lfWidth: ::std::os::raw::c_int,
        pub lfEscapement: ::std::os::raw::c_int,
        pub lfOrientation: ::std::os::raw::c_int,
        pub lfWeight: ::std::os::raw::c_int,
        pub lfItalic: ::std::os::raw::c_char,
        pub lfUnderline: ::std::os::raw::c_char,
        pub lfStrikeOut: ::std::os::raw::c_char,
        pub lfCharSet: ::std::os::raw::c_char,
        pub lfOutPrecision: ::std::os::raw::c_char,
        pub lfClipPrecision: ::std::os::raw::c_char,
        pub lfQuality: ::std::os::raw::c_char,
        pub lfPitchAndFamily: ::std::os::raw::c_char,
        pub lfFaceName: [::std::os::raw::c_char; 32usize],
    }
    #[test]
    fn bindgen_test_layout_LOGFONT() {
        assert_eq!(
            ::std::mem::size_of::<LOGFONT>(),
            60usize,
            concat!("Size of: ", stringify!(LOGFONT))
        );
        assert_eq!(
            ::std::mem::align_of::<LOGFONT>(),
            4usize,
            concat!("Alignment of ", stringify!(LOGFONT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfHeight as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfHeight)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfWidth as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfWidth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfEscapement as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfEscapement)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfOrientation as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfOrientation)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfWeight as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfWeight)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfItalic as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfItalic)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfUnderline as *const _ as usize },
            21usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfUnderline)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfStrikeOut as *const _ as usize },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfStrikeOut)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfCharSet as *const _ as usize },
            23usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfCharSet)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfOutPrecision as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfOutPrecision)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfClipPrecision as *const _ as usize },
            25usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfClipPrecision)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfQuality as *const _ as usize },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfQuality)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfPitchAndFamily as *const _ as usize },
            27usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfPitchAndFamily)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<LOGFONT>())).lfFaceName as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(LOGFONT),
                "::",
                stringify!(lfFaceName)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct TEXTMETRIC {
        pub tmHeight: root::LONG,
        pub tmAscent: root::LONG,
        pub tmDescent: root::LONG,
        pub tmInternalLeading: root::LONG,
        pub tmAveCharWidth: root::LONG,
    }
    #[test]
    fn bindgen_test_layout_TEXTMETRIC() {
        assert_eq!(
            ::std::mem::size_of::<TEXTMETRIC>(),
            20usize,
            concat!("Size of: ", stringify!(TEXTMETRIC))
        );
        assert_eq!(
            ::std::mem::align_of::<TEXTMETRIC>(),
            4usize,
            concat!("Alignment of ", stringify!(TEXTMETRIC))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TEXTMETRIC>())).tmHeight as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TEXTMETRIC),
                "::",
                stringify!(tmHeight)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TEXTMETRIC>())).tmAscent as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(TEXTMETRIC),
                "::",
                stringify!(tmAscent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TEXTMETRIC>())).tmDescent as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TEXTMETRIC),
                "::",
                stringify!(tmDescent)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<TEXTMETRIC>())).tmInternalLeading as *const _ as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(TEXTMETRIC),
                "::",
                stringify!(tmInternalLeading)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<TEXTMETRIC>())).tmAveCharWidth as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TEXTMETRIC),
                "::",
                stringify!(tmAveCharWidth)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct PAINTSTRUCT {
        pub hdc: root::HDC,
        pub fErase: root::BOOL,
        pub rcPaint: root::RECT,
    }
    #[test]
    fn bindgen_test_layout_PAINTSTRUCT() {
        assert_eq!(
            ::std::mem::size_of::<PAINTSTRUCT>(),
            32usize,
            concat!("Size of: ", stringify!(PAINTSTRUCT))
        );
        assert_eq!(
            ::std::mem::align_of::<PAINTSTRUCT>(),
            8usize,
            concat!("Alignment of ", stringify!(PAINTSTRUCT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<PAINTSTRUCT>())).hdc as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(PAINTSTRUCT),
                "::",
                stringify!(hdc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<PAINTSTRUCT>())).fErase as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(PAINTSTRUCT),
                "::",
                stringify!(fErase)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<PAINTSTRUCT>())).rcPaint as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(PAINTSTRUCT),
                "::",
                stringify!(rcPaint)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SCROLLINFO {
        pub cbSize: root::UINT,
        pub fMask: root::UINT,
        pub nMin: ::std::os::raw::c_int,
        pub nMax: ::std::os::raw::c_int,
        pub nPage: root::UINT,
        pub nPos: ::std::os::raw::c_int,
        pub nTrackPos: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_SCROLLINFO() {
        assert_eq!(
            ::std::mem::size_of::<SCROLLINFO>(),
            28usize,
            concat!("Size of: ", stringify!(SCROLLINFO))
        );
        assert_eq!(
            ::std::mem::align_of::<SCROLLINFO>(),
            4usize,
            concat!("Alignment of ", stringify!(SCROLLINFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).cbSize as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(cbSize)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).fMask as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(fMask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).nMin as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(nMin)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).nMax as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(nMax)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).nPage as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(nPage)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).nPos as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(nPos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<SCROLLINFO>())).nTrackPos as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(SCROLLINFO),
                "::",
                stringify!(nTrackPos)
            )
        );
    }
    pub type LPSCROLLINFO = *mut root::SCROLLINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct STYLESTRUCT {
        pub styleOld: root::DWORD,
        pub styleNew: root::DWORD,
    }
    #[test]
    fn bindgen_test_layout_STYLESTRUCT() {
        assert_eq!(
            ::std::mem::size_of::<STYLESTRUCT>(),
            8usize,
            concat!("Size of: ", stringify!(STYLESTRUCT))
        );
        assert_eq!(
            ::std::mem::align_of::<STYLESTRUCT>(),
            4usize,
            concat!("Alignment of ", stringify!(STYLESTRUCT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<STYLESTRUCT>())).styleOld as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(STYLESTRUCT),
                "::",
                stringify!(styleOld)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<STYLESTRUCT>())).styleNew as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(STYLESTRUCT),
                "::",
                stringify!(styleNew)
            )
        );
    }
    pub type LPSTYLESTRUCT = *mut root::STYLESTRUCT;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _DROPFILES {
        pub pFiles: root::DWORD,
        pub pt: root::POINT,
        pub fNC: root::BOOL,
        pub fWide: root::BOOL,
    }
    #[test]
    fn bindgen_test_layout__DROPFILES() {
        assert_eq!(
            ::std::mem::size_of::<_DROPFILES>(),
            16usize,
            concat!("Size of: ", stringify!(_DROPFILES))
        );
        assert_eq!(
            ::std::mem::align_of::<_DROPFILES>(),
            4usize,
            concat!("Alignment of ", stringify!(_DROPFILES))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_DROPFILES>())).pFiles as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_DROPFILES),
                "::",
                stringify!(pFiles)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_DROPFILES>())).pt as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_DROPFILES),
                "::",
                stringify!(pt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_DROPFILES>())).fNC as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(_DROPFILES),
                "::",
                stringify!(fNC)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_DROPFILES>())).fWide as *const _ as usize },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(_DROPFILES),
                "::",
                stringify!(fWide)
            )
        );
    }
    pub type DROPFILES = root::_DROPFILES;
    pub type LPDROPFILES = *mut root::_DROPFILES;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct WINDOWPOS {
        pub hwnd: root::HWND,
        pub hwndInsertAfter: root::HWND,
        pub x: ::std::os::raw::c_int,
        pub y: ::std::os::raw::c_int,
        pub cx: ::std::os::raw::c_int,
        pub cy: ::std::os::raw::c_int,
        pub flags: root::UINT,
    }
    #[test]
    fn bindgen_test_layout_WINDOWPOS() {
        assert_eq!(
            ::std::mem::size_of::<WINDOWPOS>(),
            40usize,
            concat!("Size of: ", stringify!(WINDOWPOS))
        );
        assert_eq!(
            ::std::mem::align_of::<WINDOWPOS>(),
            8usize,
            concat!("Alignment of ", stringify!(WINDOWPOS))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<WINDOWPOS>())).hwnd as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(WINDOWPOS),
                "::",
                stringify!(hwnd)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<WINDOWPOS>())).hwndInsertAfter as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(WINDOWPOS),
                "::",
                stringify!(hwndInsertAfter)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<WINDOWPOS>())).x as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(WINDOWPOS),
                "::",
                stringify!(x)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<WINDOWPOS>())).y as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(WINDOWPOS),
                "::",
                stringify!(y)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<WINDOWPOS>())).cx as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(WINDOWPOS),
                "::",
                stringify!(cx)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<WINDOWPOS>())).cy as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(WINDOWPOS),
                "::",
                stringify!(cy)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<WINDOWPOS>())).flags as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(WINDOWPOS),
                "::",
                stringify!(flags)
            )
        );
    }
    pub type LPWINDOWPOS = *mut root::WINDOWPOS;
    pub type PWINDOWPOS = *mut root::WINDOWPOS;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct NCCALCSIZE_PARAMS {
        pub rgrc: [root::RECT; 3usize],
        pub lppos: root::PWINDOWPOS,
    }
    #[test]
    fn bindgen_test_layout_NCCALCSIZE_PARAMS() {
        assert_eq!(
            ::std::mem::size_of::<NCCALCSIZE_PARAMS>(),
            56usize,
            concat!("Size of: ", stringify!(NCCALCSIZE_PARAMS))
        );
        assert_eq!(
            ::std::mem::align_of::<NCCALCSIZE_PARAMS>(),
            8usize,
            concat!("Alignment of ", stringify!(NCCALCSIZE_PARAMS))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NCCALCSIZE_PARAMS>())).rgrc as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(NCCALCSIZE_PARAMS),
                "::",
                stringify!(rgrc)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<NCCALCSIZE_PARAMS>())).lppos as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(NCCALCSIZE_PARAMS),
                "::",
                stringify!(lppos)
            )
        );
    }
    pub type LPNCCALCSIZE_PARAMS = *mut root::NCCALCSIZE_PARAMS;
    pub type DLGPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> root::INT_PTR,
    >;
    pub type WNDPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> root::LRESULT,
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagGESTUREINFO {
        pub cbSize: root::UINT,
        pub dwFlags: root::DWORD,
        pub dwID: root::DWORD,
        pub hwndTarget: root::HWND,
        pub ptsLocation: root::POINTS,
        pub dwInstanceID: root::DWORD,
        pub dwSequenceID: root::DWORD,
        pub ullArguments: root::ULONGLONG,
        pub cbExtraArgs: root::UINT,
    }
    #[test]
    fn bindgen_test_layout_tagGESTUREINFO() {
        assert_eq!(
            ::std::mem::size_of::<tagGESTUREINFO>(),
            56usize,
            concat!("Size of: ", stringify!(tagGESTUREINFO))
        );
        assert_eq!(
            ::std::mem::align_of::<tagGESTUREINFO>(),
            8usize,
            concat!("Alignment of ", stringify!(tagGESTUREINFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagGESTUREINFO>())).cbSize as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tagGESTUREINFO),
                "::",
                stringify!(cbSize)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagGESTUREINFO>())).dwFlags as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(tagGESTUREINFO),
                "::",
                stringify!(dwFlags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagGESTUREINFO>())).dwID as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tagGESTUREINFO),
                "::",
                stringify!(dwID)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagGESTUREINFO>())).hwndTarget as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tagGESTUREINFO),
                "::",
                stringify!(hwndTarget)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagGESTUREINFO>())).ptsLocation as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tagGESTUREINFO),
                "::",
                stringify!(ptsLocation)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagGESTUREINFO>())).dwInstanceID as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(tagGESTUREINFO),
                "::",
                stringify!(dwInstanceID)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagGESTUREINFO>())).dwSequenceID as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tagGESTUREINFO),
                "::",
                stringify!(dwSequenceID)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagGESTUREINFO>())).ullArguments as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tagGESTUREINFO),
                "::",
                stringify!(ullArguments)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagGESTUREINFO>())).cbExtraArgs as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(tagGESTUREINFO),
                "::",
                stringify!(cbExtraArgs)
            )
        );
    }
    pub type GESTUREINFO = root::tagGESTUREINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagGESTURECONFIG {
        pub dwID: root::DWORD,
        pub dwWant: root::DWORD,
        pub dwBlock: root::DWORD,
    }
    #[test]
    fn bindgen_test_layout_tagGESTURECONFIG() {
        assert_eq!(
            ::std::mem::size_of::<tagGESTURECONFIG>(),
            12usize,
            concat!("Size of: ", stringify!(tagGESTURECONFIG))
        );
        assert_eq!(
            ::std::mem::align_of::<tagGESTURECONFIG>(),
            4usize,
            concat!("Alignment of ", stringify!(tagGESTURECONFIG))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagGESTURECONFIG>())).dwID as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tagGESTURECONFIG),
                "::",
                stringify!(dwID)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagGESTURECONFIG>())).dwWant as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(tagGESTURECONFIG),
                "::",
                stringify!(dwWant)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagGESTURECONFIG>())).dwBlock as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tagGESTURECONFIG),
                "::",
                stringify!(dwBlock)
            )
        );
    }
    pub type GESTURECONFIG = root::tagGESTURECONFIG;
    pub type PROPENUMPROCEX = ::std::option::Option<
        unsafe extern "C" fn(
            hwnd: root::HWND,
            lpszString: *const ::std::os::raw::c_char,
            hData: root::HANDLE,
            lParam: root::LPARAM,
        ) -> root::BOOL,
    >;
    pub type SWELL_ControlCreatorProc = ::std::option::Option<
        unsafe extern "C" fn(
            parent: root::HWND,
            cname: *const ::std::os::raw::c_char,
            idx: ::std::os::raw::c_int,
            classname: *const ::std::os::raw::c_char,
            style: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ) -> root::HWND,
    >;
    extern "C" {
        pub fn DllMain(
            hInstDLL: root::HINSTANCE,
            fdwReason: root::DWORD,
            lpvReserved: root::LPVOID,
        ) -> root::BOOL;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SWELL_DialogResourceIndex {
        _unused: [u8; 0],
    }
    extern "C" {
        pub static mut SWELL_curmodule_dialogresource_head: *mut root::SWELL_DialogResourceIndex;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SWELL_MenuResourceIndex {
        _unused: [u8; 0],
    }
    extern "C" {
        pub static mut SWELL_curmodule_menuresource_head: *mut root::SWELL_MenuResourceIndex;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _ICONINFO {
        pub fIcon: root::BOOL,
        pub xHotspot: root::DWORD,
        pub yHotspot: root::DWORD,
        pub hbmMask: root::HBITMAP,
        pub hbmColor: root::HBITMAP,
    }
    #[test]
    fn bindgen_test_layout__ICONINFO() {
        assert_eq!(
            ::std::mem::size_of::<_ICONINFO>(),
            32usize,
            concat!("Size of: ", stringify!(_ICONINFO))
        );
        assert_eq!(
            ::std::mem::align_of::<_ICONINFO>(),
            8usize,
            concat!("Alignment of ", stringify!(_ICONINFO))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_ICONINFO>())).fIcon as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_ICONINFO),
                "::",
                stringify!(fIcon)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_ICONINFO>())).xHotspot as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_ICONINFO),
                "::",
                stringify!(xHotspot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_ICONINFO>())).yHotspot as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_ICONINFO),
                "::",
                stringify!(yHotspot)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_ICONINFO>())).hbmMask as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_ICONINFO),
                "::",
                stringify!(hbmMask)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_ICONINFO>())).hbmColor as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_ICONINFO),
                "::",
                stringify!(hbmColor)
            )
        );
    }
    pub type ICONINFO = root::_ICONINFO;
    pub type PICONINFO = *mut root::_ICONINFO;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _COPYDATASTRUCT {
        pub dwData: root::ULONG_PTR,
        pub cbData: root::DWORD,
        pub lpData: root::PVOID,
    }
    #[test]
    fn bindgen_test_layout__COPYDATASTRUCT() {
        assert_eq!(
            ::std::mem::size_of::<_COPYDATASTRUCT>(),
            24usize,
            concat!("Size of: ", stringify!(_COPYDATASTRUCT))
        );
        assert_eq!(
            ::std::mem::align_of::<_COPYDATASTRUCT>(),
            8usize,
            concat!("Alignment of ", stringify!(_COPYDATASTRUCT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_COPYDATASTRUCT>())).dwData as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_COPYDATASTRUCT),
                "::",
                stringify!(dwData)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_COPYDATASTRUCT>())).cbData as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_COPYDATASTRUCT),
                "::",
                stringify!(cbData)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_COPYDATASTRUCT>())).lpData as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_COPYDATASTRUCT),
                "::",
                stringify!(lpData)
            )
        );
    }
    pub type COPYDATASTRUCT = root::_COPYDATASTRUCT;
    pub type PCOPYDATASTRUCT = *mut root::_COPYDATASTRUCT;
    extern "C" {
        #[link_name = "\u{1}_Z8lstrcpynPcPKci"]
        pub fn lstrcpyn(
            dest: *mut ::std::os::raw::c_char,
            src: *const ::std::os::raw::c_char,
            l: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_Z6MulDiviii"]
        pub fn MulDiv(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z5Sleepi"]
        pub fn Sleep(ms: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z12GetTickCountv"]
        pub fn GetTickCount() -> root::DWORD;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11GetFileTimeiP8FILETIMES0_S0_"]
        pub fn GetFileTime(
            filedes: ::std::os::raw::c_int,
            lpCreationTime: *mut root::FILETIME,
            lpLastAccessTime: *mut root::FILETIME,
            lpLastWriteTime: *mut root::FILETIME,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z25WritePrivateProfileStringPKcS0_S0_S0_"]
        pub fn WritePrivateProfileString(
            appname: *const ::std::os::raw::c_char,
            keyname: *const ::std::os::raw::c_char,
            val: *const ::std::os::raw::c_char,
            fn_: *const ::std::os::raw::c_char,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23GetPrivateProfileStringPKcS0_S0_PciS0_"]
        pub fn GetPrivateProfileString(
            appname: *const ::std::os::raw::c_char,
            keyname: *const ::std::os::raw::c_char,
            def: *const ::std::os::raw::c_char,
            ret: *mut ::std::os::raw::c_char,
            retsize: ::std::os::raw::c_int,
            fn_: *const ::std::os::raw::c_char,
        ) -> root::DWORD;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20GetPrivateProfileIntPKcS0_iS0_"]
        pub fn GetPrivateProfileInt(
            appname: *const ::std::os::raw::c_char,
            keyname: *const ::std::os::raw::c_char,
            def: ::std::os::raw::c_int,
            fn_: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23GetPrivateProfileStructPKcS0_PviS0_"]
        pub fn GetPrivateProfileStruct(
            appname: *const ::std::os::raw::c_char,
            keyname: *const ::std::os::raw::c_char,
            buf: *mut ::std::os::raw::c_void,
            bufsz: ::std::os::raw::c_int,
            fn_: *const ::std::os::raw::c_char,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z25WritePrivateProfileStructPKcS0_PKviS0_"]
        pub fn WritePrivateProfileStruct(
            appname: *const ::std::os::raw::c_char,
            keyname: *const ::std::os::raw::c_char,
            buf: *const ::std::os::raw::c_void,
            bufsz: ::std::os::raw::c_int,
            fn_: *const ::std::os::raw::c_char,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z26WritePrivateProfileSectionPKcS0_S0_"]
        pub fn WritePrivateProfileSection(
            appname: *const ::std::os::raw::c_char,
            strings: *const ::std::os::raw::c_char,
            fn_: *const ::std::os::raw::c_char,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z24GetPrivateProfileSectionPKcPcjS0_"]
        pub fn GetPrivateProfileSection(
            appname: *const ::std::os::raw::c_char,
            strout: *mut ::std::os::raw::c_char,
            strout_len: root::DWORD,
            fn_: *const ::std::os::raw::c_char,
        ) -> root::DWORD;
    }
    extern "C" {
        #[link_name = "\u{1}_Z17GetModuleFileNamePvPcj"]
        pub fn GetModuleFileName(
            hInst: root::HINSTANCE,
            fn_: *mut ::std::os::raw::c_char,
            nSize: root::DWORD,
        ) -> root::DWORD;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14SWELL_PtInRectPK4RECT5POINT"]
        pub fn SWELL_PtInRect(r: *const root::RECT, p: root::POINT) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12ShellExecuteP6HWND__PKcS2_S2_S2_i"]
        pub fn ShellExecute(
            hwndDlg: root::HWND,
            action: *const ::std::os::raw::c_char,
            content1: *const ::std::os::raw::c_char,
            content2: *const ::std::os::raw::c_char,
            content3: *const ::std::os::raw::c_char,
            blah: ::std::os::raw::c_int,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10MessageBoxP6HWND__PKcS2_i"]
        pub fn MessageBox(
            hwndParent: root::HWND,
            text: *const ::std::os::raw::c_char,
            caption: *const ::std::os::raw::c_char,
            type_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14BrowseForFilesPKcS0_S0_bS0_"]
        pub fn BrowseForFiles(
            text: *const ::std::os::raw::c_char,
            initialdir: *const ::std::os::raw::c_char,
            initialfile: *const ::std::os::raw::c_char,
            allowmul: bool,
            extlist: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}_Z17BrowseForSaveFilePKcS0_S0_S0_Pci"]
        pub fn BrowseForSaveFile(
            text: *const ::std::os::raw::c_char,
            initialdir: *const ::std::os::raw::c_char,
            initialfile: *const ::std::os::raw::c_char,
            extlist: *const ::std::os::raw::c_char,
            fn_: *mut ::std::os::raw::c_char,
            fnsize: ::std::os::raw::c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18BrowseForDirectoryPKcS0_Pci"]
        pub fn BrowseForDirectory(
            text: *const ::std::os::raw::c_char,
            initialdir: *const ::std::os::raw::c_char,
            fn_: *mut ::std::os::raw::c_char,
            fnsize: ::std::os::raw::c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22BrowseFile_SetTemplatePKcPFlP6HWND__jmlEP25SWELL_DialogResourceIndex"]
        pub fn BrowseFile_SetTemplate(
            dlgid: *const ::std::os::raw::c_char,
            dlgProc: root::DLGPROC,
            reshead: *mut root::SWELL_DialogResourceIndex,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z10GetDlgItemP6HWND__i"]
        pub fn GetDlgItem(arg1: root::HWND, arg2: ::std::os::raw::c_int) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10ShowWindowP6HWND__i"]
        pub fn ShowWindow(arg1: root::HWND, arg2: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z13DestroyWindowP6HWND__"]
        pub fn DestroyWindow(hwnd: root::HWND);
    }
    extern "C" {
        #[link_name = "\u{1}_Z20SWELL_GetGestureInfolP14tagGESTUREINFO"]
        pub fn SWELL_GetGestureInfo(lParam: root::LPARAM, gi: *mut root::GESTUREINFO)
        -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13SWELL_HideAppv"]
        pub fn SWELL_HideApp();
    }
    extern "C" {
        #[link_name = "\u{1}_Z14SetDlgItemTextP6HWND__iPKc"]
        pub fn SetDlgItemText(
            arg1: root::HWND,
            idx: ::std::os::raw::c_int,
            text: *const ::std::os::raw::c_char,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13SetDlgItemIntP6HWND__iii"]
        pub fn SetDlgItemInt(
            arg1: root::HWND,
            idx: ::std::os::raw::c_int,
            val: ::std::os::raw::c_int,
            issigned: ::std::os::raw::c_int,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13GetDlgItemIntP6HWND__iPai"]
        pub fn GetDlgItemInt(
            arg1: root::HWND,
            idx: ::std::os::raw::c_int,
            translated: *mut root::BOOL,
            issigned: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14GetDlgItemTextP6HWND__iPci"]
        pub fn GetDlgItemText(
            arg1: root::HWND,
            idx: ::std::os::raw::c_int,
            text: *mut ::std::os::raw::c_char,
            textlen: ::std::os::raw::c_int,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14CheckDlgButtonP6HWND__ii"]
        pub fn CheckDlgButton(
            hwnd: root::HWND,
            idx: ::std::os::raw::c_int,
            check: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z18IsDlgButtonCheckedP6HWND__i"]
        pub fn IsDlgButtonChecked(
            hwnd: root::HWND,
            idx: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12EnableWindowP6HWND__i"]
        pub fn EnableWindow(hwnd: root::HWND, enable: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z8SetFocusP6HWND__"]
        pub fn SetFocus(hwnd: root::HWND);
    }
    extern "C" {
        #[link_name = "\u{1}_Z8GetFocusv"]
        pub fn GetFocus() -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19SetForegroundWindowP6HWND__"]
        pub fn SetForegroundWindow(hwnd: root::HWND);
    }
    extern "C" {
        #[link_name = "\u{1}_Z19GetForegroundWindowv"]
        pub fn GetForegroundWindow() -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10SetCaptureP6HWND__"]
        pub fn SetCapture(hwnd: root::HWND) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10GetCapturev"]
        pub fn GetCapture() -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14ReleaseCapturev"]
        pub fn ReleaseCapture();
    }
    extern "C" {
        #[link_name = "\u{1}_Z7IsChildP6HWND__S0_"]
        pub fn IsChild(hwndParent: root::HWND, hwndChild: root::HWND) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z9GetParentP6HWND__"]
        pub fn GetParent(hwnd: root::HWND) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z9SetParentP6HWND__S0_"]
        pub fn SetParent(hwnd: root::HWND, newPar: root::HWND) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z9GetWindowP6HWND__i"]
        pub fn GetWindow(hwnd: root::HWND, what: ::std::os::raw::c_int) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11EnumWindowsPFaP6HWND__lEl"]
        pub fn EnumWindows(
            proc_: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::HWND, arg2: root::LPARAM) -> root::BOOL,
            >,
            lp: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12FindWindowExP6HWND__S0_PKcS2_"]
        pub fn FindWindowEx(
            par: root::HWND,
            lastw: root::HWND,
            classname: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
        ) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14ClientToScreenP6HWND__P5POINT"]
        pub fn ClientToScreen(hwnd: root::HWND, p: *mut root::POINT);
    }
    extern "C" {
        #[link_name = "\u{1}_Z14ScreenToClientP6HWND__P5POINT"]
        pub fn ScreenToClient(hwnd: root::HWND, p: *mut root::POINT);
    }
    extern "C" {
        #[link_name = "\u{1}_Z13GetWindowRectP6HWND__P4RECT"]
        pub fn GetWindowRect(hwnd: root::HWND, r: *mut root::RECT) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z24GetWindowContentViewRectP6HWND__P4RECT"]
        pub fn GetWindowContentViewRect(hwnd: root::HWND, r: *mut root::RECT);
    }
    extern "C" {
        #[link_name = "\u{1}_Z13GetClientRectP6HWND__P4RECT"]
        pub fn GetClientRect(hwnd: root::HWND, r: *mut root::RECT);
    }
    extern "C" {
        #[link_name = "\u{1}_Z15WindowFromPoint5POINT"]
        pub fn WindowFromPoint(p: root::POINT) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13WinOffsetRectP4RECTii"]
        pub fn WinOffsetRect(
            lprc: root::LPRECT,
            dx: ::std::os::raw::c_int,
            dy: ::std::os::raw::c_int,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10WinSetRectP4RECTiiii"]
        pub fn WinSetRect(
            lprc: root::LPRECT,
            xLeft: ::std::os::raw::c_int,
            yTop: ::std::os::raw::c_int,
            xRight: ::std::os::raw::c_int,
            yBottom: ::std::os::raw::c_int,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12WinUnionRectP4RECTPKS_S2_"]
        pub fn WinUnionRect(out: *mut root::RECT, in1: *const root::RECT, in2: *const root::RECT);
    }
    extern "C" {
        #[link_name = "\u{1}_Z16WinIntersectRectP4RECTPKS_S2_"]
        pub fn WinIntersectRect(
            out: *mut root::RECT,
            in1: *const root::RECT,
            in2: *const root::RECT,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12SetWindowPosP6HWND__S0_iiiii"]
        pub fn SetWindowPos(
            hwnd: root::HWND,
            unused: root::HWND,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            cx: ::std::os::raw::c_int,
            cy: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z20SWELL_SetWindowLevelP6HWND__i"]
        pub fn SWELL_SetWindowLevel(
            hwnd: root::HWND,
            newlevel: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14InvalidateRectP6HWND__PK4RECTi"]
        pub fn InvalidateRect(
            hwnd: root::HWND,
            r: *const root::RECT,
            eraseBk: ::std::os::raw::c_int,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12UpdateWindowP6HWND__"]
        pub fn UpdateWindow(hwnd: root::HWND);
    }
    extern "C" {
        #[link_name = "\u{1}_Z13GetWindowLongP6HWND__i"]
        pub fn GetWindowLong(hwnd: root::HWND, idx: ::std::os::raw::c_int) -> root::LONG_PTR;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13SetWindowLongP6HWND__il"]
        pub fn SetWindowLong(
            hwnd: root::HWND,
            idx: ::std::os::raw::c_int,
            val: root::LONG_PTR,
        ) -> root::LONG_PTR;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12ScrollWindowP6HWND__iiPK4RECTS3_"]
        pub fn ScrollWindow(
            hwnd: root::HWND,
            xamt: ::std::os::raw::c_int,
            yamt: ::std::os::raw::c_int,
            lpRect: *const root::RECT,
            lpClipRect: *const root::RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11EnumPropsExP6HWND__PFaS0_PKcPvlEl"]
        pub fn EnumPropsEx(
            arg1: root::HWND,
            arg2: root::PROPENUMPROCEX,
            arg3: root::LPARAM,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z7GetPropP6HWND__PKc"]
        pub fn GetProp(arg1: root::HWND, arg2: *const ::std::os::raw::c_char) -> root::HANDLE;
    }
    extern "C" {
        #[link_name = "\u{1}_Z7SetPropP6HWND__PKcPv"]
        pub fn SetProp(
            arg1: root::HWND,
            arg2: *const ::std::os::raw::c_char,
            arg3: root::HANDLE,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10RemovePropP6HWND__PKc"]
        pub fn RemoveProp(arg1: root::HWND, arg2: *const ::std::os::raw::c_char) -> root::HANDLE;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15IsWindowVisibleP6HWND__"]
        pub fn IsWindowVisible(hwnd: root::HWND) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z8IsWindowP6HWND__"]
        pub fn IsWindow(hwnd: root::HWND) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z8SetTimerP6HWND__mjPFvS0_jmjE"]
        pub fn SetTimer(
            hwnd: root::HWND,
            timerid: root::UINT_PTR,
            rate: root::UINT,
            tProc: root::TIMERPROC,
        ) -> root::UINT_PTR;
    }
    extern "C" {
        #[link_name = "\u{1}_Z9KillTimerP6HWND__m"]
        pub fn KillTimer(hwnd: root::HWND, timerid: root::UINT_PTR) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z35ListView_SetExtendedListViewStyleExP6HWND__ii"]
        pub fn ListView_SetExtendedListViewStyleEx(
            h: root::HWND,
            mask: ::std::os::raw::c_int,
            style: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z21ListView_InsertColumnP6HWND__iPK8LVCOLUMN"]
        pub fn ListView_InsertColumn(
            h: root::HWND,
            pos: ::std::os::raw::c_int,
            lvc: *const root::LVCOLUMN,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z21ListView_DeleteColumnP6HWND__i"]
        pub fn ListView_DeleteColumn(h: root::HWND, pos: ::std::os::raw::c_int) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18ListView_SetColumnP6HWND__iPK8LVCOLUMN"]
        pub fn ListView_SetColumn(
            h: root::HWND,
            pos: ::std::os::raw::c_int,
            lvc: *const root::LVCOLUMN,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z23ListView_GetColumnWidthP6HWND__i"]
        pub fn ListView_GetColumnWidth(
            h: root::HWND,
            pos: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19ListView_InsertItemP6HWND__PK6LVITEM"]
        pub fn ListView_InsertItem(
            h: root::HWND,
            item: *const root::LVITEM,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20ListView_SetItemTextP6HWND__iiPKc"]
        pub fn ListView_SetItemText(
            h: root::HWND,
            ipos: ::std::os::raw::c_int,
            cpos: ::std::os::raw::c_int,
            txt: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z16ListView_SetItemP6HWND__P6LVITEM"]
        pub fn ListView_SetItem(h: root::HWND, item: *mut root::LVITEM) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20ListView_GetNextItemP6HWND__ii"]
        pub fn ListView_GetNextItem(
            h: root::HWND,
            istart: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16ListView_GetItemP6HWND__P6LVITEM"]
        pub fn ListView_GetItem(h: root::HWND, item: *mut root::LVITEM) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21ListView_GetItemStateP6HWND__ij"]
        pub fn ListView_GetItemState(
            h: root::HWND,
            ipos: ::std::os::raw::c_int,
            mask: root::UINT,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19ListView_DeleteItemP6HWND__i"]
        pub fn ListView_DeleteItem(h: root::HWND, ipos: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z23ListView_DeleteAllItemsP6HWND__"]
        pub fn ListView_DeleteAllItems(h: root::HWND);
    }
    extern "C" {
        #[link_name = "\u{1}_Z25ListView_GetSelectedCountP6HWND__"]
        pub fn ListView_GetSelectedCount(h: root::HWND) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21ListView_GetItemCountP6HWND__"]
        pub fn ListView_GetItemCount(h: root::HWND) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z25ListView_GetSelectionMarkP6HWND__"]
        pub fn ListView_GetSelectionMark(h: root::HWND) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23ListView_SetColumnWidthP6HWND__ii"]
        pub fn ListView_SetColumnWidth(
            h: root::HWND,
            colpos: ::std::os::raw::c_int,
            wid: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z21ListView_SetItemStateP6HWND__ijj"]
        pub fn ListView_SetItemState(
            h: root::HWND,
            item: ::std::os::raw::c_int,
            state: root::UINT,
            statemask: root::UINT,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20ListView_RedrawItemsP6HWND__ii"]
        pub fn ListView_RedrawItems(
            h: root::HWND,
            startitem: ::std::os::raw::c_int,
            enditem: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z21ListView_SetItemCountP6HWND__i"]
        pub fn ListView_SetItemCount(h: root::HWND, cnt: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z22ListView_EnsureVisibleP6HWND__ia"]
        pub fn ListView_EnsureVisible(h: root::HWND, i: ::std::os::raw::c_int, pok: root::BOOL);
    }
    extern "C" {
        #[link_name = "\u{1}_Z23ListView_GetSubItemRectP6HWND__iiiP4RECT"]
        pub fn ListView_GetSubItemRect(
            h: root::HWND,
            item: ::std::os::raw::c_int,
            subitem: ::std::os::raw::c_int,
            code: ::std::os::raw::c_int,
            r: *mut root::RECT,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21ListView_SetImageListP6HWND__P12HIMAGELIST__i"]
        pub fn ListView_SetImageList(
            h: root::HWND,
            imagelist: root::HIMAGELIST,
            which: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z16ListView_HitTestP6HWND__P13LVHITTESTINFO"]
        pub fn ListView_HitTest(
            h: root::HWND,
            pinf: *mut root::LVHITTESTINFO,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23ListView_SubItemHitTestP6HWND__P13LVHITTESTINFO"]
        pub fn ListView_SubItemHitTest(
            h: root::HWND,
            pinf: *mut root::LVHITTESTINFO,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20ListView_GetItemTextP6HWND__iiPci"]
        pub fn ListView_GetItemText(
            hwnd: root::HWND,
            item: ::std::os::raw::c_int,
            subitem: ::std::os::raw::c_int,
            text: *mut ::std::os::raw::c_char,
            textmax: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z18ListView_SortItemsP6HWND__PFilllEl"]
        pub fn ListView_SortItems(hwnd: root::HWND, compf: root::PFNLVCOMPARE, parm: root::LPARAM);
    }
    extern "C" {
        #[link_name = "\u{1}_Z20ListView_GetItemRectP6HWND__iP4RECTi"]
        pub fn ListView_GetItemRect(
            h: root::HWND,
            item: ::std::os::raw::c_int,
            r: *mut root::RECT,
            code: ::std::os::raw::c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15ListView_ScrollP6HWND__ii"]
        pub fn ListView_Scroll(
            h: root::HWND,
            xscroll: ::std::os::raw::c_int,
            yscroll: ::std::os::raw::c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20ListView_GetTopIndexP6HWND__"]
        pub fn ListView_GetTopIndex(h: root::HWND) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z24ListView_GetCountPerPageP6HWND__"]
        pub fn ListView_GetCountPerPage(h: root::HWND) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z28ListView_SetColumnOrderArrayP6HWND__iPi"]
        pub fn ListView_SetColumnOrderArray(
            h: root::HWND,
            cnt: ::std::os::raw::c_int,
            arr: *mut ::std::os::raw::c_int,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z28ListView_GetColumnOrderArrayP6HWND__iPi"]
        pub fn ListView_GetColumnOrderArray(
            h: root::HWND,
            cnt: ::std::os::raw::c_int,
            arr: *mut ::std::os::raw::c_int,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18ListView_GetHeaderP6HWND__"]
        pub fn ListView_GetHeader(h: root::HWND) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19Header_GetItemCountP6HWND__"]
        pub fn Header_GetItemCount(h: root::HWND) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14Header_GetItemP6HWND__iP6HDITEM"]
        pub fn Header_GetItem(
            h: root::HWND,
            col: ::std::os::raw::c_int,
            hi: *mut root::HDITEM,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14Header_SetItemP6HWND__iP6HDITEM"]
        pub fn Header_SetItem(
            h: root::HWND,
            col: ::std::os::raw::c_int,
            hi: *mut root::HDITEM,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z29SWELL_GetListViewHeaderHeightP6HWND__"]
        pub fn SWELL_GetListViewHeaderHeight(h: root::HWND) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18ImageList_CreateExv"]
        pub fn ImageList_CreateEx() -> root::HIMAGELIST;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16ImageList_RemoveP12HIMAGELIST__i"]
        pub fn ImageList_Remove(list: root::HIMAGELIST, idx: ::std::os::raw::c_int) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21ImageList_ReplaceIconP12HIMAGELIST__iP9HGDIOBJ__"]
        pub fn ImageList_ReplaceIcon(
            list: root::HIMAGELIST,
            offset: ::std::os::raw::c_int,
            image: root::HICON,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13ImageList_AddP12HIMAGELIST__P9HGDIOBJ__S2_"]
        pub fn ImageList_Add(
            list: root::HIMAGELIST,
            image: root::HBITMAP,
            mask: root::HBITMAP,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z17ImageList_DestroyP12HIMAGELIST__"]
        pub fn ImageList_Destroy(arg1: root::HIMAGELIST);
    }
    extern "C" {
        #[link_name = "\u{1}_Z20TabCtrl_GetItemCountP6HWND__"]
        pub fn TabCtrl_GetItemCount(hwnd: root::HWND) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18TabCtrl_DeleteItemP6HWND__i"]
        pub fn TabCtrl_DeleteItem(hwnd: root::HWND, idx: ::std::os::raw::c_int) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18TabCtrl_InsertItemP6HWND__iP6TCITEM"]
        pub fn TabCtrl_InsertItem(
            hwnd: root::HWND,
            idx: ::std::os::raw::c_int,
            item: *mut root::TCITEM,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z17TabCtrl_SetCurSelP6HWND__i"]
        pub fn TabCtrl_SetCurSel(
            hwnd: root::HWND,
            idx: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z17TabCtrl_GetCurSelP6HWND__"]
        pub fn TabCtrl_GetCurSel(hwnd: root::HWND) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18TabCtrl_AdjustRectP6HWND__aP4RECT"]
        pub fn TabCtrl_AdjustRect(
            hwnd: root::HWND,
            fLarger: root::BOOL,
            r: *mut root::RECT,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19TreeView_InsertItemP6HWND__P14TVINSERTSTRUCT"]
        pub fn TreeView_InsertItem(
            hwnd: root::HWND,
            ins: *mut root::TV_INSERTSTRUCT,
        ) -> root::HTREEITEM;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15TreeView_ExpandP6HWND__P11HTREEITEM__j"]
        pub fn TreeView_Expand(
            hwnd: root::HWND,
            item: root::HTREEITEM,
            flag: root::UINT,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21TreeView_GetSelectionP6HWND__"]
        pub fn TreeView_GetSelection(hwnd: root::HWND) -> root::HTREEITEM;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19TreeView_DeleteItemP6HWND__P11HTREEITEM__"]
        pub fn TreeView_DeleteItem(hwnd: root::HWND, item: root::HTREEITEM);
    }
    extern "C" {
        #[link_name = "\u{1}_Z23TreeView_DeleteAllItemsP6HWND__"]
        pub fn TreeView_DeleteAllItems(hwnd: root::HWND);
    }
    extern "C" {
        #[link_name = "\u{1}_Z19TreeView_SelectItemP6HWND__P11HTREEITEM__"]
        pub fn TreeView_SelectItem(hwnd: root::HWND, item: root::HTREEITEM);
    }
    extern "C" {
        #[link_name = "\u{1}_Z16TreeView_GetItemP6HWND__P6TVITEM"]
        pub fn TreeView_GetItem(hwnd: root::HWND, pitem: root::LPTVITEM) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16TreeView_SetItemP6HWND__P6TVITEM"]
        pub fn TreeView_SetItem(hwnd: root::HWND, pitem: root::LPTVITEM) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16TreeView_HitTestP6HWND__P13TVHITTESTINFO"]
        pub fn TreeView_HitTest(hwnd: root::HWND, hti: *mut root::TVHITTESTINFO)
        -> root::HTREEITEM;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18TreeView_SetIndentP6HWND__i"]
        pub fn TreeView_SetIndent(hwnd: root::HWND, indent: ::std::os::raw::c_int) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z17TreeView_GetChildP6HWND__P11HTREEITEM__"]
        pub fn TreeView_GetChild(hwnd: root::HWND, item: root::HTREEITEM) -> root::HTREEITEM;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23TreeView_GetNextSiblingP6HWND__P11HTREEITEM__"]
        pub fn TreeView_GetNextSibling(hwnd: root::HWND, item: root::HTREEITEM) -> root::HTREEITEM;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16TreeView_GetRootP6HWND__"]
        pub fn TreeView_GetRoot(hwnd: root::HWND) -> root::HTREEITEM;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19TreeView_SetBkColorP6HWND__i"]
        pub fn TreeView_SetBkColor(hwnd: root::HWND, color: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z21TreeView_SetTextColorP6HWND__i"]
        pub fn TreeView_SetTextColor(hwnd: root::HWND, color: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z19ListView_SetBkColorP6HWND__i"]
        pub fn ListView_SetBkColor(hwnd: root::HWND, color: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z23ListView_SetTextBkColorP6HWND__i"]
        pub fn ListView_SetTextBkColor(hwnd: root::HWND, color: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z21ListView_SetTextColorP6HWND__i"]
        pub fn ListView_SetTextColor(hwnd: root::HWND, color: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z21ListView_SetGridColorP6HWND__i"]
        pub fn ListView_SetGridColor(hwnd: root::HWND, color: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z21ListView_SetSelColorsP6HWND__Pii"]
        pub fn ListView_SetSelColors(
            hwnd: root::HWND,
            colors: *mut ::std::os::raw::c_int,
            ncolors: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z22SWELL_ModalWindowStartP6HWND__"]
        pub fn SWELL_ModalWindowStart(hwnd: root::HWND) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20SWELL_ModalWindowRunPvPi"]
        pub fn SWELL_ModalWindowRun(
            ctx: *mut ::std::os::raw::c_void,
            ret: *mut ::std::os::raw::c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20SWELL_ModalWindowEndPv"]
        pub fn SWELL_ModalWindowEnd(ctx: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        #[link_name = "\u{1}_Z17SWELL_CloseWindowP6HWND__"]
        pub fn SWELL_CloseWindow(hwnd: root::HWND);
    }
    extern "C" {
        #[link_name = "\u{1}_Z15CreatePopupMenuv"]
        pub fn CreatePopupMenu() -> root::HMENU;
    }
    extern "C" {
        #[link_name = "\u{1}_Z17CreatePopupMenuExPKc"]
        pub fn CreatePopupMenuEx(title: *const ::std::os::raw::c_char) -> root::HMENU;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11DestroyMenuP7HMENU__"]
        pub fn DestroyMenu(hMenu: root::HMENU);
    }
    extern "C" {
        #[link_name = "\u{1}_Z11AddMenuItemP7HMENU__iPKci"]
        pub fn AddMenuItem(
            hMenu: root::HMENU,
            pos: ::std::os::raw::c_int,
            name: *const ::std::os::raw::c_char,
            tagid: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10GetSubMenuP7HMENU__i"]
        pub fn GetSubMenu(hMenu: root::HMENU, pos: ::std::os::raw::c_int) -> root::HMENU;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16GetMenuItemCountP7HMENU__"]
        pub fn GetMenuItemCount(hMenu: root::HMENU) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13GetMenuItemIDP7HMENU__i"]
        pub fn GetMenuItemID(
            hMenu: root::HMENU,
            pos: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19SetMenuItemModifierP7HMENU__iiij"]
        pub fn SetMenuItemModifier(
            hMenu: root::HMENU,
            idx: ::std::os::raw::c_int,
            flag: ::std::os::raw::c_int,
            code: ::std::os::raw::c_int,
            mask: ::std::os::raw::c_uint,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15SetMenuItemTextP7HMENU__iiPKc"]
        pub fn SetMenuItemText(
            hMenu: root::HMENU,
            idx: ::std::os::raw::c_int,
            flag: ::std::os::raw::c_int,
            text: *const ::std::os::raw::c_char,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14EnableMenuItemP7HMENU__ii"]
        pub fn EnableMenuItem(
            hMenu: root::HMENU,
            idx: ::std::os::raw::c_int,
            en: ::std::os::raw::c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10DeleteMenuP7HMENU__ii"]
        pub fn DeleteMenu(
            hMenu: root::HMENU,
            idx: ::std::os::raw::c_int,
            flag: ::std::os::raw::c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z13CheckMenuItemP7HMENU__ii"]
        pub fn CheckMenuItem(
            hMenu: root::HMENU,
            idx: ::std::os::raw::c_int,
            chk: ::std::os::raw::c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14InsertMenuItemP7HMENU__iaP12MENUITEMINFO"]
        pub fn InsertMenuItem(
            hMenu: root::HMENU,
            pos: ::std::os::raw::c_int,
            byPos: root::BOOL,
            mi: *mut root::MENUITEMINFO,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z16SWELL_InsertMenuP7HMENU__ijmPKc"]
        pub fn SWELL_InsertMenu(
            menu: root::HMENU,
            pos: ::std::os::raw::c_int,
            flag: ::std::os::raw::c_uint,
            idx: root::UINT_PTR,
            str: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z15GetMenuItemInfoP7HMENU__iaP12MENUITEMINFO"]
        pub fn GetMenuItemInfo(
            hMenu: root::HMENU,
            pos: ::std::os::raw::c_int,
            byPos: root::BOOL,
            mi: *mut root::MENUITEMINFO,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15SetMenuItemInfoP7HMENU__iaP12MENUITEMINFO"]
        pub fn SetMenuItemInfo(
            hMenu: root::HMENU,
            pos: ::std::os::raw::c_int,
            byPos: root::BOOL,
            mi: *mut root::MENUITEMINFO,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11DrawMenuBarP6HWND__"]
        pub fn DrawMenuBar(arg1: root::HWND);
    }
    extern "C" {
        #[link_name = "\u{1}_Z14SWELL_LoadMenuP23SWELL_MenuResourceIndexPKc"]
        pub fn SWELL_LoadMenu(
            head: *mut root::SWELL_MenuResourceIndex,
            resid: *const ::std::os::raw::c_char,
        ) -> root::HMENU;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14TrackPopupMenuP7HMENU__iiiiP6HWND__PK4RECT"]
        pub fn TrackPopupMenu(
            hMenu: root::HMENU,
            flags: ::std::os::raw::c_int,
            xpos: ::std::os::raw::c_int,
            ypos: ::std::os::raw::c_int,
            resvd: ::std::os::raw::c_int,
            hwnd: root::HWND,
            r: *const root::RECT,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z24SWELL_SetMenuDestinationP7HMENU__P6HWND__"]
        pub fn SWELL_SetMenuDestination(menu: root::HMENU, hwnd: root::HWND);
    }
    extern "C" {
        #[link_name = "\u{1}_Z19SWELL_DuplicateMenuP7HMENU__"]
        pub fn SWELL_DuplicateMenu(menu: root::HMENU) -> root::HMENU;
    }
    extern "C" {
        #[link_name = "\u{1}_Z7SetMenuP6HWND__P7HMENU__"]
        pub fn SetMenu(hwnd: root::HWND, menu: root::HMENU) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z7GetMenuP6HWND__"]
        pub fn GetMenu(hwnd: root::HWND) -> root::HMENU;
    }
    extern "C" {
        #[link_name = "\u{1}_Z26SWELL_GetDefaultWindowMenuv"]
        pub fn SWELL_GetDefaultWindowMenu() -> root::HMENU;
    }
    extern "C" {
        #[link_name = "\u{1}_Z26SWELL_SetDefaultWindowMenuP7HMENU__"]
        pub fn SWELL_SetDefaultWindowMenu(arg1: root::HMENU);
    }
    extern "C" {
        #[link_name = "\u{1}_Z31SWELL_GetDefaultModalWindowMenuv"]
        pub fn SWELL_GetDefaultModalWindowMenu() -> root::HMENU;
    }
    extern "C" {
        #[link_name = "\u{1}_Z31SWELL_SetDefaultModalWindowMenuP7HMENU__"]
        pub fn SWELL_SetDefaultModalWindowMenu(arg1: root::HMENU);
    }
    extern "C" {
        #[link_name = "\u{1}_Z20SWELL_GetCurrentMenuv"]
        pub fn SWELL_GetCurrentMenu() -> root::HMENU;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20SWELL_SetCurrentMenuP7HMENU__"]
        pub fn SWELL_SetCurrentMenu(arg1: root::HMENU);
    }
    extern "C" {
        #[link_name = "\u{1}_Z15SWELL_DialogBoxP25SWELL_DialogResourceIndexPKcP6HWND__PFlS4_jmlEl"]
        pub fn SWELL_DialogBox(
            reshead: *mut root::SWELL_DialogResourceIndex,
            resid: *const ::std::os::raw::c_char,
            parent: root::HWND,
            dlgproc: root::DLGPROC,
            param: root::LPARAM,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18SWELL_CreateDialogP25SWELL_DialogResourceIndexPKcP6HWND__PFlS4_jmlEl"]
        pub fn SWELL_CreateDialog(
            reshead: *mut root::SWELL_DialogResourceIndex,
            resid: *const ::std::os::raw::c_char,
            parent: root::HWND,
            dlgproc: root::DLGPROC,
            param: root::LPARAM,
        ) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z34SWELL_RegisterCustomControlCreatorPFP6HWND__S0_PKciS2_iiiiiE"]
        pub fn SWELL_RegisterCustomControlCreator(proc_: root::SWELL_ControlCreatorProc);
    }
    extern "C" {
        #[link_name = "\u{1}_Z36SWELL_UnregisterCustomControlCreatorPFP6HWND__S0_PKciS2_iiiiiE"]
        pub fn SWELL_UnregisterCustomControlCreator(proc_: root::SWELL_ControlCreatorProc);
    }
    extern "C" {
        #[link_name = "\u{1}_Z13DefWindowProcP6HWND__jml"]
        pub fn DefWindowProc(
            hwnd: root::HWND,
            msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        #[link_name = "\u{1}_Z9EndDialogP6HWND__i"]
        pub fn EndDialog(arg1: root::HWND, arg2: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z24SWELL_GetDefaultButtonIDP6HWND__b"]
        pub fn SWELL_GetDefaultButtonID(
            hwndDlg: root::HWND,
            onlyIfEnabled: bool,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11SendMessageP6HWND__jml"]
        pub fn SendMessage(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22SWELL_BroadcastMessagejml"]
        pub fn SWELL_BroadcastMessage(arg1: root::UINT, arg2: root::WPARAM, arg3: root::LPARAM);
    }
    extern "C" {
        #[link_name = "\u{1}_Z11PostMessageP6HWND__jml"]
        pub fn PostMessage(
            hwnd: root::HWND,
            msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z24SWELL_MessageQueue_Flushv"]
        pub fn SWELL_MessageQueue_Flush();
    }
    extern "C" {
        #[link_name = "\u{1}_Z24SWELL_MessageQueue_ClearP6HWND__"]
        pub fn SWELL_MessageQueue_Clear(h: root::HWND);
    }
    extern "C" {
        #[link_name = "\u{1}_Z16SWELL_KeyToASCIIiiPi"]
        pub fn SWELL_KeyToASCII(
            wParam: ::std::os::raw::c_int,
            lParam: ::std::os::raw::c_int,
            newflags: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16GetAsyncKeyStatei"]
        pub fn GetAsyncKeyState(key: ::std::os::raw::c_int) -> root::WORD;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12GetCursorPosP5POINT"]
        pub fn GetCursorPos(pt: *mut root::POINT);
    }
    extern "C" {
        #[link_name = "\u{1}_Z13GetMessagePosv"]
        pub fn GetMessagePos() -> root::DWORD;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16SWELL_LoadCursorPKc"]
        pub fn SWELL_LoadCursor(idx: *const ::std::os::raw::c_char) -> root::HCURSOR;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15SWELL_SetCursorP9HCURSOR__"]
        pub fn SWELL_SetCursor(curs: root::HCURSOR);
    }
    extern "C" {
        #[link_name = "\u{1}_Z29SWELL_EnableRightClickEmulatea"]
        pub fn SWELL_EnableRightClickEmulate(enable: root::BOOL);
    }
    extern "C" {
        #[link_name = "\u{1}_Z15SWELL_GetCursorv"]
        pub fn SWELL_GetCursor() -> root::HCURSOR;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22SWELL_GetLastSetCursorv"]
        pub fn SWELL_GetLastSetCursor() -> root::HCURSOR;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21SWELL_IsCursorVisiblev"]
        pub fn SWELL_IsCursorVisible() -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16SWELL_ShowCursora"]
        pub fn SWELL_ShowCursor(bShow: root::BOOL) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18SWELL_SetCursorPosii"]
        pub fn SWELL_SetCursorPos(X: ::std::os::raw::c_int, Y: ::std::os::raw::c_int)
        -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z17SWELL_GetViewPortP4RECTPKS_b"]
        pub fn SWELL_GetViewPort(r: *mut root::RECT, sourcerect: *const root::RECT, wantWork: bool);
    }
    extern "C" {
        #[link_name = "\u{1}_Z13OpenClipboardP6HWND__"]
        pub fn OpenClipboard(hwndDlg: root::HWND) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14CloseClipboardv"]
        pub fn CloseClipboard();
    }
    extern "C" {
        #[link_name = "\u{1}_Z16GetClipboardDataj"]
        pub fn GetClipboardData(type_: root::UINT) -> root::HANDLE;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14EmptyClipboardv"]
        pub fn EmptyClipboard();
    }
    extern "C" {
        #[link_name = "\u{1}_Z16SetClipboardDatajPv"]
        pub fn SetClipboardData(type_: root::UINT, h: root::HANDLE);
    }
    extern "C" {
        #[link_name = "\u{1}_Z23RegisterClipboardFormatPKc"]
        pub fn RegisterClipboardFormat(desc: *const ::std::os::raw::c_char) -> root::UINT;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20EnumClipboardFormatsj"]
        pub fn EnumClipboardFormats(lastfmt: root::UINT) -> root::UINT;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11GlobalAllocii"]
        pub fn GlobalAlloc(flags: ::std::os::raw::c_int, sz: ::std::os::raw::c_int)
        -> root::HANDLE;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10GlobalLockPv"]
        pub fn GlobalLock(h: root::HANDLE) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10GlobalSizePv"]
        pub fn GlobalSize(h: root::HANDLE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12GlobalUnlockPv"]
        pub fn GlobalUnlock(h: root::HANDLE);
    }
    extern "C" {
        #[link_name = "\u{1}_Z10GlobalFreePv"]
        pub fn GlobalFree(h: root::HANDLE);
    }
    extern "C" {
        #[link_name = "\u{1}_Z12CreateThreadPvjPFjS_ES_jPj"]
        pub fn CreateThread(
            TA: *mut ::std::os::raw::c_void,
            stackSize: root::DWORD,
            ThreadProc: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::LPVOID) -> root::DWORD,
            >,
            parm: root::LPVOID,
            cf: root::DWORD,
            tidOut: *mut root::DWORD,
        ) -> root::HANDLE;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11CreateEventPvaaPKc"]
        pub fn CreateEvent(
            SA: *mut ::std::os::raw::c_void,
            manualReset: root::BOOL,
            initialSig: root::BOOL,
            ignored: *const ::std::os::raw::c_char,
        ) -> root::HANDLE;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19CreateEventAsSocketPvaaPKc"]
        pub fn CreateEventAsSocket(
            SA: *mut ::std::os::raw::c_void,
            manualReset: root::BOOL,
            initialSig: root::BOOL,
            ignored: *const ::std::os::raw::c_char,
        ) -> root::HANDLE;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18GetCurrentThreadIdv"]
        pub fn GetCurrentThreadId() -> root::DWORD;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19WaitForSingleObjectPvj"]
        pub fn WaitForSingleObject(hand: root::HANDLE, msTO: root::DWORD) -> root::DWORD;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22WaitForAnySocketObjectiPPvj"]
        pub fn WaitForAnySocketObject(
            numObjs: ::std::os::raw::c_int,
            objs: *mut root::HANDLE,
            msTO: root::DWORD,
        ) -> root::DWORD;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11CloseHandlePv"]
        pub fn CloseHandle(hand: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z17SetThreadPriorityPvi"]
        pub fn SetThreadPriority(evt: root::HANDLE, prio: ::std::os::raw::c_int) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z8SetEventPv"]
        pub fn SetEvent(evt: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10ResetEventPv"]
        pub fn ResetEvent(evt: root::HANDLE) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z26SWELL_CreateProcessFromPIDi"]
        pub fn SWELL_CreateProcessFromPID(pid: ::std::os::raw::c_int) -> root::HANDLE;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19SWELL_CreateProcessPKciPS0_"]
        pub fn SWELL_CreateProcess(
            exe: *const ::std::os::raw::c_char,
            nparams: ::std::os::raw::c_int,
            params: *mut *const ::std::os::raw::c_char,
        ) -> root::HANDLE;
    }
    extern "C" {
        #[link_name = "\u{1}_Z24SWELL_GetProcessExitCodePv"]
        pub fn SWELL_GetProcessExitCode(hand: root::HANDLE) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18LoadLibraryGlobalsPKcb"]
        pub fn LoadLibraryGlobals(
            fileName: *const ::std::os::raw::c_char,
            symbolsAsGlobals: bool,
        ) -> root::HINSTANCE;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11LoadLibraryPKc"]
        pub fn LoadLibrary(fileName: *const ::std::os::raw::c_char) -> root::HINSTANCE;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14GetProcAddressPvPKc"]
        pub fn GetProcAddress(
            hInst: root::HINSTANCE,
            procName: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11FreeLibraryPv"]
        pub fn FreeLibrary(hInst: root::HINSTANCE) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15SWELL_GetBundlePv"]
        pub fn SWELL_GetBundle(hInst: root::HINSTANCE) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22SWELL_CreateMemContextP5HDC__ii"]
        pub fn SWELL_CreateMemContext(
            hdc: root::HDC,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ) -> root::HDC;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22SWELL_DeleteGfxContextP5HDC__"]
        pub fn SWELL_DeleteGfxContext(arg1: root::HDC);
    }
    extern "C" {
        #[link_name = "\u{1}_Z14SWELL_GetCtxGCP5HDC__"]
        pub fn SWELL_GetCtxGC(ctx: root::HDC) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        #[link_name = "\u{1}_Z23SWELL_GetCtxFrameBufferP5HDC__"]
        pub fn SWELL_GetCtxFrameBuffer(ctx: root::HDC) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        #[link_name = "\u{1}_Z20SWELL_PushClipRegionP5HDC__"]
        pub fn SWELL_PushClipRegion(ctx: root::HDC);
    }
    extern "C" {
        #[link_name = "\u{1}_Z19SWELL_SetClipRegionP5HDC__PK4RECT"]
        pub fn SWELL_SetClipRegion(ctx: root::HDC, r: *const root::RECT);
    }
    extern "C" {
        #[link_name = "\u{1}_Z19SWELL_PopClipRegionP5HDC__"]
        pub fn SWELL_PopClipRegion(ctx: root::HDC);
    }
    extern "C" {
        #[link_name = "\u{1}_Z18CreateFontIndirectP7LOGFONT"]
        pub fn CreateFontIndirect(arg1: *mut root::LOGFONT) -> root::HFONT;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10CreateFontiiiiiccccccccPKc"]
        pub fn CreateFont(
            lfHeight: ::std::os::raw::c_int,
            lfWidth: ::std::os::raw::c_int,
            lfEscapement: ::std::os::raw::c_int,
            lfOrientation: ::std::os::raw::c_int,
            lfWeight: ::std::os::raw::c_int,
            lfItalic: ::std::os::raw::c_char,
            lfUnderline: ::std::os::raw::c_char,
            lfStrikeOut: ::std::os::raw::c_char,
            lfCharSet: ::std::os::raw::c_char,
            lfOutPrecision: ::std::os::raw::c_char,
            lfClipPrecision: ::std::os::raw::c_char,
            lfQuality: ::std::os::raw::c_char,
            lfPitchAndFamily: ::std::os::raw::c_char,
            lfFaceName: *const ::std::os::raw::c_char,
        ) -> root::HFONT;
    }
    extern "C" {
        #[link_name = "\u{1}_Z9CreatePeniii"]
        pub fn CreatePen(
            attr: ::std::os::raw::c_int,
            wid: ::std::os::raw::c_int,
            col: ::std::os::raw::c_int,
        ) -> root::HPEN;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16CreateSolidBrushi"]
        pub fn CreateSolidBrush(col: ::std::os::raw::c_int) -> root::HBRUSH;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14CreatePenAlphaiiif"]
        pub fn CreatePenAlpha(
            attr: ::std::os::raw::c_int,
            wid: ::std::os::raw::c_int,
            col: ::std::os::raw::c_int,
            alpha: f32,
        ) -> root::HPEN;
    }
    extern "C" {
        #[link_name = "\u{1}_Z21CreateSolidBrushAlphaif"]
        pub fn CreateSolidBrushAlpha(col: ::std::os::raw::c_int, alpha: f32) -> root::HBRUSH;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12SelectObjectP5HDC__P9HGDIOBJ__"]
        pub fn SelectObject(ctx: root::HDC, pen: root::HGDIOBJ) -> root::HGDIOBJ;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14GetStockObjecti"]
        pub fn GetStockObject(wh: ::std::os::raw::c_int) -> root::HGDIOBJ;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12DeleteObjectP9HGDIOBJ__"]
        pub fn DeleteObject(arg1: root::HGDIOBJ);
    }
    extern "C" {
        #[link_name = "\u{1}_Z14SWELL_FillRectP5HDC__PK4RECTP9HGDIOBJ__"]
        pub fn SWELL_FillRect(ctx: root::HDC, r: *const root::RECT, br: root::HBRUSH);
    }
    extern "C" {
        #[link_name = "\u{1}_Z9RectangleP5HDC__iiii"]
        pub fn Rectangle(
            ctx: root::HDC,
            l: ::std::os::raw::c_int,
            t: ::std::os::raw::c_int,
            r: ::std::os::raw::c_int,
            b: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z7EllipseP5HDC__iiii"]
        pub fn Ellipse(
            ctx: root::HDC,
            l: ::std::os::raw::c_int,
            t: ::std::os::raw::c_int,
            r: ::std::os::raw::c_int,
            b: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z13SWELL_PolygonP5HDC__P5POINTi"]
        pub fn SWELL_Polygon(ctx: root::HDC, pts: *mut root::POINT, npts: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z8MoveToExP5HDC__iiP5POINT"]
        pub fn MoveToEx(
            ctx: root::HDC,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            op: *mut root::POINT,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z12SWELL_LineToP5HDC__ii"]
        pub fn SWELL_LineTo(ctx: root::HDC, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z14SWELL_SetPixelP5HDC__iii"]
        pub fn SWELL_SetPixel(
            ctx: root::HDC,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            c: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z12PolyBezierToP5HDC__P5POINTi"]
        pub fn PolyBezierTo(ctx: root::HDC, pts: *mut root::POINT, np: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z14SWELL_DrawTextP5HDC__PKciP4RECTi"]
        pub fn SWELL_DrawText(
            ctx: root::HDC,
            buf: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
            r: *mut root::RECT,
            align: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12SetTextColorP5HDC__i"]
        pub fn SetTextColor(ctx: root::HDC, col: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z12GetTextColorP5HDC__"]
        pub fn GetTextColor(ctx: root::HDC) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10SetBkColorP5HDC__i"]
        pub fn SetBkColor(ctx: root::HDC, col: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z9SetBkModeP5HDC__i"]
        pub fn SetBkMode(ctx: root::HDC, col: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z16GetGlyphIndicesWP5HDC__PwiPti"]
        pub fn GetGlyphIndicesW(
            ctx: root::HDC,
            buf: *mut u32,
            len: ::std::os::raw::c_int,
            indices: *mut ::std::os::raw::c_ushort,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z9RoundRectP5HDC__iiiiii"]
        pub fn RoundRect(
            ctx: root::HDC,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            x2: ::std::os::raw::c_int,
            y2: ::std::os::raw::c_int,
            xrnd: ::std::os::raw::c_int,
            yrnd: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z12PolyPolylineP5HDC__P5POINTPji"]
        pub fn PolyPolyline(
            ctx: root::HDC,
            pts: *mut root::POINT,
            cnts: *mut root::DWORD,
            nseg: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z14GetTextMetricsP5HDC__P10TEXTMETRIC"]
        pub fn GetTextMetrics(ctx: root::HDC, tm: *mut root::TEXTMETRIC) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11GetTextFaceP5HDC__iPc"]
        pub fn GetTextFace(
            ctx: root::HDC,
            nCount: ::std::os::raw::c_int,
            lpFaceName: root::LPTSTR,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z9GetObjectP9HGDIOBJ__iPv"]
        pub fn GetObject(
            icon: root::HICON,
            bmsz: ::std::os::raw::c_int,
            _bm: *mut ::std::os::raw::c_void,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18CreateIconIndirectP9_ICONINFO"]
        pub fn CreateIconIndirect(iconinfo: *mut root::ICONINFO) -> root::HICON;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14LoadNamedImagePKcb"]
        pub fn LoadNamedImage(
            name: *const ::std::os::raw::c_char,
            alphaFromMask: bool,
        ) -> root::HICON;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15DrawImageInRectP5HDC__P9HGDIOBJ__PK4RECT"]
        pub fn DrawImageInRect(ctx: root::HDC, img: root::HICON, r: *const root::RECT);
    }
    extern "C" {
        #[link_name = "\u{1}_Z6BitBltP5HDC__iiiiS0_iii"]
        pub fn BitBlt(
            hdcOut: root::HDC,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            hdcIn: root::HDC,
            xin: ::std::os::raw::c_int,
            yin: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z10StretchBltP5HDC__iiiiS0_iiiii"]
        pub fn StretchBlt(
            hdcOut: root::HDC,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            hdcIn: root::HDC,
            xin: ::std::os::raw::c_int,
            yin: ::std::os::raw::c_int,
            srcw: ::std::os::raw::c_int,
            srch: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z17StretchBltFromMemP5HDC__iiiiPKviii"]
        pub fn StretchBltFromMem(
            hdcOut: root::HDC,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            bits: *const ::std::os::raw::c_void,
            srcw: ::std::os::raw::c_int,
            srch: ::std::os::raw::c_int,
            srcspan: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z19SWELL_GetScaling256v"]
        pub fn SWELL_GetScaling256() -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z17SWELL_ExtendedAPIPKcPv"]
        pub fn SWELL_ExtendedAPI(
            key: *const ::std::os::raw::c_char,
            v: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11GetSysColori"]
        pub fn GetSysColor(idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12CreateBitmapiiiiPh"]
        pub fn CreateBitmap(
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            numplanes: ::std::os::raw::c_int,
            bitsperpixel: ::std::os::raw::c_int,
            bits: *mut ::std::os::raw::c_uchar,
        ) -> root::HBITMAP;
    }
    extern "C" {
        #[link_name = "\u{1}_Z9SetOpaqueP6HWND__b"]
        pub fn SetOpaque(h: root::HWND, isopaque: bool);
    }
    extern "C" {
        #[link_name = "\u{1}_Z28SetAllowNoMiddleManRenderingP6HWND__b"]
        pub fn SetAllowNoMiddleManRendering(h: root::HWND, allow: bool);
    }
    extern "C" {
        #[link_name = "\u{1}_Z10BeginPaintP6HWND__P11PAINTSTRUCT"]
        pub fn BeginPaint(arg1: root::HWND, arg2: *mut root::PAINTSTRUCT) -> root::HDC;
    }
    extern "C" {
        #[link_name = "\u{1}_Z8EndPaintP6HWND__P11PAINTSTRUCT"]
        pub fn EndPaint(arg1: root::HWND, arg2: *mut root::PAINTSTRUCT) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z5GetDCP6HWND__"]
        pub fn GetDC(arg1: root::HWND) -> root::HDC;
    }
    extern "C" {
        #[link_name = "\u{1}_Z11GetWindowDCP6HWND__"]
        pub fn GetWindowDC(arg1: root::HWND) -> root::HDC;
    }
    extern "C" {
        #[link_name = "\u{1}_Z9ReleaseDCP6HWND__P5HDC__"]
        pub fn ReleaseDC(arg1: root::HWND, arg2: root::HDC);
    }
    extern "C" {
        #[link_name = "\u{1}_Z26SWELL_FillDialogBackgroundP5HDC__PK4RECTi"]
        pub fn SWELL_FillDialogBackground(
            hdc: root::HDC,
            r: *const root::RECT,
            level: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z20SWELL_CloneGDIObjectP9HGDIOBJ__"]
        pub fn SWELL_CloneGDIObject(a: root::HGDIOBJ) -> root::HGDIOBJ;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16GetSystemMetricsi"]
        pub fn GetSystemMetrics(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14DragQueryPointPvP5POINT"]
        pub fn DragQueryPoint(arg1: root::HDROP, arg2: root::LPPOINT) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z10DragFinishPv"]
        pub fn DragFinish(arg1: root::HDROP);
    }
    extern "C" {
        #[link_name = "\u{1}_Z13DragQueryFilePvjPcj"]
        pub fn DragQueryFile(
            arg1: root::HDROP,
            arg2: root::UINT,
            arg3: *mut ::std::os::raw::c_char,
            arg4: root::UINT,
        ) -> root::UINT;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22SWELL_InitiateDragDropP6HWND__P4RECTPKcPFvS4_E"]
        pub fn SWELL_InitiateDragDrop(
            arg1: root::HWND,
            srcrect: *mut root::RECT,
            srcfn: *const ::std::os::raw::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(droppath: *const ::std::os::raw::c_char),
            >,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z32SWELL_InitiateDragDropOfFileListP6HWND__P4RECTPPKciP9HGDIOBJ__"]
        pub fn SWELL_InitiateDragDropOfFileList(
            arg1: root::HWND,
            srcrect: *mut root::RECT,
            srclist: *mut *const ::std::os::raw::c_char,
            srccount: ::std::os::raw::c_int,
            icon: root::HICON,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z20SWELL_FinishDragDropv"]
        pub fn SWELL_FinishDragDrop();
    }
    extern "C" {
        #[link_name = "\u{1}_Z19SWELL_DrawFocusRectP6HWND__P4RECTPPv"]
        pub fn SWELL_DrawFocusRect(
            hwndPar: root::HWND,
            rct: *mut root::RECT,
            handle: *mut *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z21SWELL_MakeSetCurParmsffffP6HWND__bb"]
        pub fn SWELL_MakeSetCurParms(
            xscale: f32,
            yscale: f32,
            xtrans: f32,
            ytrans: f32,
            parent: root::HWND,
            doauto: bool,
            dosizetofit: bool,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z16SWELL_MakeButtoniPKciiiiii"]
        pub fn SWELL_MakeButton(
            def: ::std::os::raw::c_int,
            label: *const ::std::os::raw::c_char,
            idx: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z19SWELL_MakeEditFieldiiiiii"]
        pub fn SWELL_MakeEditField(
            idx: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15SWELL_MakeLabeliPKciiiiii"]
        pub fn SWELL_MakeLabel(
            align: ::std::os::raw::c_int,
            label: *const ::std::os::raw::c_char,
            idx: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z17SWELL_MakeControlPKciS0_iiiiii"]
        pub fn SWELL_MakeControl(
            cname: *const ::std::os::raw::c_char,
            idx: ::std::os::raw::c_int,
            classname: *const ::std::os::raw::c_char,
            style: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            exstyle: ::std::os::raw::c_int,
        ) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15SWELL_MakeComboiiiiii"]
        pub fn SWELL_MakeCombo(
            idx: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18SWELL_MakeGroupBoxPKciiiiii"]
        pub fn SWELL_MakeGroupBox(
            name: *const ::std::os::raw::c_char,
            idx: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            style: ::std::os::raw::c_int,
        ) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18SWELL_MakeCheckBoxPKciiiiii"]
        pub fn SWELL_MakeCheckBox(
            name: *const ::std::os::raw::c_char,
            idx: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z17SWELL_MakeListBoxiiiiii"]
        pub fn SWELL_MakeListBox(
            idx: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            styles: ::std::os::raw::c_int,
        ) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z22SWELL_Menu_AddMenuItemP7HMENU__PKcij"]
        pub fn SWELL_Menu_AddMenuItem(
            hMenu: root::HMENU,
            name: *const ::std::os::raw::c_char,
            idx: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_uint,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z26SWELL_GenerateMenuFromListP7HMENU__PKvi"]
        pub fn SWELL_GenerateMenuFromList(
            hMenu: root::HMENU,
            list: *const ::std::os::raw::c_void,
            listsz: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z28SWELL_GenerateDialogFromListPKvi"]
        pub fn SWELL_GenerateDialogFromList(
            list: *const ::std::os::raw::c_void,
            listsz: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z10_controlfpjj"]
        pub fn _controlfp(
            flag: ::std::os::raw::c_uint,
            mask: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint;
    }
    extern "C" {
        #[link_name = "\u{1}_Z31SWELL_Internal_PostMessage_Initv"]
        pub fn SWELL_Internal_PostMessage_Init();
    }
    extern "C" {
        #[link_name = "\u{1}_Z24SWELL_LoadCursorFromFilePKc"]
        pub fn SWELL_LoadCursorFromFile(fn_: *const ::std::os::raw::c_char) -> root::HCURSOR;
    }
    extern "C" {
        #[link_name = "\u{1}_Z27SWELL_SetWindowWantRaiseAmtP6HWND__i"]
        pub fn SWELL_SetWindowWantRaiseAmt(h: root::HWND, amt: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z27SWELL_GetWindowWantRaiseAmtP6HWND__"]
        pub fn SWELL_GetWindowWantRaiseAmt(arg1: root::HWND) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z30SWELL_SetListViewFastClickMaskP6HWND__i"]
        pub fn SWELL_SetListViewFastClickMask(hList: root::HWND, mask: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}_Z11GetTempPathiPc"]
        pub fn GetTempPath(sz: ::std::os::raw::c_int, buf: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "\u{1}_Z14SWELL_initargsPiPPPc"]
        pub fn SWELL_initargs(
            argc: *mut ::std::os::raw::c_int,
            argv: *mut *mut *mut ::std::os::raw::c_char,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z20SWELL_RunMessageLoopv"]
        pub fn SWELL_RunMessageLoop();
    }
    extern "C" {
        #[link_name = "\u{1}_Z25SWELL_CreateXBridgeWindowP6HWND__PPvP4RECT"]
        pub fn SWELL_CreateXBridgeWindow(
            viewpar: root::HWND,
            wref: *mut *mut ::std::os::raw::c_void,
            arg1: *mut root::RECT,
        ) -> root::HWND;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18SWELL_GenerateGUIDPv"]
        pub fn SWELL_GenerateGUID(g: *mut ::std::os::raw::c_void) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16EnumChildWindowsP6HWND__PFaS0_lEl"]
        pub fn EnumChildWindows(
            hwnd: root::HWND,
            cwEnumFunc: ::std::option::Option<
                unsafe extern "C" fn(arg1: root::HWND, arg2: root::LPARAM) -> root::BOOL,
            >,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16SWELL_IsGroupBoxP6HWND__"]
        pub fn SWELL_IsGroupBox(arg1: root::HWND) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z14SWELL_IsButtonP6HWND__"]
        pub fn SWELL_IsButton(arg1: root::HWND) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18SWELL_IsStaticTextP6HWND__"]
        pub fn SWELL_IsStaticText(arg1: root::HWND) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z27SWELL_GetDesiredControlSizeP6HWND__P4RECT"]
        pub fn SWELL_GetDesiredControlSize(hwnd: root::HWND, r: *mut root::RECT);
    }
    extern "C" {
        #[link_name = "\u{1}_Z17AddFontResourceExPKcjPv"]
        pub fn AddFontResourceEx(
            str: root::LPCTSTR,
            fl: root::DWORD,
            pdv: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z30SWELL_Register_Cursor_ResourcePKcS0_ii"]
        pub fn SWELL_Register_Cursor_Resource(
            idx: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            hotspot_x: ::std::os::raw::c_int,
            hotspot_y: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}_Z17SWELL_ChooseColorP6HWND__PiiS1_"]
        pub fn SWELL_ChooseColor(
            arg1: root::HWND,
            arg2: *mut ::std::os::raw::c_int,
            ncustom: ::std::os::raw::c_int,
            custom: *mut ::std::os::raw::c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z16SWELL_ChooseFontP6HWND__P7LOGFONT"]
        pub fn SWELL_ChooseFont(arg1: root::HWND, arg2: *mut root::LOGFONT) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z15IsWindowEnabledP6HWND__"]
        pub fn IsWindowEnabled(arg1: root::HWND) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}_Z12GetClassNameP6HWND__Pci"]
        pub fn GetClassName(
            arg1: root::HWND,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_Z18SWELL_SetClassNameP6HWND__PKc"]
        pub fn SWELL_SetClassName(arg1: root::HWND, arg2: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[link_name = "\u{1}_Z26SWELL_Internal_PostMessageP6HWND__jml"]
        pub fn SWELL_Internal_PostMessage(
            hwnd: root::HWND,
            msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::BOOL;
    }
    extern "C" {
        #[link_name = "\u{1}_Z35SWELL_Internal_PMQ_ClearAllMessagesP6HWND__"]
        pub fn SWELL_Internal_PMQ_ClearAllMessages(hwnd: root::HWND);
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct SWELL_AutoReleaseHelper {
        pub _address: u8,
    }
    #[test]
    fn bindgen_test_layout_SWELL_AutoReleaseHelper() {
        assert_eq!(
            ::std::mem::size_of::<SWELL_AutoReleaseHelper>(),
            1usize,
            concat!("Size of: ", stringify!(SWELL_AutoReleaseHelper))
        );
        assert_eq!(
            ::std::mem::align_of::<SWELL_AutoReleaseHelper>(),
            1usize,
            concat!("Alignment of ", stringify!(SWELL_AutoReleaseHelper))
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __locale_data {
        pub _address: u8,
    }
    pub type __builtin_va_list = [root::__va_list_tag; 1usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __va_list_tag {
        pub gp_offset: ::std::os::raw::c_uint,
        pub fp_offset: ::std::os::raw::c_uint,
        pub overflow_arg_area: *mut ::std::os::raw::c_void,
        pub reg_save_area: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout___va_list_tag() {
        assert_eq!(
            ::std::mem::size_of::<__va_list_tag>(),
            24usize,
            concat!("Size of: ", stringify!(__va_list_tag))
        );
        assert_eq!(
            ::std::mem::align_of::<__va_list_tag>(),
            8usize,
            concat!("Alignment of ", stringify!(__va_list_tag))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
}
