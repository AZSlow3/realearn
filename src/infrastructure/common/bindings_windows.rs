/* automatically generated by rust-bindgen */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub const ID_MAPPING_DIALOG: u32 = 101;
    pub const ID_MAPPINGS_DIALOG: u32 = 104;
    pub const ID_MAPPING_ROW_DIALOG: u32 = 106;
    pub const ID_MAPPING_ROWS_DIALOG: u32 = 108;
    pub const ID_MAIN_DIALOG: u32 = 111;
    pub const ID_ADD_MAPPING_BUTTON: u32 = 40000;
    pub const ID_MAPPING_ROW_REMOVE_BUTTON: u32 = 40000;
    pub const ID_FEEDBACK_DEVICE_COMBO_BOX: u32 = 40001;
    pub const ID_MAPPING_ROW_EDIT_BUTTON: u32 = 40001;
    pub const ID_SETTINGS_REVERSE_CHECK_BOX: u32 = 40001;
    pub const ID_IMPORT_BUTTON: u32 = 40002;
    pub const ID_MAPPING_ROW_DUPLICATE_BUTTON: u32 = 40002;
    pub const ID_SOURCE_CHANNEL_COMBO_BOX: u32 = 40002;
    pub const ID_LET_UNMATCHED_EVENTS_THROUGH_CHECK_BOX: u32 = 40003;
    pub const ID_MAPPING_ROW_LEARN_SOURCE_BUTTON: u32 = 40003;
    pub const ID_SOURCE_LEARN_BUTTON: u32 = 40003;
    pub const ID_LET_MATCHED_EVENTS_THROUGH_CHECK_BOX: u32 = 40004;
    pub const ID_SOURCE_TYPE_COMBO_BOX: u32 = 40004;
    pub const ID_UP_BUTTON: u32 = 40004;
    pub const ID_ALWAYS_AUTO_DETECT_MODE_CHECK_BOX: u32 = 40005;
    pub const ID_MAPPING_ROW_SOURCE_LABEL_TEXT: u32 = 40005;
    pub const ID_SOURCE_CHARACTER_LABEL_TEXT: u32 = 40005;
    pub const ID_EXPORT_BUTTON: u32 = 40006;
    pub const ID_MAPPING_ROW_TARGET_LABEL_TEXT: u32 = 40006;
    pub const ID_TARGET_TYPE_COMBO_BOX: u32 = 40006;
    pub const ID_FILTER_BY_SOURCE_BUTTON: u32 = 40007;
    pub const ID_MAPPING_ROW_GROUP_BOX: u32 = 40007;
    pub const ID_TARGET_FX_PARAMETER_COMBO_BOX: u32 = 40007;
    pub const ID_MAPPING_ROW_LEARN_TARGET_BUTTON: u32 = 40008;
    pub const ID_SEND_FEEDBACK_BUTTON: u32 = 40008;
    pub const ID_TARGET_TRACK_OR_COMMAND_COMBO_BOX: u32 = 40008;
    pub const ID_MAPPING_ROW_FEEDBACK_CHECK_BOX: u32 = 40009;
    pub const ID_SEND_FEEDBACK_ONLY_IF_ARMED_CHECK_BOX: u32 = 40009;
    pub const ID_SETTINGS_STEP_SIZE_LABEL_TEXT: u32 = 40009;
    pub const ID_FILTER_BY_TARGET_BUTTON: u32 = 40010;
    pub const ID_MAPPING_ROW_CONTROL_CHECK_BOX: u32 = 40010;
    pub const ID_SETTINGS_RESET_BUTTON: u32 = 40010;
    pub const ID_CLEAR_TARGET_FILTER_BUTTON: u32 = 40011;
    pub const ID_DOWN_BUTTON: u32 = 40011;
    pub const ID_SETTINGS_MODE_COMBO_BOX: u32 = 40011;
    pub const ID_CLEAR_SOURCE_FILTER_BUTTON: u32 = 40012;
    pub const ID_SETTINGS_MIN_TARGET_VALUE_EDIT_CONTROL: u32 = 40012;
    pub const ID_CONTROL_DEVICE_COMBO_BOX: u32 = 40013;
    pub const ID_SETTINGS_MIN_SOURCE_VALUE_EDIT_CONTROL: u32 = 40013;
    pub const ID_SETTINGS_MAX_TARGET_VALUE_EDIT_CONTROL: u32 = 40014;
    pub const ID_SETTINGS_MAX_SOURCE_VALUE_EDIT_CONTROL: u32 = 40015;
    pub const ID_TARGET_FX_FOCUS_CHECK_BOX: u32 = 40016;
    pub const ID_SETTINGS_ROTATE_CHECK_BOX: u32 = 40017;
    pub const ID_SETTINGS_MIN_SOURCE_VALUE_SLIDER_CONTROL: u32 = 40018;
    pub const ID_SETTINGS_MAX_SOURCE_VALUE_SLIDER_CONTROL: u32 = 40019;
    pub const ID_SETTINGS_MIN_TARGET_VALUE_SLIDER_CONTROL: u32 = 40020;
    pub const ID_SETTINGS_MAX_TARGET_VALUE_SLIDER_CONTROL: u32 = 40021;
    pub const ID_SETTINGS_MAX_STEP_SIZE_EDIT_CONTROL: u32 = 40022;
    pub const ID_SETTINGS_MAX_STEP_SIZE_SLIDER_CONTROL: u32 = 40023;
    pub const ID_SETTINGS_MIN_STEP_SIZE_SLIDER_CONTROL: u32 = 40024;
    pub const ID_SETTINGS_MIN_STEP_SIZE_EDIT_CONTROL: u32 = 40025;
    pub const ID_TARGET_TRACK_OR_CMD_LABEL_TEXT: u32 = 40026;
    pub const ID_TARGET_FX_PARAMETER_LABEL_TEXT: u32 = 40027;
    pub const ID_TARGET_FX_OR_SEND_LABEL_TEXT: u32 = 40028;
    pub const ID_SOURCE_NOTE_OR_CC_NUMBER_LABEL_TEXT: u32 = 40029;
    pub const ID_TARGET_FX_OR_SEND_COMBO_BOX: u32 = 40030;
    pub const ID_SETTINGS_SOURCE_LABEL_TEXT: u32 = 40031;
    pub const ID_SOURCE_RPN_CHECK_BOX: u32 = 40032;
    pub const ID_SETTINGS_MIN_SOURCE_LABEL_TEXT: u32 = 40033;
    pub const ID_SETTINGS_MIN_STEP_SIZE_LABEL_TEXT: u32 = 40034;
    pub const ID_SETTINGS_MAX_STEP_SIZE_LABEL_TEXT: u32 = 40035;
    pub const ID_SETTINGS_MAX_SOURCE_LABEL_TEXT: u32 = 40036;
    pub const ID_SETTINGS_MIN_STEP_SIZE_VALUE_TEXT: u32 = 40037;
    pub const ID_SETTINGS_MAX_TARGET_VALUE_TEXT: u32 = 40038;
    pub const ID_TARGET_INPUT_FX_CHECK_BOX: u32 = 40039;
    pub const ID_SETTINGS_MAX_STEP_SIZE_VALUE_TEXT: u32 = 40040;
    pub const ID_SETTINGS_MIN_TARGET_VALUE_TEXT: u32 = 40041;
    pub const ID_SETTINGS_MIN_TARGET_JUMP_SLIDER_CONTROL: u32 = 40042;
    pub const ID_SETTINGS_ROUND_TARGET_VALUE_CHECK_BOX: u32 = 40043;
    pub const ID_SETTINGS_MIN_TARGET_JUMP_EDIT_CONTROL: u32 = 40044;
    pub const ID_SETTINGS_MIN_TARGET_JUMP_VALUE_TEXT: u32 = 40045;
    pub const ID_TARGET_VALUE_SLIDER_CONTROL: u32 = 40046;
    pub const ID_TARGET_VALUE_EDIT_CONTROL: u32 = 40047;
    pub const ID_TARGET_VALUE_TEXT: u32 = 40048;
    pub const ID_SOURCE_NUMBER_EDIT_CONTROL: u32 = 40049;
    pub const ID_TARGET_OPEN_BUTTON: u32 = 40050;
    pub const ID_TARGET_LEARN_BUTTON: u32 = 40051;
    pub const ID_SOURCE_CHARACTER_COMBO_BOX: u32 = 40052;
    pub const ID_SOURCE_NUMBER_COMBO_BOX: u32 = 40053;
    pub const ID_SOURCE_14_BIT_CHECK_BOX: u32 = 40054;
    pub const ID_SETTINGS_MAX_TARGET_JUMP_EDIT_CONTROL: u32 = 40055;
    pub const ID_SETTINGS_MAX_TARGET_JUMP_LABEL_TEXT: u32 = 40056;
    pub const ID_SETTINGS_MAX_TARGET_JUMP_SLIDER_CONTROL: u32 = 40057;
    pub const ID_SETTINGS_MAX_TARGET_JUMP_VALUE_TEXT: u32 = 40058;
    pub const ID_TARGET_TRACK_SELECTED_CHECK_BOX: u32 = 40059;
    pub const ID_MODE_EEL_CONTROL_TRANSFORMATION_EDIT_CONTROL: u32 = 40060;
    pub const ID_MODE_EEL_FEEDBACK_TRANSFORMATION_LABEL: u32 = 40061;
    pub const ID_MODE_EEL_CONTROL_TRANSFORMATION_LABEL: u32 = 40062;
    pub const ID_MODE_EEL_FEEDBACK_TRANSFORMATION_EDIT_CONTROL: u32 = 40063;
    pub const ID_SETTINGS_TARGET_JUMP_LABEL_TEXT: u32 = 40064;
    pub const ID_SOURCE_CHANNEL_LABEL: u32 = 40065;
    pub const ID_SETTINGS_MIN_TARGET_JUMP_LABEL_TEXT: u32 = 40066;
    pub const ID_SETTINGS_SCALE_MODE_CHECK_BOX: u32 = 40067;
    pub const ID_MAPPING_CONTROL_ENABLED_CHECK_BOX: u32 = 40068;
    pub const ID_MAPPING_FEEDBACK_ENABLED_CHECK_BOX: u32 = 40069;
    pub const ID_MAPPING_FIND_IN_LIST_BUTTON: u32 = 40070;
    pub const ID_MAPPING_NAME_EDIT_CONTROL: u32 = 40071;
    pub const ID_SETTINGS_IGNORE_OUT_OF_RANGE_CHECK_BOX: u32 = 40072;
    pub const ID_SOURCE_MIDI_CLOCK_TRANSPORT_MESSAGE_TYPE_COMBOX_BOX: u32 = 40073;
    pub const ID_SOURCE_MIDI_MESSAGE_TYPE_LABEL_TEXT: u32 = 40074;
    pub const SW_SHOW: u32 = 5;
    pub const WM_DESTROY: u32 = 2;
    pub const WM_CLOSE: u32 = 16;
    pub const WM_INITDIALOG: u32 = 272;
    pub const WM_COMMAND: u32 = 273;
    pub const ID_CMD: u32 = 236;
    pub const ID_PSRESTARTWINDOWS: u32 = 2;
    pub const ID_PSREBOOTSYSTEM: u32 = 3;
    pub const ID_DEFAULTINST: i32 = -2;
    pub type BOOL = ::std::os::raw::c_int;
    pub type WORD = ::std::os::raw::c_ushort;
    pub type UINT = ::std::os::raw::c_uint;
    pub type INT_PTR = ::std::os::raw::c_longlong;
    pub type UINT_PTR = ::std::os::raw::c_ulonglong;
    pub type LONG_PTR = ::std::os::raw::c_longlong;
    pub type ULONG_PTR = ::std::os::raw::c_ulonglong;
    pub type CHAR = ::std::os::raw::c_char;
    pub type LPSTR = *mut root::CHAR;
    pub type LPCSTR = *const root::CHAR;
    pub type WPARAM = root::UINT_PTR;
    pub type LPARAM = root::LONG_PTR;
    pub type LRESULT = root::LONG_PTR;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HINSTANCE__ {
        pub unused: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_HINSTANCE__() {
        assert_eq!(
            ::std::mem::size_of::<HINSTANCE__>(),
            4usize,
            concat!("Size of: ", stringify!(HINSTANCE__))
        );
        assert_eq!(
            ::std::mem::align_of::<HINSTANCE__>(),
            4usize,
            concat!("Alignment of ", stringify!(HINSTANCE__))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HINSTANCE__>())).unused as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HINSTANCE__),
                "::",
                stringify!(unused)
            )
        );
    }
    pub type HINSTANCE = *mut root::HINSTANCE__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HWND__ {
        pub unused: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_HWND__() {
        assert_eq!(
            ::std::mem::size_of::<HWND__>(),
            4usize,
            concat!("Size of: ", stringify!(HWND__))
        );
        assert_eq!(
            ::std::mem::align_of::<HWND__>(),
            4usize,
            concat!("Alignment of ", stringify!(HWND__))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HWND__>())).unused as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HWND__),
                "::",
                stringify!(unused)
            )
        );
    }
    pub type HWND = *mut root::HWND__;
    pub type DLGPROC = ::std::option::Option<
        unsafe extern "C" fn(
            arg1: root::HWND,
            arg2: root::UINT,
            arg3: root::WPARAM,
            arg4: root::LPARAM,
        ) -> root::INT_PTR,
    >;
    extern "C" {
        pub fn DefWindowProcA(
            hWnd: root::HWND,
            Msg: root::UINT,
            wParam: root::WPARAM,
            lParam: root::LPARAM,
        ) -> root::LRESULT;
    }
    extern "C" {
        pub fn DestroyWindow(hWnd: root::HWND) -> root::BOOL;
    }
    extern "C" {
        pub fn ShowWindow(hWnd: root::HWND, nCmdShow: ::std::os::raw::c_int) -> root::BOOL;
    }
    extern "C" {
        pub fn CreateDialogParamA(
            hInstance: root::HINSTANCE,
            lpTemplateName: root::LPCSTR,
            hWndParent: root::HWND,
            lpDialogFunc: root::DLGPROC,
            dwInitParam: root::LPARAM,
        ) -> root::HWND;
    }
    extern "C" {
        pub fn GetDlgItem(hDlg: root::HWND, nIDDlgItem: ::std::os::raw::c_int) -> root::HWND;
    }
    extern "C" {
        pub fn SetWindowTextA(hWnd: root::HWND, lpString: root::LPCSTR) -> root::BOOL;
    }
}
