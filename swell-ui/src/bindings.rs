/* automatically generated by rust-bindgen */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub type BOOL = ::std::os::raw::c_int;
    pub type LONG = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HWND__ {
        pub unused: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_HWND__() {
        assert_eq!(
            ::std::mem::size_of::<HWND__>(),
            4usize,
            concat!("Size of: ", stringify!(HWND__))
        );
        assert_eq!(
            ::std::mem::align_of::<HWND__>(),
            4usize,
            concat!("Alignment of ", stringify!(HWND__))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<HWND__>())).unused as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HWND__),
                "::",
                stringify!(unused)
            )
        );
    }
    pub type HWND = *mut root::HWND__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tagRECT {
        pub left: root::LONG,
        pub top: root::LONG,
        pub right: root::LONG,
        pub bottom: root::LONG,
    }
    #[test]
    fn bindgen_test_layout_tagRECT() {
        assert_eq!(
            ::std::mem::size_of::<tagRECT>(),
            16usize,
            concat!("Size of: ", stringify!(tagRECT))
        );
        assert_eq!(
            ::std::mem::align_of::<tagRECT>(),
            4usize,
            concat!("Alignment of ", stringify!(tagRECT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagRECT>())).left as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tagRECT),
                "::",
                stringify!(left)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagRECT>())).top as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(tagRECT),
                "::",
                stringify!(top)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagRECT>())).right as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tagRECT),
                "::",
                stringify!(right)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<tagRECT>())).bottom as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(tagRECT),
                "::",
                stringify!(bottom)
            )
        );
    }
    pub type LPRECT = *mut root::tagRECT;
    extern "C" {
        pub fn MapDialogRect(hDlg: root::HWND, lpRect: root::LPRECT) -> root::BOOL;
    }
}
